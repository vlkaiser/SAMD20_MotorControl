
SAMD20_MotorControl.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001994  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000020  20000000  00001994  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000318  20000020  000019b4  00020020  2**2
                  ALLOC
  3 .stack        00002000  20000338  00001ccc  00020020  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY
  6 .debug_info   00028d05  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000042b0  00000000  00000000  00048da6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000047ca  00000000  00000000  0004d056  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000005d0  00000000  00000000  00051820  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000005e0  00000000  00000000  00051df0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  000075c8  00000000  00000000  000523d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000e6bf  00000000  00000000  00059998  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00060794  00000000  00000000  00068057  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00000d0c  00000000  00000000  000c87ec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	38 23 00 20 4d 16 00 00 49 16 00 00 49 16 00 00     8#. M...I...I...
	...
      2c:	49 16 00 00 00 00 00 00 00 00 00 00 49 16 00 00     I...........I...
      3c:	75 0e 00 00 49 16 00 00 49 16 00 00 39 02 00 00     u...I...I...9...
      4c:	49 16 00 00 49 16 00 00 49 16 00 00 39 03 00 00     I...I...I...9...
      5c:	05 0e 00 00 15 0e 00 00 25 0e 00 00 35 0e 00 00     ........%...5...
      6c:	45 0e 00 00 55 0e 00 00 b9 02 00 00 c9 02 00 00     E...U...........
      7c:	d9 02 00 00 e9 02 00 00 f9 02 00 00 09 03 00 00     ................
      8c:	19 03 00 00 29 03 00 00 49 16 00 00 49 16 00 00     ....)...I...I...
      9c:	49 16 00 00 49 16 00 00                             I...I...

000000a4 <__do_global_dtors_aux>:
      a4:	b510      	push	{r4, lr}
      a6:	4c06      	ldr	r4, [pc, #24]	; (c0 <__do_global_dtors_aux+0x1c>)
      a8:	7823      	ldrb	r3, [r4, #0]
      aa:	2b00      	cmp	r3, #0
      ac:	d107      	bne.n	be <__do_global_dtors_aux+0x1a>
      ae:	4b05      	ldr	r3, [pc, #20]	; (c4 <__do_global_dtors_aux+0x20>)
      b0:	2b00      	cmp	r3, #0
      b2:	d002      	beq.n	ba <__do_global_dtors_aux+0x16>
      b4:	4804      	ldr	r0, [pc, #16]	; (c8 <__do_global_dtors_aux+0x24>)
      b6:	e000      	b.n	ba <__do_global_dtors_aux+0x16>
      b8:	bf00      	nop
      ba:	2301      	movs	r3, #1
      bc:	7023      	strb	r3, [r4, #0]
      be:	bd10      	pop	{r4, pc}
      c0:	20000020 	.word	0x20000020
      c4:	00000000 	.word	0x00000000
      c8:	00001994 	.word	0x00001994

000000cc <frame_dummy>:
      cc:	4b08      	ldr	r3, [pc, #32]	; (f0 <frame_dummy+0x24>)
      ce:	b510      	push	{r4, lr}
      d0:	2b00      	cmp	r3, #0
      d2:	d003      	beq.n	dc <frame_dummy+0x10>
      d4:	4907      	ldr	r1, [pc, #28]	; (f4 <frame_dummy+0x28>)
      d6:	4808      	ldr	r0, [pc, #32]	; (f8 <frame_dummy+0x2c>)
      d8:	e000      	b.n	dc <frame_dummy+0x10>
      da:	bf00      	nop
      dc:	4807      	ldr	r0, [pc, #28]	; (fc <frame_dummy+0x30>)
      de:	6803      	ldr	r3, [r0, #0]
      e0:	2b00      	cmp	r3, #0
      e2:	d100      	bne.n	e6 <frame_dummy+0x1a>
      e4:	bd10      	pop	{r4, pc}
      e6:	4b06      	ldr	r3, [pc, #24]	; (100 <frame_dummy+0x34>)
      e8:	2b00      	cmp	r3, #0
      ea:	d0fb      	beq.n	e4 <frame_dummy+0x18>
      ec:	4798      	blx	r3
      ee:	e7f9      	b.n	e4 <frame_dummy+0x18>
      f0:	00000000 	.word	0x00000000
      f4:	20000024 	.word	0x20000024
      f8:	00001994 	.word	0x00001994
      fc:	00001994 	.word	0x00001994
     100:	00000000 	.word	0x00000000

00000104 <wdt_set_config>:
	return STATUS_OK;
}
#else
enum status_code wdt_set_config(
		const struct wdt_conf *const config)
{
     104:	b510      	push	{r4, lr}
     106:	b082      	sub	sp, #8
     108:	0004      	movs	r4, r0
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     10a:	4a39      	ldr	r2, [pc, #228]	; (1f0 <wdt_set_config+0xec>)
     10c:	6993      	ldr	r3, [r2, #24]
     10e:	2110      	movs	r1, #16
     110:	430b      	orrs	r3, r1
     112:	6193      	str	r3, [r2, #24]
	Wdt *const WDT_module = WDT;

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	return (WDT_module->CTRLA.reg & WDT_CTRLA_ALWAYSON);
#else
	return (WDT_module->CTRL.reg & WDT_CTRL_ALWAYSON);
     114:	4b37      	ldr	r3, [pc, #220]	; (1f4 <wdt_set_config+0xf0>)
     116:	781b      	ldrb	r3, [r3, #0]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_WDT);

	/* Check of the Watchdog has been locked to be always on, if so, abort */
	if (wdt_is_locked()) {
     118:	b25b      	sxtb	r3, r3
		return STATUS_ERR_IO;
     11a:	2010      	movs	r0, #16
	if (wdt_is_locked()) {
     11c:	2b00      	cmp	r3, #0
     11e:	db03      	blt.n	128 <wdt_set_config+0x24>
	}

	/* Check for an invalid timeout period, abort if found */
	if (config->timeout_period == WDT_PERIOD_NONE) {
     120:	78e3      	ldrb	r3, [r4, #3]
		return STATUS_ERR_INVALID_ARG;
     122:	3007      	adds	r0, #7
	if (config->timeout_period == WDT_PERIOD_NONE) {
     124:	2b00      	cmp	r3, #0
     126:	d101      	bne.n	12c <wdt_set_config+0x28>
	while (wdt_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}

	return STATUS_OK;
}
     128:	b002      	add	sp, #8
     12a:	bd10      	pop	{r4, pc}
	if ((config->timeout_period < config->window_period) ||
     12c:	7922      	ldrb	r2, [r4, #4]
     12e:	429a      	cmp	r2, r3
     130:	d8fa      	bhi.n	128 <wdt_set_config+0x24>
     132:	7962      	ldrb	r2, [r4, #5]
     134:	429a      	cmp	r2, r3
     136:	d8f7      	bhi.n	128 <wdt_set_config+0x24>
	WDT_module->CTRL.reg &= ~WDT_CTRL_ENABLE;
     138:	4a2e      	ldr	r2, [pc, #184]	; (1f4 <wdt_set_config+0xf0>)
     13a:	7813      	ldrb	r3, [r2, #0]
     13c:	390e      	subs	r1, #14
     13e:	438b      	bics	r3, r1
     140:	7013      	strb	r3, [r2, #0]
	if (WDT_module->STATUS.reg & WDT_STATUS_SYNCBUSY) {
     142:	79d3      	ldrb	r3, [r2, #7]
	while (wdt_is_syncing()) {
     144:	b25b      	sxtb	r3, r3
     146:	2b00      	cmp	r3, #0
     148:	dbfb      	blt.n	142 <wdt_set_config+0x3e>
	if(config->enable == false) {
     14a:	7863      	ldrb	r3, [r4, #1]
		return STATUS_OK;
     14c:	2000      	movs	r0, #0
	if(config->enable == false) {
     14e:	2b00      	cmp	r3, #0
     150:	d0ea      	beq.n	128 <wdt_set_config+0x24>
	gclk_chan_conf.source_generator = config->clock_source;
     152:	a901      	add	r1, sp, #4
     154:	78a3      	ldrb	r3, [r4, #2]
     156:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(WDT_GCLK_ID, &gclk_chan_conf);
     158:	3001      	adds	r0, #1
     15a:	4b27      	ldr	r3, [pc, #156]	; (1f8 <wdt_set_config+0xf4>)
     15c:	4798      	blx	r3
	system_gclk_chan_enable(WDT_GCLK_ID);
     15e:	2001      	movs	r0, #1
     160:	4b26      	ldr	r3, [pc, #152]	; (1fc <wdt_set_config+0xf8>)
     162:	4798      	blx	r3
	if (config->always_on) {
     164:	7823      	ldrb	r3, [r4, #0]
     166:	2b00      	cmp	r3, #0
     168:	d127      	bne.n	1ba <wdt_set_config+0xb6>
	new_config |= (config->timeout_period - 1) << WDT_CONFIG_PER_Pos;
     16a:	78e3      	ldrb	r3, [r4, #3]
     16c:	3b01      	subs	r3, #1
	if (config->window_period != WDT_PERIOD_NONE) {
     16e:	7922      	ldrb	r2, [r4, #4]
     170:	2a00      	cmp	r2, #0
     172:	d026      	beq.n	1c2 <wdt_set_config+0xbe>
		WDT_module->CTRL.reg |= WDT_CTRL_WEN;
     174:	491f      	ldr	r1, [pc, #124]	; (1f4 <wdt_set_config+0xf0>)
     176:	780a      	ldrb	r2, [r1, #0]
     178:	2004      	movs	r0, #4
     17a:	4302      	orrs	r2, r0
     17c:	700a      	strb	r2, [r1, #0]
		new_config |= (config->window_period - 1) << WDT_CONFIG_WINDOW_Pos;
     17e:	7922      	ldrb	r2, [r4, #4]
     180:	3a01      	subs	r2, #1
     182:	4082      	lsls	r2, r0
     184:	4313      	orrs	r3, r2
     186:	491b      	ldr	r1, [pc, #108]	; (1f4 <wdt_set_config+0xf0>)
     188:	79ca      	ldrb	r2, [r1, #7]
	while (wdt_is_syncing()) {
     18a:	b252      	sxtb	r2, r2
     18c:	2a00      	cmp	r2, #0
     18e:	dbfb      	blt.n	188 <wdt_set_config+0x84>
	WDT_module->CONFIG.reg = new_config;
     190:	b2db      	uxtb	r3, r3
     192:	4a18      	ldr	r2, [pc, #96]	; (1f4 <wdt_set_config+0xf0>)
     194:	7053      	strb	r3, [r2, #1]
	if (config->early_warning_period != WDT_PERIOD_NONE) {
     196:	7963      	ldrb	r3, [r4, #5]
     198:	2b00      	cmp	r3, #0
     19a:	d118      	bne.n	1ce <wdt_set_config+0xca>
	if (config->always_on) {
     19c:	7823      	ldrb	r3, [r4, #0]
     19e:	2b00      	cmp	r3, #0
     1a0:	d01f      	beq.n	1e2 <wdt_set_config+0xde>
		WDT_module->CTRL.reg |= WDT_CTRL_ALWAYSON;
     1a2:	4a14      	ldr	r2, [pc, #80]	; (1f4 <wdt_set_config+0xf0>)
     1a4:	7813      	ldrb	r3, [r2, #0]
     1a6:	2180      	movs	r1, #128	; 0x80
     1a8:	430b      	orrs	r3, r1
     1aa:	7013      	strb	r3, [r2, #0]
     1ac:	4a11      	ldr	r2, [pc, #68]	; (1f4 <wdt_set_config+0xf0>)
     1ae:	79d3      	ldrb	r3, [r2, #7]
	while (wdt_is_syncing()) {
     1b0:	b25b      	sxtb	r3, r3
     1b2:	2b00      	cmp	r3, #0
     1b4:	dbfb      	blt.n	1ae <wdt_set_config+0xaa>
	return STATUS_OK;
     1b6:	2000      	movs	r0, #0
     1b8:	e7b6      	b.n	128 <wdt_set_config+0x24>
		system_gclk_chan_lock(WDT_GCLK_ID);
     1ba:	2001      	movs	r0, #1
     1bc:	4b10      	ldr	r3, [pc, #64]	; (200 <wdt_set_config+0xfc>)
     1be:	4798      	blx	r3
     1c0:	e7d3      	b.n	16a <wdt_set_config+0x66>
		WDT_module->CTRL.reg &= ~WDT_CTRL_WEN;
     1c2:	490c      	ldr	r1, [pc, #48]	; (1f4 <wdt_set_config+0xf0>)
     1c4:	780a      	ldrb	r2, [r1, #0]
     1c6:	2004      	movs	r0, #4
     1c8:	4382      	bics	r2, r0
     1ca:	700a      	strb	r2, [r1, #0]
     1cc:	e7db      	b.n	186 <wdt_set_config+0x82>
     1ce:	0011      	movs	r1, r2
     1d0:	79ca      	ldrb	r2, [r1, #7]
		while (wdt_is_syncing()) {
     1d2:	b252      	sxtb	r2, r2
     1d4:	2a00      	cmp	r2, #0
     1d6:	dbfb      	blt.n	1d0 <wdt_set_config+0xcc>
			= (config->early_warning_period - 1) << WDT_EWCTRL_EWOFFSET_Pos;
     1d8:	3b01      	subs	r3, #1
     1da:	b2db      	uxtb	r3, r3
     1dc:	4a05      	ldr	r2, [pc, #20]	; (1f4 <wdt_set_config+0xf0>)
     1de:	7093      	strb	r3, [r2, #2]
     1e0:	e7dc      	b.n	19c <wdt_set_config+0x98>
		WDT_module->CTRL.reg |= WDT_CTRL_ENABLE;
     1e2:	4a04      	ldr	r2, [pc, #16]	; (1f4 <wdt_set_config+0xf0>)
     1e4:	7813      	ldrb	r3, [r2, #0]
     1e6:	2102      	movs	r1, #2
     1e8:	430b      	orrs	r3, r1
     1ea:	7013      	strb	r3, [r2, #0]
     1ec:	e7de      	b.n	1ac <wdt_set_config+0xa8>
     1ee:	46c0      	nop			; (mov r8, r8)
     1f0:	40000400 	.word	0x40000400
     1f4:	40001000 	.word	0x40001000
     1f8:	000014c1 	.word	0x000014c1
     1fc:	00001435 	.word	0x00001435
     200:	000014dd 	.word	0x000014dd

00000204 <wdt_register_callback>:
		const enum wdt_callback type)
{
	/* Sanity check arguments */
	Assert(callback);

	switch (type)
     204:	2900      	cmp	r1, #0
     206:	d001      	beq.n	20c <wdt_register_callback+0x8>
	case WDT_CALLBACK_EARLY_WARNING:
		wdt_early_warning_callback = callback;
		return STATUS_OK;
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     208:	2017      	movs	r0, #23
	}
}
     20a:	4770      	bx	lr
		wdt_early_warning_callback = callback;
     20c:	4b01      	ldr	r3, [pc, #4]	; (214 <wdt_register_callback+0x10>)
     20e:	6018      	str	r0, [r3, #0]
		return STATUS_OK;
     210:	2000      	movs	r0, #0
     212:	e7fa      	b.n	20a <wdt_register_callback+0x6>
     214:	20000074 	.word	0x20000074

00000218 <wdt_enable_callback>:
enum status_code wdt_enable_callback(
		const enum wdt_callback type)
{
	Wdt *const WDT_module = WDT;

	switch (type)
     218:	2800      	cmp	r0, #0
     21a:	d001      	beq.n	220 <wdt_enable_callback+0x8>
		WDT_module->INTENSET.reg = WDT_INTENSET_EW;
		system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_WDT);
		return STATUS_OK;
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     21c:	2017      	movs	r0, #23
	}
}
     21e:	4770      	bx	lr
		WDT_module->INTENSET.reg = WDT_INTENSET_EW;
     220:	2201      	movs	r2, #1
     222:	4b03      	ldr	r3, [pc, #12]	; (230 <wdt_enable_callback+0x18>)
     224:	715a      	strb	r2, [r3, #5]
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     226:	3203      	adds	r2, #3
     228:	4b02      	ldr	r3, [pc, #8]	; (234 <wdt_enable_callback+0x1c>)
     22a:	601a      	str	r2, [r3, #0]
		return STATUS_OK;
     22c:	e7f7      	b.n	21e <wdt_enable_callback+0x6>
     22e:	46c0      	nop			; (mov r8, r8)
     230:	40001000 	.word	0x40001000
     234:	e000e100 	.word	0xe000e100

00000238 <WDT_Handler>:
	}
}

/** Handler for the WDT hardware module interrupt. */
void WDT_Handler(void)
{
     238:	b510      	push	{r4, lr}
 */
static inline void wdt_clear_early_warning(void)
{
	Wdt *const WDT_module = WDT;

	WDT_module->INTFLAG.reg = WDT_INTFLAG_EW;
     23a:	2201      	movs	r2, #1
     23c:	4b03      	ldr	r3, [pc, #12]	; (24c <WDT_Handler+0x14>)
     23e:	719a      	strb	r2, [r3, #6]
	wdt_clear_early_warning();

	if (wdt_early_warning_callback) {
     240:	4b03      	ldr	r3, [pc, #12]	; (250 <WDT_Handler+0x18>)
     242:	681b      	ldr	r3, [r3, #0]
     244:	2b00      	cmp	r3, #0
     246:	d000      	beq.n	24a <WDT_Handler+0x12>
		wdt_early_warning_callback();
     248:	4798      	blx	r3
	}
}
     24a:	bd10      	pop	{r4, pc}
     24c:	40001000 	.word	0x40001000
     250:	20000074 	.word	0x20000074

00000254 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
     254:	b570      	push	{r4, r5, r6, lr}
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
     256:	0080      	lsls	r0, r0, #2
     258:	4b16      	ldr	r3, [pc, #88]	; (2b4 <_tc_interrupt_handler+0x60>)
     25a:	58c4      	ldr	r4, [r0, r3]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
     25c:	6823      	ldr	r3, [r4, #0]
     25e:	7b9d      	ldrb	r5, [r3, #14]
     260:	7e22      	ldrb	r2, [r4, #24]
     262:	7e63      	ldrb	r3, [r4, #25]
     264:	4013      	ands	r3, r2
     266:	401d      	ands	r5, r3
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
     268:	07eb      	lsls	r3, r5, #31
     26a:	d406      	bmi.n	27a <_tc_interrupt_handler+0x26>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
     26c:	07ab      	lsls	r3, r5, #30
     26e:	d40b      	bmi.n	288 <_tc_interrupt_handler+0x34>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
     270:	06eb      	lsls	r3, r5, #27
     272:	d410      	bmi.n	296 <_tc_interrupt_handler+0x42>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
     274:	06ab      	lsls	r3, r5, #26
     276:	d415      	bmi.n	2a4 <_tc_interrupt_handler+0x50>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
	}
}
     278:	bd70      	pop	{r4, r5, r6, pc}
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
     27a:	0020      	movs	r0, r4
     27c:	68a3      	ldr	r3, [r4, #8]
     27e:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
     280:	2301      	movs	r3, #1
     282:	6822      	ldr	r2, [r4, #0]
     284:	7393      	strb	r3, [r2, #14]
     286:	e7f1      	b.n	26c <_tc_interrupt_handler+0x18>
		(module->callback[TC_CALLBACK_ERROR])(module);
     288:	0020      	movs	r0, r4
     28a:	68e3      	ldr	r3, [r4, #12]
     28c:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
     28e:	2302      	movs	r3, #2
     290:	6822      	ldr	r2, [r4, #0]
     292:	7393      	strb	r3, [r2, #14]
     294:	e7ec      	b.n	270 <_tc_interrupt_handler+0x1c>
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
     296:	0020      	movs	r0, r4
     298:	6923      	ldr	r3, [r4, #16]
     29a:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
     29c:	2310      	movs	r3, #16
     29e:	6822      	ldr	r2, [r4, #0]
     2a0:	7393      	strb	r3, [r2, #14]
     2a2:	e7e7      	b.n	274 <_tc_interrupt_handler+0x20>
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
     2a4:	0020      	movs	r0, r4
     2a6:	6963      	ldr	r3, [r4, #20]
     2a8:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
     2aa:	6823      	ldr	r3, [r4, #0]
     2ac:	2220      	movs	r2, #32
     2ae:	739a      	strb	r2, [r3, #14]
}
     2b0:	e7e2      	b.n	278 <_tc_interrupt_handler+0x24>
     2b2:	46c0      	nop			; (mov r8, r8)
     2b4:	20000078 	.word	0x20000078

000002b8 <TC0_Handler>:
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
     2b8:	b510      	push	{r4, lr}
     2ba:	2000      	movs	r0, #0
     2bc:	4b01      	ldr	r3, [pc, #4]	; (2c4 <TC0_Handler+0xc>)
     2be:	4798      	blx	r3
     2c0:	bd10      	pop	{r4, pc}
     2c2:	46c0      	nop			; (mov r8, r8)
     2c4:	00000255 	.word	0x00000255

000002c8 <TC1_Handler>:
     2c8:	b510      	push	{r4, lr}
     2ca:	2001      	movs	r0, #1
     2cc:	4b01      	ldr	r3, [pc, #4]	; (2d4 <TC1_Handler+0xc>)
     2ce:	4798      	blx	r3
     2d0:	bd10      	pop	{r4, pc}
     2d2:	46c0      	nop			; (mov r8, r8)
     2d4:	00000255 	.word	0x00000255

000002d8 <TC2_Handler>:
     2d8:	b510      	push	{r4, lr}
     2da:	2002      	movs	r0, #2
     2dc:	4b01      	ldr	r3, [pc, #4]	; (2e4 <TC2_Handler+0xc>)
     2de:	4798      	blx	r3
     2e0:	bd10      	pop	{r4, pc}
     2e2:	46c0      	nop			; (mov r8, r8)
     2e4:	00000255 	.word	0x00000255

000002e8 <TC3_Handler>:
     2e8:	b510      	push	{r4, lr}
     2ea:	2003      	movs	r0, #3
     2ec:	4b01      	ldr	r3, [pc, #4]	; (2f4 <TC3_Handler+0xc>)
     2ee:	4798      	blx	r3
     2f0:	bd10      	pop	{r4, pc}
     2f2:	46c0      	nop			; (mov r8, r8)
     2f4:	00000255 	.word	0x00000255

000002f8 <TC4_Handler>:
     2f8:	b510      	push	{r4, lr}
     2fa:	2004      	movs	r0, #4
     2fc:	4b01      	ldr	r3, [pc, #4]	; (304 <TC4_Handler+0xc>)
     2fe:	4798      	blx	r3
     300:	bd10      	pop	{r4, pc}
     302:	46c0      	nop			; (mov r8, r8)
     304:	00000255 	.word	0x00000255

00000308 <TC5_Handler>:
     308:	b510      	push	{r4, lr}
     30a:	2005      	movs	r0, #5
     30c:	4b01      	ldr	r3, [pc, #4]	; (314 <TC5_Handler+0xc>)
     30e:	4798      	blx	r3
     310:	bd10      	pop	{r4, pc}
     312:	46c0      	nop			; (mov r8, r8)
     314:	00000255 	.word	0x00000255

00000318 <TC6_Handler>:
     318:	b510      	push	{r4, lr}
     31a:	2006      	movs	r0, #6
     31c:	4b01      	ldr	r3, [pc, #4]	; (324 <TC6_Handler+0xc>)
     31e:	4798      	blx	r3
     320:	bd10      	pop	{r4, pc}
     322:	46c0      	nop			; (mov r8, r8)
     324:	00000255 	.word	0x00000255

00000328 <TC7_Handler>:
     328:	b510      	push	{r4, lr}
     32a:	2007      	movs	r0, #7
     32c:	4b01      	ldr	r3, [pc, #4]	; (334 <TC7_Handler+0xc>)
     32e:	4798      	blx	r3
     330:	bd10      	pop	{r4, pc}
     332:	46c0      	nop			; (mov r8, r8)
     334:	00000255 	.word	0x00000255

00000338 <EVSYS_Handler>:

	return STATUS_OK;
}

void EVSYS_Handler(void)
{
     338:	b510      	push	{r4, lr}
	struct events_hook *current_hook = _events_inst.hook_list;
     33a:	4b0b      	ldr	r3, [pc, #44]	; (368 <EVSYS_Handler+0x30>)
     33c:	691c      	ldr	r4, [r3, #16]
	uint32_t flag;

	/* Synch the interrupt flag buffer with the hardware register */
	flag = EVSYS->INTFLAG.reg;
     33e:	490b      	ldr	r1, [pc, #44]	; (36c <EVSYS_Handler+0x34>)
     340:	698a      	ldr	r2, [r1, #24]
	_events_inst.interrupt_flag_buffer |= flag;
     342:	6898      	ldr	r0, [r3, #8]
     344:	4302      	orrs	r2, r0
     346:	609a      	str	r2, [r3, #8]
	/* Clear all hardware interrupt flags */
	EVSYS->INTFLAG.reg = _EVENTS_INTFLAGS_MASK;
     348:	4b09      	ldr	r3, [pc, #36]	; (370 <EVSYS_Handler+0x38>)
     34a:	618b      	str	r3, [r1, #24]

	/* Traverse the linked list */
	while (current_hook != NULL) {
     34c:	2c00      	cmp	r4, #0
     34e:	d005      	beq.n	35c <EVSYS_Handler+0x24>
		current_hook->hook_func(current_hook->resource);
     350:	6820      	ldr	r0, [r4, #0]
     352:	6863      	ldr	r3, [r4, #4]
     354:	4798      	blx	r3
		current_hook = current_hook->next;
     356:	68a4      	ldr	r4, [r4, #8]
	while (current_hook != NULL) {
     358:	2c00      	cmp	r4, #0
     35a:	d1f9      	bne.n	350 <EVSYS_Handler+0x18>
	}

	/* Clear acknowledged interrupt sources from the interrupt flag buffer */
	flag = _events_inst.interrupt_flag_ack_buffer;
     35c:	4b02      	ldr	r3, [pc, #8]	; (368 <EVSYS_Handler+0x30>)
     35e:	68d9      	ldr	r1, [r3, #12]
	_events_inst.interrupt_flag_buffer &= ~flag;
     360:	689a      	ldr	r2, [r3, #8]
     362:	438a      	bics	r2, r1
     364:	609a      	str	r2, [r3, #8]
}
     366:	bd10      	pop	{r4, pc}
     368:	20000000 	.word	0x20000000
     36c:	42000400 	.word	0x42000400
     370:	0f0fffff 	.word	0x0f0fffff

00000374 <_system_events_init>:
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     374:	4a06      	ldr	r2, [pc, #24]	; (390 <_system_events_init+0x1c>)
     376:	6a13      	ldr	r3, [r2, #32]
     378:	2102      	movs	r1, #2
     37a:	430b      	orrs	r3, r1
     37c:	6213      	str	r3, [r2, #32]
{
	/* Enable EVSYS register interface */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_EVSYS);

	/* Make sure the EVSYS module is properly reset */
	EVSYS->CTRL.reg = EVSYS_CTRL_SWRST;
     37e:	2201      	movs	r2, #1
     380:	4b04      	ldr	r3, [pc, #16]	; (394 <_system_events_init+0x20>)
     382:	701a      	strb	r2, [r3, #0]

	while (EVSYS->CTRL.reg & EVSYS_CTRL_SWRST) {
     384:	0019      	movs	r1, r3
     386:	780b      	ldrb	r3, [r1, #0]
     388:	4213      	tst	r3, r2
     38a:	d1fc      	bne.n	386 <_system_events_init+0x12>
	}
}
     38c:	4770      	bx	lr
     38e:	46c0      	nop			; (mov r8, r8)
     390:	40000400 	.word	0x40000400
     394:	42000400 	.word	0x42000400

00000398 <bod_set_config>:
 * \retval STATUS_ERR_INVALID_OPTION  The requested BOD level was outside the acceptable range
 */
enum status_code bod_set_config(
		const enum bod bod_id,
		struct bod_config *const conf)
{
     398:	b510      	push	{r4, lr}
	Assert(conf);

	uint32_t temp = 0;

	/* Check if module is enabled. */
	if (SYSCTRL->BOD33.reg & SYSCTRL_BOD33_ENABLE) {
     39a:	4b1b      	ldr	r3, [pc, #108]	; (408 <bod_set_config+0x70>)
     39c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     39e:	079b      	lsls	r3, r3, #30
     3a0:	d504      	bpl.n	3ac <bod_set_config+0x14>
		SYSCTRL->BOD33.reg &= ~SYSCTRL_BOD33_ENABLE;
     3a2:	4a19      	ldr	r2, [pc, #100]	; (408 <bod_set_config+0x70>)
     3a4:	6b53      	ldr	r3, [r2, #52]	; 0x34
     3a6:	2402      	movs	r4, #2
     3a8:	43a3      	bics	r3, r4
     3aa:	6353      	str	r3, [r2, #52]	; 0x34
	}

	/* Convert BOD prescaler, trigger action and mode to a bitmask */
	temp |= (uint32_t)conf->prescaler | (uint32_t)conf->action |
			(uint32_t)conf->mode;
     3ac:	884a      	ldrh	r2, [r1, #2]
	temp |= (uint32_t)conf->prescaler | (uint32_t)conf->action |
     3ae:	880b      	ldrh	r3, [r1, #0]
     3b0:	790c      	ldrb	r4, [r1, #4]
     3b2:	4323      	orrs	r3, r4
     3b4:	4313      	orrs	r3, r2

	if (conf->mode == BOD_MODE_SAMPLED) {
     3b6:	2480      	movs	r4, #128	; 0x80
     3b8:	0064      	lsls	r4, r4, #1
     3ba:	42a2      	cmp	r2, r4
     3bc:	d00d      	beq.n	3da <bod_set_config+0x42>
		/* Enable sampling clock if sampled mode */
		temp |= SYSCTRL_BOD33_CEN;
	}

	if (conf->hysteresis == true) {
     3be:	798a      	ldrb	r2, [r1, #6]
     3c0:	2a00      	cmp	r2, #0
     3c2:	d001      	beq.n	3c8 <bod_set_config+0x30>
		temp |= SYSCTRL_BOD33_HYST;
     3c4:	2204      	movs	r2, #4
     3c6:	4313      	orrs	r3, r2
	}

	if (conf->run_in_standby == true) {
     3c8:	79ca      	ldrb	r2, [r1, #7]
     3ca:	2a00      	cmp	r2, #0
     3cc:	d001      	beq.n	3d2 <bod_set_config+0x3a>
		temp |= SYSCTRL_BOD33_RUNSTDBY;
     3ce:	2240      	movs	r2, #64	; 0x40
     3d0:	4313      	orrs	r3, r2
	}

	switch (bod_id) {
     3d2:	2800      	cmp	r0, #0
     3d4:	d005      	beq.n	3e2 <bod_set_config+0x4a>
			while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_B33SRDY)) {
				/* Wait for BOD33 register sync ready */
			}
			break;
		default:
			return STATUS_ERR_INVALID_ARG;
     3d6:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
     3d8:	bd10      	pop	{r4, pc}
		temp |= SYSCTRL_BOD33_CEN;
     3da:	2280      	movs	r2, #128	; 0x80
     3dc:	0092      	lsls	r2, r2, #2
     3de:	4313      	orrs	r3, r2
     3e0:	e7ed      	b.n	3be <bod_set_config+0x26>
			if (conf->level > 0x3F) {
     3e2:	794a      	ldrb	r2, [r1, #5]
				return STATUS_ERR_INVALID_ARG;
     3e4:	3017      	adds	r0, #23
			if (conf->level > 0x3F) {
     3e6:	2a3f      	cmp	r2, #63	; 0x3f
     3e8:	d8f6      	bhi.n	3d8 <bod_set_config+0x40>
			SYSCTRL->BOD33.reg = SYSCTRL_BOD33_LEVEL(conf->level) | temp;
     3ea:	0412      	lsls	r2, r2, #16
     3ec:	21fc      	movs	r1, #252	; 0xfc
     3ee:	0389      	lsls	r1, r1, #14
     3f0:	400a      	ands	r2, r1
     3f2:	4313      	orrs	r3, r2
     3f4:	4a04      	ldr	r2, [pc, #16]	; (408 <bod_set_config+0x70>)
     3f6:	6353      	str	r3, [r2, #52]	; 0x34
			while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_B33SRDY)) {
     3f8:	0011      	movs	r1, r2
     3fa:	2280      	movs	r2, #128	; 0x80
     3fc:	0112      	lsls	r2, r2, #4
     3fe:	68cb      	ldr	r3, [r1, #12]
     400:	4213      	tst	r3, r2
     402:	d0fc      	beq.n	3fe <bod_set_config+0x66>
	return STATUS_OK;
     404:	2000      	movs	r0, #0
     406:	e7e7      	b.n	3d8 <bod_set_config+0x40>
     408:	40000800 	.word	0x40000800

0000040c <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
     40c:	b5f0      	push	{r4, r5, r6, r7, lr}
     40e:	46de      	mov	lr, fp
     410:	4657      	mov	r7, sl
     412:	464e      	mov	r6, r9
     414:	4645      	mov	r5, r8
     416:	b5e0      	push	{r5, r6, r7, lr}
     418:	b087      	sub	sp, #28
     41a:	4680      	mov	r8, r0
     41c:	9104      	str	r1, [sp, #16]
     41e:	0016      	movs	r6, r2
     420:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     422:	2200      	movs	r2, #0
     424:	2300      	movs	r3, #0
     426:	2100      	movs	r1, #0
     428:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
     42a:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
     42c:	2001      	movs	r0, #1
     42e:	0021      	movs	r1, r4
     430:	9600      	str	r6, [sp, #0]
     432:	9701      	str	r7, [sp, #4]
     434:	465c      	mov	r4, fp
     436:	9403      	str	r4, [sp, #12]
     438:	4644      	mov	r4, r8
     43a:	9405      	str	r4, [sp, #20]
     43c:	e013      	b.n	466 <long_division+0x5a>
     43e:	2420      	movs	r4, #32
     440:	1a64      	subs	r4, r4, r1
     442:	0005      	movs	r5, r0
     444:	40e5      	lsrs	r5, r4
     446:	46a8      	mov	r8, r5
     448:	e014      	b.n	474 <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
     44a:	9c00      	ldr	r4, [sp, #0]
     44c:	9d01      	ldr	r5, [sp, #4]
     44e:	1b12      	subs	r2, r2, r4
     450:	41ab      	sbcs	r3, r5
			q |= bit_shift;
     452:	465c      	mov	r4, fp
     454:	464d      	mov	r5, r9
     456:	432c      	orrs	r4, r5
     458:	46a3      	mov	fp, r4
     45a:	9c03      	ldr	r4, [sp, #12]
     45c:	4645      	mov	r5, r8
     45e:	432c      	orrs	r4, r5
     460:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
     462:	3901      	subs	r1, #1
     464:	d325      	bcc.n	4b2 <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
     466:	2420      	movs	r4, #32
     468:	4264      	negs	r4, r4
     46a:	190c      	adds	r4, r1, r4
     46c:	d4e7      	bmi.n	43e <long_division+0x32>
     46e:	0005      	movs	r5, r0
     470:	40a5      	lsls	r5, r4
     472:	46a8      	mov	r8, r5
     474:	0004      	movs	r4, r0
     476:	408c      	lsls	r4, r1
     478:	46a1      	mov	r9, r4
		r = r << 1;
     47a:	1892      	adds	r2, r2, r2
     47c:	415b      	adcs	r3, r3
     47e:	0014      	movs	r4, r2
     480:	001d      	movs	r5, r3
		if (n & bit_shift) {
     482:	9e05      	ldr	r6, [sp, #20]
     484:	464f      	mov	r7, r9
     486:	403e      	ands	r6, r7
     488:	46b4      	mov	ip, r6
     48a:	9e04      	ldr	r6, [sp, #16]
     48c:	4647      	mov	r7, r8
     48e:	403e      	ands	r6, r7
     490:	46b2      	mov	sl, r6
     492:	4666      	mov	r6, ip
     494:	4657      	mov	r7, sl
     496:	433e      	orrs	r6, r7
     498:	d003      	beq.n	4a2 <long_division+0x96>
			r |= 0x01;
     49a:	0006      	movs	r6, r0
     49c:	4326      	orrs	r6, r4
     49e:	0032      	movs	r2, r6
     4a0:	002b      	movs	r3, r5
		if (r >= d) {
     4a2:	9c00      	ldr	r4, [sp, #0]
     4a4:	9d01      	ldr	r5, [sp, #4]
     4a6:	429d      	cmp	r5, r3
     4a8:	d8db      	bhi.n	462 <long_division+0x56>
     4aa:	d1ce      	bne.n	44a <long_division+0x3e>
     4ac:	4294      	cmp	r4, r2
     4ae:	d8d8      	bhi.n	462 <long_division+0x56>
     4b0:	e7cb      	b.n	44a <long_division+0x3e>
     4b2:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
     4b4:	4658      	mov	r0, fp
     4b6:	0019      	movs	r1, r3
     4b8:	b007      	add	sp, #28
     4ba:	bc3c      	pop	{r2, r3, r4, r5}
     4bc:	4690      	mov	r8, r2
     4be:	4699      	mov	r9, r3
     4c0:	46a2      	mov	sl, r4
     4c2:	46ab      	mov	fp, r5
     4c4:	bdf0      	pop	{r4, r5, r6, r7, pc}

000004c6 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     4c6:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     4c8:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     4ca:	2340      	movs	r3, #64	; 0x40
     4cc:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
     4ce:	4281      	cmp	r1, r0
     4d0:	d202      	bcs.n	4d8 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
     4d2:	0018      	movs	r0, r3
     4d4:	bd10      	pop	{r4, pc}
		baud_calculated++;
     4d6:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
     4d8:	1a09      	subs	r1, r1, r0
		baud_calculated++;
     4da:	1c63      	adds	r3, r4, #1
     4dc:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
     4de:	4288      	cmp	r0, r1
     4e0:	d9f9      	bls.n	4d6 <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     4e2:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
     4e4:	2cff      	cmp	r4, #255	; 0xff
     4e6:	d8f4      	bhi.n	4d2 <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
     4e8:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
     4ea:	2300      	movs	r3, #0
     4ec:	e7f1      	b.n	4d2 <_sercom_get_sync_baud_val+0xc>
	...

000004f0 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     4f0:	b5f0      	push	{r4, r5, r6, r7, lr}
     4f2:	b083      	sub	sp, #12
     4f4:	000f      	movs	r7, r1
     4f6:	0016      	movs	r6, r2
     4f8:	aa08      	add	r2, sp, #32
     4fa:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     4fc:	0004      	movs	r4, r0
     4fe:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     500:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
     502:	42bc      	cmp	r4, r7
     504:	d902      	bls.n	50c <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
     506:	0010      	movs	r0, r2
     508:	b003      	add	sp, #12
     50a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     50c:	2b00      	cmp	r3, #0
     50e:	d114      	bne.n	53a <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     510:	0002      	movs	r2, r0
     512:	0008      	movs	r0, r1
     514:	2100      	movs	r1, #0
     516:	4c19      	ldr	r4, [pc, #100]	; (57c <_sercom_get_async_baud_val+0x8c>)
     518:	47a0      	blx	r4
     51a:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
     51c:	003a      	movs	r2, r7
     51e:	2300      	movs	r3, #0
     520:	2000      	movs	r0, #0
     522:	4c17      	ldr	r4, [pc, #92]	; (580 <_sercom_get_async_baud_val+0x90>)
     524:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
     526:	2200      	movs	r2, #0
     528:	2301      	movs	r3, #1
     52a:	1a12      	subs	r2, r2, r0
     52c:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
     52e:	0c12      	lsrs	r2, r2, #16
     530:	041b      	lsls	r3, r3, #16
     532:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
     534:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
     536:	2200      	movs	r2, #0
     538:	e7e5      	b.n	506 <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
     53a:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     53c:	2b01      	cmp	r3, #1
     53e:	d1f9      	bne.n	534 <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
     540:	000a      	movs	r2, r1
     542:	2300      	movs	r3, #0
     544:	2100      	movs	r1, #0
     546:	4c0d      	ldr	r4, [pc, #52]	; (57c <_sercom_get_async_baud_val+0x8c>)
     548:	47a0      	blx	r4
     54a:	0002      	movs	r2, r0
     54c:	000b      	movs	r3, r1
     54e:	9200      	str	r2, [sp, #0]
     550:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
     552:	0038      	movs	r0, r7
     554:	2100      	movs	r1, #0
     556:	4c0a      	ldr	r4, [pc, #40]	; (580 <_sercom_get_async_baud_val+0x90>)
     558:	47a0      	blx	r4
     55a:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
     55c:	2380      	movs	r3, #128	; 0x80
     55e:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     560:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
     562:	4298      	cmp	r0, r3
     564:	d8cf      	bhi.n	506 <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
     566:	0f79      	lsrs	r1, r7, #29
     568:	00f8      	lsls	r0, r7, #3
     56a:	9a00      	ldr	r2, [sp, #0]
     56c:	9b01      	ldr	r3, [sp, #4]
     56e:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
     570:	00ea      	lsls	r2, r5, #3
     572:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
     574:	b2d2      	uxtb	r2, r2
     576:	0352      	lsls	r2, r2, #13
     578:	432a      	orrs	r2, r5
     57a:	e7db      	b.n	534 <_sercom_get_async_baud_val+0x44>
     57c:	00001871 	.word	0x00001871
     580:	0000040d 	.word	0x0000040d

00000584 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     584:	b510      	push	{r4, lr}
     586:	b082      	sub	sp, #8
     588:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     58a:	4b0e      	ldr	r3, [pc, #56]	; (5c4 <sercom_set_gclk_generator+0x40>)
     58c:	781b      	ldrb	r3, [r3, #0]
     58e:	2b00      	cmp	r3, #0
     590:	d007      	beq.n	5a2 <sercom_set_gclk_generator+0x1e>
     592:	2900      	cmp	r1, #0
     594:	d105      	bne.n	5a2 <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
     596:	4b0b      	ldr	r3, [pc, #44]	; (5c4 <sercom_set_gclk_generator+0x40>)
     598:	785b      	ldrb	r3, [r3, #1]
     59a:	4283      	cmp	r3, r0
     59c:	d010      	beq.n	5c0 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     59e:	201d      	movs	r0, #29
     5a0:	e00c      	b.n	5bc <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
     5a2:	a901      	add	r1, sp, #4
     5a4:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     5a6:	200c      	movs	r0, #12
     5a8:	4b07      	ldr	r3, [pc, #28]	; (5c8 <sercom_set_gclk_generator+0x44>)
     5aa:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     5ac:	200c      	movs	r0, #12
     5ae:	4b07      	ldr	r3, [pc, #28]	; (5cc <sercom_set_gclk_generator+0x48>)
     5b0:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
     5b2:	4b04      	ldr	r3, [pc, #16]	; (5c4 <sercom_set_gclk_generator+0x40>)
     5b4:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     5b6:	2201      	movs	r2, #1
     5b8:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
     5ba:	2000      	movs	r0, #0
}
     5bc:	b002      	add	sp, #8
     5be:	bd10      	pop	{r4, pc}
		return STATUS_OK;
     5c0:	2000      	movs	r0, #0
     5c2:	e7fb      	b.n	5bc <sercom_set_gclk_generator+0x38>
     5c4:	2000003c 	.word	0x2000003c
     5c8:	000014c1 	.word	0x000014c1
     5cc:	00001435 	.word	0x00001435

000005d0 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     5d0:	4b40      	ldr	r3, [pc, #256]	; (6d4 <_sercom_get_default_pad+0x104>)
     5d2:	4298      	cmp	r0, r3
     5d4:	d031      	beq.n	63a <_sercom_get_default_pad+0x6a>
     5d6:	d90a      	bls.n	5ee <_sercom_get_default_pad+0x1e>
     5d8:	4b3f      	ldr	r3, [pc, #252]	; (6d8 <_sercom_get_default_pad+0x108>)
     5da:	4298      	cmp	r0, r3
     5dc:	d04d      	beq.n	67a <_sercom_get_default_pad+0xaa>
     5de:	4b3f      	ldr	r3, [pc, #252]	; (6dc <_sercom_get_default_pad+0x10c>)
     5e0:	4298      	cmp	r0, r3
     5e2:	d05a      	beq.n	69a <_sercom_get_default_pad+0xca>
     5e4:	4b3e      	ldr	r3, [pc, #248]	; (6e0 <_sercom_get_default_pad+0x110>)
     5e6:	4298      	cmp	r0, r3
     5e8:	d037      	beq.n	65a <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
     5ea:	2000      	movs	r0, #0
}
     5ec:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
     5ee:	4b3d      	ldr	r3, [pc, #244]	; (6e4 <_sercom_get_default_pad+0x114>)
     5f0:	4298      	cmp	r0, r3
     5f2:	d00c      	beq.n	60e <_sercom_get_default_pad+0x3e>
     5f4:	4b3c      	ldr	r3, [pc, #240]	; (6e8 <_sercom_get_default_pad+0x118>)
     5f6:	4298      	cmp	r0, r3
     5f8:	d1f7      	bne.n	5ea <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     5fa:	2901      	cmp	r1, #1
     5fc:	d017      	beq.n	62e <_sercom_get_default_pad+0x5e>
     5fe:	2900      	cmp	r1, #0
     600:	d05d      	beq.n	6be <_sercom_get_default_pad+0xee>
     602:	2902      	cmp	r1, #2
     604:	d015      	beq.n	632 <_sercom_get_default_pad+0x62>
     606:	2903      	cmp	r1, #3
     608:	d015      	beq.n	636 <_sercom_get_default_pad+0x66>
	return 0;
     60a:	2000      	movs	r0, #0
     60c:	e7ee      	b.n	5ec <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     60e:	2901      	cmp	r1, #1
     610:	d007      	beq.n	622 <_sercom_get_default_pad+0x52>
     612:	2900      	cmp	r1, #0
     614:	d051      	beq.n	6ba <_sercom_get_default_pad+0xea>
     616:	2902      	cmp	r1, #2
     618:	d005      	beq.n	626 <_sercom_get_default_pad+0x56>
     61a:	2903      	cmp	r1, #3
     61c:	d005      	beq.n	62a <_sercom_get_default_pad+0x5a>
	return 0;
     61e:	2000      	movs	r0, #0
     620:	e7e4      	b.n	5ec <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     622:	4832      	ldr	r0, [pc, #200]	; (6ec <_sercom_get_default_pad+0x11c>)
     624:	e7e2      	b.n	5ec <_sercom_get_default_pad+0x1c>
     626:	4832      	ldr	r0, [pc, #200]	; (6f0 <_sercom_get_default_pad+0x120>)
     628:	e7e0      	b.n	5ec <_sercom_get_default_pad+0x1c>
     62a:	4832      	ldr	r0, [pc, #200]	; (6f4 <_sercom_get_default_pad+0x124>)
     62c:	e7de      	b.n	5ec <_sercom_get_default_pad+0x1c>
     62e:	4832      	ldr	r0, [pc, #200]	; (6f8 <_sercom_get_default_pad+0x128>)
     630:	e7dc      	b.n	5ec <_sercom_get_default_pad+0x1c>
     632:	4832      	ldr	r0, [pc, #200]	; (6fc <_sercom_get_default_pad+0x12c>)
     634:	e7da      	b.n	5ec <_sercom_get_default_pad+0x1c>
     636:	4832      	ldr	r0, [pc, #200]	; (700 <_sercom_get_default_pad+0x130>)
     638:	e7d8      	b.n	5ec <_sercom_get_default_pad+0x1c>
     63a:	2901      	cmp	r1, #1
     63c:	d007      	beq.n	64e <_sercom_get_default_pad+0x7e>
     63e:	2900      	cmp	r1, #0
     640:	d03f      	beq.n	6c2 <_sercom_get_default_pad+0xf2>
     642:	2902      	cmp	r1, #2
     644:	d005      	beq.n	652 <_sercom_get_default_pad+0x82>
     646:	2903      	cmp	r1, #3
     648:	d005      	beq.n	656 <_sercom_get_default_pad+0x86>
	return 0;
     64a:	2000      	movs	r0, #0
     64c:	e7ce      	b.n	5ec <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     64e:	482d      	ldr	r0, [pc, #180]	; (704 <_sercom_get_default_pad+0x134>)
     650:	e7cc      	b.n	5ec <_sercom_get_default_pad+0x1c>
     652:	482d      	ldr	r0, [pc, #180]	; (708 <_sercom_get_default_pad+0x138>)
     654:	e7ca      	b.n	5ec <_sercom_get_default_pad+0x1c>
     656:	482d      	ldr	r0, [pc, #180]	; (70c <_sercom_get_default_pad+0x13c>)
     658:	e7c8      	b.n	5ec <_sercom_get_default_pad+0x1c>
     65a:	2901      	cmp	r1, #1
     65c:	d007      	beq.n	66e <_sercom_get_default_pad+0x9e>
     65e:	2900      	cmp	r1, #0
     660:	d031      	beq.n	6c6 <_sercom_get_default_pad+0xf6>
     662:	2902      	cmp	r1, #2
     664:	d005      	beq.n	672 <_sercom_get_default_pad+0xa2>
     666:	2903      	cmp	r1, #3
     668:	d005      	beq.n	676 <_sercom_get_default_pad+0xa6>
	return 0;
     66a:	2000      	movs	r0, #0
     66c:	e7be      	b.n	5ec <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     66e:	4828      	ldr	r0, [pc, #160]	; (710 <_sercom_get_default_pad+0x140>)
     670:	e7bc      	b.n	5ec <_sercom_get_default_pad+0x1c>
     672:	4828      	ldr	r0, [pc, #160]	; (714 <_sercom_get_default_pad+0x144>)
     674:	e7ba      	b.n	5ec <_sercom_get_default_pad+0x1c>
     676:	4828      	ldr	r0, [pc, #160]	; (718 <_sercom_get_default_pad+0x148>)
     678:	e7b8      	b.n	5ec <_sercom_get_default_pad+0x1c>
     67a:	2901      	cmp	r1, #1
     67c:	d007      	beq.n	68e <_sercom_get_default_pad+0xbe>
     67e:	2900      	cmp	r1, #0
     680:	d023      	beq.n	6ca <_sercom_get_default_pad+0xfa>
     682:	2902      	cmp	r1, #2
     684:	d005      	beq.n	692 <_sercom_get_default_pad+0xc2>
     686:	2903      	cmp	r1, #3
     688:	d005      	beq.n	696 <_sercom_get_default_pad+0xc6>
	return 0;
     68a:	2000      	movs	r0, #0
     68c:	e7ae      	b.n	5ec <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     68e:	4823      	ldr	r0, [pc, #140]	; (71c <_sercom_get_default_pad+0x14c>)
     690:	e7ac      	b.n	5ec <_sercom_get_default_pad+0x1c>
     692:	4823      	ldr	r0, [pc, #140]	; (720 <_sercom_get_default_pad+0x150>)
     694:	e7aa      	b.n	5ec <_sercom_get_default_pad+0x1c>
     696:	4823      	ldr	r0, [pc, #140]	; (724 <_sercom_get_default_pad+0x154>)
     698:	e7a8      	b.n	5ec <_sercom_get_default_pad+0x1c>
     69a:	2901      	cmp	r1, #1
     69c:	d007      	beq.n	6ae <_sercom_get_default_pad+0xde>
     69e:	2900      	cmp	r1, #0
     6a0:	d015      	beq.n	6ce <_sercom_get_default_pad+0xfe>
     6a2:	2902      	cmp	r1, #2
     6a4:	d005      	beq.n	6b2 <_sercom_get_default_pad+0xe2>
     6a6:	2903      	cmp	r1, #3
     6a8:	d005      	beq.n	6b6 <_sercom_get_default_pad+0xe6>
	return 0;
     6aa:	2000      	movs	r0, #0
     6ac:	e79e      	b.n	5ec <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     6ae:	481e      	ldr	r0, [pc, #120]	; (728 <_sercom_get_default_pad+0x158>)
     6b0:	e79c      	b.n	5ec <_sercom_get_default_pad+0x1c>
     6b2:	481e      	ldr	r0, [pc, #120]	; (72c <_sercom_get_default_pad+0x15c>)
     6b4:	e79a      	b.n	5ec <_sercom_get_default_pad+0x1c>
     6b6:	481e      	ldr	r0, [pc, #120]	; (730 <_sercom_get_default_pad+0x160>)
     6b8:	e798      	b.n	5ec <_sercom_get_default_pad+0x1c>
     6ba:	481e      	ldr	r0, [pc, #120]	; (734 <_sercom_get_default_pad+0x164>)
     6bc:	e796      	b.n	5ec <_sercom_get_default_pad+0x1c>
     6be:	2003      	movs	r0, #3
     6c0:	e794      	b.n	5ec <_sercom_get_default_pad+0x1c>
     6c2:	481d      	ldr	r0, [pc, #116]	; (738 <_sercom_get_default_pad+0x168>)
     6c4:	e792      	b.n	5ec <_sercom_get_default_pad+0x1c>
     6c6:	481d      	ldr	r0, [pc, #116]	; (73c <_sercom_get_default_pad+0x16c>)
     6c8:	e790      	b.n	5ec <_sercom_get_default_pad+0x1c>
     6ca:	481d      	ldr	r0, [pc, #116]	; (740 <_sercom_get_default_pad+0x170>)
     6cc:	e78e      	b.n	5ec <_sercom_get_default_pad+0x1c>
     6ce:	481d      	ldr	r0, [pc, #116]	; (744 <_sercom_get_default_pad+0x174>)
     6d0:	e78c      	b.n	5ec <_sercom_get_default_pad+0x1c>
     6d2:	46c0      	nop			; (mov r8, r8)
     6d4:	42001000 	.word	0x42001000
     6d8:	42001800 	.word	0x42001800
     6dc:	42001c00 	.word	0x42001c00
     6e0:	42001400 	.word	0x42001400
     6e4:	42000800 	.word	0x42000800
     6e8:	42000c00 	.word	0x42000c00
     6ec:	00050003 	.word	0x00050003
     6f0:	00060003 	.word	0x00060003
     6f4:	00070003 	.word	0x00070003
     6f8:	00010003 	.word	0x00010003
     6fc:	001e0003 	.word	0x001e0003
     700:	001f0003 	.word	0x001f0003
     704:	00090003 	.word	0x00090003
     708:	000a0003 	.word	0x000a0003
     70c:	000b0003 	.word	0x000b0003
     710:	00110003 	.word	0x00110003
     714:	00120003 	.word	0x00120003
     718:	00130003 	.word	0x00130003
     71c:	000d0003 	.word	0x000d0003
     720:	000e0003 	.word	0x000e0003
     724:	000f0003 	.word	0x000f0003
     728:	00170003 	.word	0x00170003
     72c:	00180003 	.word	0x00180003
     730:	00190003 	.word	0x00190003
     734:	00040003 	.word	0x00040003
     738:	00080003 	.word	0x00080003
     73c:	00100003 	.word	0x00100003
     740:	000c0003 	.word	0x000c0003
     744:	00160003 	.word	0x00160003

00000748 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     748:	b530      	push	{r4, r5, lr}
     74a:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     74c:	4b0b      	ldr	r3, [pc, #44]	; (77c <_sercom_get_sercom_inst_index+0x34>)
     74e:	466a      	mov	r2, sp
     750:	cb32      	ldmia	r3!, {r1, r4, r5}
     752:	c232      	stmia	r2!, {r1, r4, r5}
     754:	cb32      	ldmia	r3!, {r1, r4, r5}
     756:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     758:	9b00      	ldr	r3, [sp, #0]
     75a:	4283      	cmp	r3, r0
     75c:	d00b      	beq.n	776 <_sercom_get_sercom_inst_index+0x2e>
     75e:	2301      	movs	r3, #1
     760:	009a      	lsls	r2, r3, #2
     762:	4669      	mov	r1, sp
     764:	5852      	ldr	r2, [r2, r1]
     766:	4282      	cmp	r2, r0
     768:	d006      	beq.n	778 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     76a:	3301      	adds	r3, #1
     76c:	2b06      	cmp	r3, #6
     76e:	d1f7      	bne.n	760 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     770:	2000      	movs	r0, #0
}
     772:	b007      	add	sp, #28
     774:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     776:	2300      	movs	r3, #0
			return i;
     778:	b2d8      	uxtb	r0, r3
     77a:	e7fa      	b.n	772 <_sercom_get_sercom_inst_index+0x2a>
     77c:	0000190c 	.word	0x0000190c

00000780 <usart_write_callback>:
 *
 * @note				- 
 ******************************************************************************************************/
void usart_write_callback(const struct usart_module *const usart_module)
{
	__ASM volatile ("nop");
     780:	46c0      	nop			; (mov r8, r8)
}
     782:	4770      	bx	lr

00000784 <config_UART>:
{
     784:	b530      	push	{r4, r5, lr}
     786:	b08d      	sub	sp, #52	; 0x34
{
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
     788:	2380      	movs	r3, #128	; 0x80
     78a:	05db      	lsls	r3, r3, #23
     78c:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
     78e:	2300      	movs	r3, #0
     790:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
     792:	22ff      	movs	r2, #255	; 0xff
     794:	4669      	mov	r1, sp
     796:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
     798:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
     79a:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
	config->receiver_enable  = true;
     79c:	2201      	movs	r2, #1
     79e:	750a      	strb	r2, [r1, #20]
	config->transmitter_enable = true;
     7a0:	754a      	strb	r2, [r1, #21]
	config->clock_polarity_inverted = false;
     7a2:	758b      	strb	r3, [r1, #22]
	config->use_external_clock = false;
     7a4:	75cb      	strb	r3, [r1, #23]
	config->ext_clock_freq   = 0;
     7a6:	9306      	str	r3, [sp, #24]
	config->mux_setting      = USART_RX_1_TX_2_XCK_3;
	config->run_in_standby   = false;
     7a8:	770b      	strb	r3, [r1, #28]
	config->generator_source = GCLK_GENERATOR_0;
     7aa:	774b      	strb	r3, [r1, #29]
	config_usart.baudrate    = 115200;						// boosted this above 115200 to overcome a ~10% latency issue
     7ac:	23e1      	movs	r3, #225	; 0xe1
     7ae:	025b      	lsls	r3, r3, #9
     7b0:	9304      	str	r3, [sp, #16]
	config_usart.mux_setting = USART_RX_3_TX_2_XCK_3;
     7b2:	23c4      	movs	r3, #196	; 0xc4
     7b4:	039b      	lsls	r3, r3, #14
     7b6:	9303      	str	r3, [sp, #12]
	config_usart.pinmux_pad0 = PINMUX_UNUSED;
     7b8:	2301      	movs	r3, #1
     7ba:	425b      	negs	r3, r3
     7bc:	9308      	str	r3, [sp, #32]
	config_usart.pinmux_pad1 = PINMUX_UNUSED;
     7be:	9309      	str	r3, [sp, #36]	; 0x24
	config_usart.pinmux_pad2 = PINMUX_PA24C_SERCOM3_PAD2;	// PA24 = TX
     7c0:	4b11      	ldr	r3, [pc, #68]	; (808 <config_UART+0x84>)
     7c2:	930a      	str	r3, [sp, #40]	; 0x28
	config_usart.pinmux_pad3 = PINMUX_PA25C_SERCOM3_PAD3;	// PA25 = RX
     7c4:	4b11      	ldr	r3, [pc, #68]	; (80c <config_UART+0x88>)
     7c6:	930b      	str	r3, [sp, #44]	; 0x2c
	while (usart_init(&usart_instance, SERCOM3, &config_usart) != STATUS_OK)
     7c8:	4d11      	ldr	r5, [pc, #68]	; (810 <config_UART+0x8c>)
     7ca:	4c12      	ldr	r4, [pc, #72]	; (814 <config_UART+0x90>)
     7cc:	e000      	b.n	7d0 <config_UART+0x4c>
		__ASM volatile ("nop");
     7ce:	46c0      	nop			; (mov r8, r8)
	while (usart_init(&usart_instance, SERCOM3, &config_usart) != STATUS_OK)
     7d0:	466a      	mov	r2, sp
     7d2:	4911      	ldr	r1, [pc, #68]	; (818 <config_UART+0x94>)
     7d4:	0028      	movs	r0, r5
     7d6:	47a0      	blx	r4
     7d8:	2800      	cmp	r0, #0
     7da:	d1f8      	bne.n	7ce <config_UART+0x4a>
	/* Sanity check arguments */
	Assert(module);
	Assert(module->hw);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     7dc:	4d0c      	ldr	r5, [pc, #48]	; (810 <config_UART+0x8c>)
     7de:	682c      	ldr	r4, [r5, #0]

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     7e0:	0020      	movs	r0, r4
     7e2:	4b0e      	ldr	r3, [pc, #56]	; (81c <config_UART+0x98>)
     7e4:	4798      	blx	r3
     7e6:	231f      	movs	r3, #31
     7e8:	4018      	ands	r0, r3
     7ea:	3b1e      	subs	r3, #30
     7ec:	4083      	lsls	r3, r0
     7ee:	4a0c      	ldr	r2, [pc, #48]	; (820 <config_UART+0x9c>)
     7f0:	6013      	str	r3, [r2, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
     7f2:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
     7f4:	8a13      	ldrh	r3, [r2, #16]
	while (usart_is_syncing(module)) {
     7f6:	b21b      	sxth	r3, r3
     7f8:	2b00      	cmp	r3, #0
     7fa:	dbfb      	blt.n	7f4 <config_UART+0x70>

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
     7fc:	6823      	ldr	r3, [r4, #0]
     7fe:	2202      	movs	r2, #2
     800:	4313      	orrs	r3, r2
     802:	6023      	str	r3, [r4, #0]
}
     804:	b00d      	add	sp, #52	; 0x34
     806:	bd30      	pop	{r4, r5, pc}
     808:	00180002 	.word	0x00180002
     80c:	00190002 	.word	0x00190002
     810:	2000009c 	.word	0x2000009c
     814:	000008b5 	.word	0x000008b5
     818:	42001400 	.word	0x42001400
     81c:	00000dd5 	.word	0x00000dd5
     820:	e000e100 	.word	0xe000e100

00000824 <config_UART_Callback>:
{
     824:	b570      	push	{r4, r5, r6, lr}
	usart_register_callback(&usart_instance, (usart_callback_t) usart_write_callback, USART_CALLBACK_BUFFER_TRANSMITTED);
     826:	4c08      	ldr	r4, [pc, #32]	; (848 <config_UART_Callback+0x24>)
     828:	2200      	movs	r2, #0
     82a:	4908      	ldr	r1, [pc, #32]	; (84c <config_UART_Callback+0x28>)
     82c:	0020      	movs	r0, r4
     82e:	4d08      	ldr	r5, [pc, #32]	; (850 <config_UART_Callback+0x2c>)
     830:	47a8      	blx	r5
	usart_register_callback(&usart_instance, (usart_callback_t) usart_read_callback, USART_CALLBACK_BUFFER_RECEIVED);
     832:	2201      	movs	r2, #1
     834:	4907      	ldr	r1, [pc, #28]	; (854 <config_UART_Callback+0x30>)
     836:	0020      	movs	r0, r4
     838:	47a8      	blx	r5
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
     83a:	2221      	movs	r2, #33	; 0x21
     83c:	5ca3      	ldrb	r3, [r4, r2]
     83e:	2103      	movs	r1, #3
     840:	430b      	orrs	r3, r1
     842:	54a3      	strb	r3, [r4, r2]
}
     844:	bd70      	pop	{r4, r5, r6, pc}
     846:	46c0      	nop			; (mov r8, r8)
     848:	2000009c 	.word	0x2000009c
     84c:	00000781 	.word	0x00000781
     850:	00000c39 	.word	0x00000c39
     854:	00000875 	.word	0x00000875

00000858 <UART_Continuous>:
 * @return				- void
 *
 * @note				- called from usart_read_callback
 ******************************************************************************************************/
void UART_Continuous(void)
{
     858:	b510      	push	{r4, lr}
	usart_read_buffer_job(&usart_instance, &ch_buffer, 1);
     85a:	2201      	movs	r2, #1
     85c:	4902      	ldr	r1, [pc, #8]	; (868 <UART_Continuous+0x10>)
     85e:	4803      	ldr	r0, [pc, #12]	; (86c <UART_Continuous+0x14>)
     860:	4b03      	ldr	r3, [pc, #12]	; (870 <UART_Continuous+0x18>)
     862:	4798      	blx	r3
}
     864:	bd10      	pop	{r4, pc}
     866:	46c0      	nop			; (mov r8, r8)
     868:	20000098 	.word	0x20000098
     86c:	2000009c 	.word	0x2000009c
     870:	00000c51 	.word	0x00000c51

00000874 <usart_read_callback>:
{
     874:	b510      	push	{r4, lr}
	tx_rx_buffer[rx_index] = ch_buffer;
     876:	480a      	ldr	r0, [pc, #40]	; (8a0 <usart_read_callback+0x2c>)
     878:	8803      	ldrh	r3, [r0, #0]
     87a:	4a0a      	ldr	r2, [pc, #40]	; (8a4 <usart_read_callback+0x30>)
     87c:	7811      	ldrb	r1, [r2, #0]
     87e:	4a0a      	ldr	r2, [pc, #40]	; (8a8 <usart_read_callback+0x34>)
     880:	54d1      	strb	r1, [r2, r3]
	tx_rx_buffer[rx_index+1] = 0;		// clear future buffer
     882:	18d2      	adds	r2, r2, r3
     884:	2400      	movs	r4, #0
     886:	7054      	strb	r4, [r2, #1]
	tx_rx_buffer[rx_index+2] = 0;		// clear future buffer
     888:	7094      	strb	r4, [r2, #2]
	rx_index++;
     88a:	3301      	adds	r3, #1
     88c:	8003      	strh	r3, [r0, #0]
	if (ch_buffer == 0x0A)	// this is four because there are four chars plus a fifth "0x0A" at the end of every response from the encoder
     88e:	290a      	cmp	r1, #10
     890:	d002      	beq.n	898 <usart_read_callback+0x24>
	UART_Continuous();		// listen for next UART msg
     892:	4b06      	ldr	r3, [pc, #24]	; (8ac <usart_read_callback+0x38>)
     894:	4798      	blx	r3
}
     896:	bd10      	pop	{r4, pc}
		USART_data_available = TRUE;
     898:	2201      	movs	r2, #1
     89a:	4b05      	ldr	r3, [pc, #20]	; (8b0 <usart_read_callback+0x3c>)
     89c:	701a      	strb	r2, [r3, #0]
     89e:	e7f8      	b.n	892 <usart_read_callback+0x1e>
     8a0:	2000031a 	.word	0x2000031a
     8a4:	20000098 	.word	0x20000098
     8a8:	200000c0 	.word	0x200000c0
     8ac:	00000859 	.word	0x00000859
     8b0:	20000318 	.word	0x20000318

000008b4 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
     8b4:	b5f0      	push	{r4, r5, r6, r7, lr}
     8b6:	46de      	mov	lr, fp
     8b8:	4657      	mov	r7, sl
     8ba:	464e      	mov	r6, r9
     8bc:	4645      	mov	r5, r8
     8be:	b5e0      	push	{r5, r6, r7, lr}
     8c0:	b08d      	sub	sp, #52	; 0x34
     8c2:	0005      	movs	r5, r0
     8c4:	000c      	movs	r4, r1
     8c6:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
     8c8:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     8ca:	0008      	movs	r0, r1
     8cc:	4b80      	ldr	r3, [pc, #512]	; (ad0 <usart_init+0x21c>)
     8ce:	4798      	blx	r3
     8d0:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     8d2:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
     8d4:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     8d6:	07db      	lsls	r3, r3, #31
     8d8:	d506      	bpl.n	8e8 <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
     8da:	b00d      	add	sp, #52	; 0x34
     8dc:	bc3c      	pop	{r2, r3, r4, r5}
     8de:	4690      	mov	r8, r2
     8e0:	4699      	mov	r9, r3
     8e2:	46a2      	mov	sl, r4
     8e4:	46ab      	mov	fp, r5
     8e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     8e8:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
     8ea:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     8ec:	079b      	lsls	r3, r3, #30
     8ee:	d4f4      	bmi.n	8da <usart_init+0x26>
     8f0:	4978      	ldr	r1, [pc, #480]	; (ad4 <usart_init+0x220>)
     8f2:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     8f4:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     8f6:	2301      	movs	r3, #1
     8f8:	40bb      	lsls	r3, r7
     8fa:	4303      	orrs	r3, r0
     8fc:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
     8fe:	a90b      	add	r1, sp, #44	; 0x2c
     900:	7f73      	ldrb	r3, [r6, #29]
     902:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     904:	320d      	adds	r2, #13
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     906:	b2d7      	uxtb	r7, r2
     908:	0038      	movs	r0, r7
     90a:	4b73      	ldr	r3, [pc, #460]	; (ad8 <usart_init+0x224>)
     90c:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     90e:	0038      	movs	r0, r7
     910:	4b72      	ldr	r3, [pc, #456]	; (adc <usart_init+0x228>)
     912:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     914:	7f70      	ldrb	r0, [r6, #29]
     916:	2100      	movs	r1, #0
     918:	4b71      	ldr	r3, [pc, #452]	; (ae0 <usart_init+0x22c>)
     91a:	4798      	blx	r3
	module->character_size = config->character_size;
     91c:	7af3      	ldrb	r3, [r6, #11]
     91e:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
     920:	7d33      	ldrb	r3, [r6, #20]
     922:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
     924:	7d73      	ldrb	r3, [r6, #21]
     926:	71eb      	strb	r3, [r5, #7]
	SercomUsart *const usart_hw = &(module->hw->USART);
     928:	682b      	ldr	r3, [r5, #0]
     92a:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     92c:	0018      	movs	r0, r3
     92e:	4b68      	ldr	r3, [pc, #416]	; (ad0 <usart_init+0x21c>)
     930:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     932:	300d      	adds	r0, #13
	uint16_t baud  = 0;
     934:	2200      	movs	r2, #0
     936:	230e      	movs	r3, #14
     938:	a902      	add	r1, sp, #8
     93a:	468c      	mov	ip, r1
     93c:	4463      	add	r3, ip
     93e:	801a      	strh	r2, [r3, #0]
	ctrla = (uint32_t)config->data_order |
     940:	6833      	ldr	r3, [r6, #0]
     942:	9303      	str	r3, [sp, #12]
		(uint32_t)config->mux_setting |
     944:	68f3      	ldr	r3, [r6, #12]
     946:	469a      	mov	sl, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     948:	7db3      	ldrb	r3, [r6, #22]
     94a:	469b      	mov	fp, r3
	transfer_mode = (uint32_t)config->transfer_mode;
     94c:	6873      	ldr	r3, [r6, #4]
     94e:	4699      	mov	r9, r3
	switch (transfer_mode)
     950:	2b00      	cmp	r3, #0
     952:	d014      	beq.n	97e <usart_init+0xca>
     954:	2380      	movs	r3, #128	; 0x80
     956:	055b      	lsls	r3, r3, #21
     958:	4599      	cmp	r9, r3
     95a:	d130      	bne.n	9be <usart_init+0x10a>
			if (!config->use_external_clock) {
     95c:	7df3      	ldrb	r3, [r6, #23]
     95e:	2b00      	cmp	r3, #0
     960:	d131      	bne.n	9c6 <usart_init+0x112>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
     962:	6933      	ldr	r3, [r6, #16]
     964:	001f      	movs	r7, r3
     966:	b2c0      	uxtb	r0, r0
     968:	4b5e      	ldr	r3, [pc, #376]	; (ae4 <usart_init+0x230>)
     96a:	4798      	blx	r3
     96c:	0001      	movs	r1, r0
     96e:	220e      	movs	r2, #14
     970:	ab02      	add	r3, sp, #8
     972:	469c      	mov	ip, r3
     974:	4462      	add	r2, ip
     976:	0038      	movs	r0, r7
     978:	4b5b      	ldr	r3, [pc, #364]	; (ae8 <usart_init+0x234>)
     97a:	4798      	blx	r3
     97c:	e020      	b.n	9c0 <usart_init+0x10c>
			if (config->use_external_clock) {
     97e:	7df3      	ldrb	r3, [r6, #23]
     980:	2b00      	cmp	r3, #0
     982:	d00b      	beq.n	99c <usart_init+0xe8>
				status_code =
     984:	2310      	movs	r3, #16
     986:	9300      	str	r3, [sp, #0]
     988:	2300      	movs	r3, #0
     98a:	220e      	movs	r2, #14
     98c:	a902      	add	r1, sp, #8
     98e:	468c      	mov	ip, r1
     990:	4462      	add	r2, ip
     992:	69b1      	ldr	r1, [r6, #24]
     994:	6930      	ldr	r0, [r6, #16]
     996:	4f55      	ldr	r7, [pc, #340]	; (aec <usart_init+0x238>)
     998:	47b8      	blx	r7
     99a:	e011      	b.n	9c0 <usart_init+0x10c>
						_sercom_get_async_baud_val(config->baudrate,
     99c:	6933      	ldr	r3, [r6, #16]
     99e:	001f      	movs	r7, r3
     9a0:	b2c0      	uxtb	r0, r0
     9a2:	4b50      	ldr	r3, [pc, #320]	; (ae4 <usart_init+0x230>)
     9a4:	4798      	blx	r3
     9a6:	0001      	movs	r1, r0
				status_code =
     9a8:	2310      	movs	r3, #16
     9aa:	9300      	str	r3, [sp, #0]
     9ac:	2300      	movs	r3, #0
     9ae:	220e      	movs	r2, #14
     9b0:	a802      	add	r0, sp, #8
     9b2:	4684      	mov	ip, r0
     9b4:	4462      	add	r2, ip
     9b6:	0038      	movs	r0, r7
     9b8:	4f4c      	ldr	r7, [pc, #304]	; (aec <usart_init+0x238>)
     9ba:	47b8      	blx	r7
     9bc:	e000      	b.n	9c0 <usart_init+0x10c>
	enum status_code status_code = STATUS_OK;
     9be:	2000      	movs	r0, #0
	if (status_code != STATUS_OK) {
     9c0:	2800      	cmp	r0, #0
     9c2:	d000      	beq.n	9c6 <usart_init+0x112>
     9c4:	e789      	b.n	8da <usart_init+0x26>
	SercomUsart *const usart_hw = &(module->hw->USART);
     9c6:	682a      	ldr	r2, [r5, #0]
     9c8:	9f03      	ldr	r7, [sp, #12]
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
     9ca:	8a13      	ldrh	r3, [r2, #16]
	while (usart_is_syncing(module)) {
     9cc:	b21b      	sxth	r3, r3
     9ce:	2b00      	cmp	r3, #0
     9d0:	dbfb      	blt.n	9ca <usart_init+0x116>
	usart_hw->BAUD.reg = baud;
     9d2:	230e      	movs	r3, #14
     9d4:	aa02      	add	r2, sp, #8
     9d6:	4694      	mov	ip, r2
     9d8:	4463      	add	r3, ip
     9da:	881b      	ldrh	r3, [r3, #0]
     9dc:	4642      	mov	r2, r8
     9de:	8153      	strh	r3, [r2, #10]
	ctrla |= transfer_mode;
     9e0:	4653      	mov	r3, sl
     9e2:	431f      	orrs	r7, r3
     9e4:	464b      	mov	r3, r9
     9e6:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     9e8:	465b      	mov	r3, fp
     9ea:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
     9ec:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
     9ee:	7df3      	ldrb	r3, [r6, #23]
     9f0:	2b00      	cmp	r3, #0
     9f2:	d101      	bne.n	9f8 <usart_init+0x144>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
     9f4:	3304      	adds	r3, #4
     9f6:	431f      	orrs	r7, r3
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     9f8:	7d31      	ldrb	r1, [r6, #20]
     9fa:	0449      	lsls	r1, r1, #17
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
     9fc:	7d73      	ldrb	r3, [r6, #21]
     9fe:	041b      	lsls	r3, r3, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     a00:	430b      	orrs	r3, r1
	ctrlb |= (uint32_t)config->character_size;
     a02:	7ab1      	ldrb	r1, [r6, #10]
     a04:	7af2      	ldrb	r2, [r6, #11]
     a06:	4311      	orrs	r1, r2
     a08:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
     a0a:	8933      	ldrh	r3, [r6, #8]
     a0c:	2bff      	cmp	r3, #255	; 0xff
     a0e:	d003      	beq.n	a18 <usart_init+0x164>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
     a10:	2280      	movs	r2, #128	; 0x80
     a12:	0452      	lsls	r2, r2, #17
     a14:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
     a16:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
     a18:	7f33      	ldrb	r3, [r6, #28]
     a1a:	2b00      	cmp	r3, #0
     a1c:	d103      	bne.n	a26 <usart_init+0x172>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     a1e:	4b34      	ldr	r3, [pc, #208]	; (af0 <usart_init+0x23c>)
     a20:	789b      	ldrb	r3, [r3, #2]
     a22:	079b      	lsls	r3, r3, #30
     a24:	d501      	bpl.n	a2a <usart_init+0x176>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
     a26:	2380      	movs	r3, #128	; 0x80
     a28:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
     a2a:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
     a2c:	8a13      	ldrh	r3, [r2, #16]
	while (usart_is_syncing(module)) {
     a2e:	b21b      	sxth	r3, r3
     a30:	2b00      	cmp	r3, #0
     a32:	dbfb      	blt.n	a2c <usart_init+0x178>
	usart_hw->CTRLB.reg = ctrlb;
     a34:	4643      	mov	r3, r8
     a36:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
     a38:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
     a3a:	8a13      	ldrh	r3, [r2, #16]
	while (usart_is_syncing(module)) {
     a3c:	b21b      	sxth	r3, r3
     a3e:	2b00      	cmp	r3, #0
     a40:	dbfb      	blt.n	a3a <usart_init+0x186>
	usart_hw->CTRLA.reg = ctrla;
     a42:	4643      	mov	r3, r8
     a44:	601f      	str	r7, [r3, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     a46:	ab0a      	add	r3, sp, #40	; 0x28
     a48:	2280      	movs	r2, #128	; 0x80
     a4a:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     a4c:	2200      	movs	r2, #0
     a4e:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     a50:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     a52:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
     a54:	6a33      	ldr	r3, [r6, #32]
     a56:	9306      	str	r3, [sp, #24]
     a58:	6a73      	ldr	r3, [r6, #36]	; 0x24
     a5a:	9307      	str	r3, [sp, #28]
     a5c:	6ab3      	ldr	r3, [r6, #40]	; 0x28
     a5e:	9308      	str	r3, [sp, #32]
     a60:	6af3      	ldr	r3, [r6, #44]	; 0x2c
     a62:	9303      	str	r3, [sp, #12]
     a64:	9309      	str	r3, [sp, #36]	; 0x24
     a66:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
     a68:	ae06      	add	r6, sp, #24
     a6a:	e006      	b.n	a7a <usart_init+0x1c6>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     a6c:	0020      	movs	r0, r4
     a6e:	4b21      	ldr	r3, [pc, #132]	; (af4 <usart_init+0x240>)
     a70:	4798      	blx	r3
     a72:	e007      	b.n	a84 <usart_init+0x1d0>
     a74:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
     a76:	2f04      	cmp	r7, #4
     a78:	d00d      	beq.n	a96 <usart_init+0x1e2>
     a7a:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
     a7c:	00bb      	lsls	r3, r7, #2
     a7e:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
     a80:	2800      	cmp	r0, #0
     a82:	d0f3      	beq.n	a6c <usart_init+0x1b8>
		if (current_pinmux != PINMUX_UNUSED) {
     a84:	1c43      	adds	r3, r0, #1
     a86:	d0f5      	beq.n	a74 <usart_init+0x1c0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     a88:	a90a      	add	r1, sp, #40	; 0x28
     a8a:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     a8c:	0c00      	lsrs	r0, r0, #16
     a8e:	b2c0      	uxtb	r0, r0
     a90:	4b19      	ldr	r3, [pc, #100]	; (af8 <usart_init+0x244>)
     a92:	4798      	blx	r3
     a94:	e7ee      	b.n	a74 <usart_init+0x1c0>
		module->callback[i]            = NULL;
     a96:	2300      	movs	r3, #0
     a98:	60ab      	str	r3, [r5, #8]
     a9a:	60eb      	str	r3, [r5, #12]
     a9c:	612b      	str	r3, [r5, #16]
	module->tx_buffer_ptr              = NULL;
     a9e:	61ab      	str	r3, [r5, #24]
	module->rx_buffer_ptr              = NULL;
     aa0:	616b      	str	r3, [r5, #20]
	module->remaining_tx_buffer_length = 0x0000;
     aa2:	2200      	movs	r2, #0
     aa4:	83eb      	strh	r3, [r5, #30]
	module->remaining_rx_buffer_length = 0x0000;
     aa6:	83ab      	strh	r3, [r5, #28]
	module->callback_reg_mask          = 0x00;
     aa8:	3320      	adds	r3, #32
     aaa:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
     aac:	3301      	adds	r3, #1
     aae:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
     ab0:	3301      	adds	r3, #1
     ab2:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
     ab4:	3301      	adds	r3, #1
     ab6:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
     ab8:	6828      	ldr	r0, [r5, #0]
     aba:	4b05      	ldr	r3, [pc, #20]	; (ad0 <usart_init+0x21c>)
     abc:	4798      	blx	r3
     abe:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
     ac0:	490e      	ldr	r1, [pc, #56]	; (afc <usart_init+0x248>)
     ac2:	4b0f      	ldr	r3, [pc, #60]	; (b00 <usart_init+0x24c>)
     ac4:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     ac6:	00a4      	lsls	r4, r4, #2
     ac8:	4b0e      	ldr	r3, [pc, #56]	; (b04 <usart_init+0x250>)
     aca:	50e5      	str	r5, [r4, r3]
	return status_code;
     acc:	2000      	movs	r0, #0
     ace:	e704      	b.n	8da <usart_init+0x26>
     ad0:	00000749 	.word	0x00000749
     ad4:	40000400 	.word	0x40000400
     ad8:	000014c1 	.word	0x000014c1
     adc:	00001435 	.word	0x00001435
     ae0:	00000585 	.word	0x00000585
     ae4:	0000150d 	.word	0x0000150d
     ae8:	000004c7 	.word	0x000004c7
     aec:	000004f1 	.word	0x000004f1
     af0:	41002000 	.word	0x41002000
     af4:	000005d1 	.word	0x000005d1
     af8:	000015e9 	.word	0x000015e9
     afc:	00000c71 	.word	0x00000c71
     b00:	00000d99 	.word	0x00000d99
     b04:	2000031c 	.word	0x2000031c

00000b08 <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
     b08:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
     b0a:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
     b0c:	2a00      	cmp	r2, #0
     b0e:	d101      	bne.n	b14 <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
     b10:	0018      	movs	r0, r3
     b12:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
     b14:	8bc2      	ldrh	r2, [r0, #30]
     b16:	b292      	uxth	r2, r2
		return STATUS_BUSY;
     b18:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
     b1a:	2a00      	cmp	r2, #0
     b1c:	d1f8      	bne.n	b10 <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
     b1e:	6802      	ldr	r2, [r0, #0]
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
     b20:	8a13      	ldrh	r3, [r2, #16]
	while (usart_is_syncing(module)) {
     b22:	b21b      	sxth	r3, r3
     b24:	2b00      	cmp	r3, #0
     b26:	dbfb      	blt.n	b20 <usart_write_wait+0x18>
	usart_hw->DATA.reg = tx_data;
     b28:	8311      	strh	r1, [r2, #24]
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
     b2a:	2102      	movs	r1, #2
     b2c:	7b93      	ldrb	r3, [r2, #14]
     b2e:	420b      	tst	r3, r1
     b30:	d0fc      	beq.n	b2c <usart_write_wait+0x24>
	return STATUS_OK;
     b32:	2300      	movs	r3, #0
     b34:	e7ec      	b.n	b10 <usart_write_wait+0x8>
	...

00000b38 <usart_write_buffer_wait>:
 */
enum status_code usart_write_buffer_wait(
		struct usart_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
     b38:	b5f0      	push	{r4, r5, r6, r7, lr}
     b3a:	46ce      	mov	lr, r9
     b3c:	4647      	mov	r7, r8
     b3e:	b580      	push	{r7, lr}
     b40:	b083      	sub	sp, #12
     b42:	0005      	movs	r5, r0
     b44:	9101      	str	r1, [sp, #4]
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
     b46:	2017      	movs	r0, #23
	if (length == 0) {
     b48:	2a00      	cmp	r2, #0
     b4a:	d104      	bne.n	b56 <usart_write_buffer_wait+0x1e>
			return STATUS_ERR_TIMEOUT;
		}
	}

	return STATUS_OK;
}
     b4c:	b003      	add	sp, #12
     b4e:	bc0c      	pop	{r2, r3}
     b50:	4690      	mov	r8, r2
     b52:	4699      	mov	r9, r3
     b54:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!(module->transmitter_enabled)) {
     b56:	79eb      	ldrb	r3, [r5, #7]
		return STATUS_ERR_DENIED;
     b58:	3005      	adds	r0, #5
	if (!(module->transmitter_enabled)) {
     b5a:	2b00      	cmp	r3, #0
     b5c:	d0f6      	beq.n	b4c <usart_write_buffer_wait+0x14>
	SercomUsart *const usart_hw = &(module->hw->USART);
     b5e:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
     b60:	8a23      	ldrh	r3, [r4, #16]
	while (usart_is_syncing(module)) {
     b62:	b21b      	sxth	r3, r3
     b64:	2b00      	cmp	r3, #0
     b66:	dbfb      	blt.n	b60 <usart_write_buffer_wait+0x28>
	while (length--) {
     b68:	3a01      	subs	r2, #1
     b6a:	b293      	uxth	r3, r2
     b6c:	4699      	mov	r9, r3
     b6e:	2600      	movs	r6, #0
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
     b70:	2701      	movs	r7, #1
	while (length--) {
     b72:	4b20      	ldr	r3, [pc, #128]	; (bf4 <usart_write_buffer_wait+0xbc>)
     b74:	4698      	mov	r8, r3
     b76:	e011      	b.n	b9c <usart_write_buffer_wait+0x64>
		uint16_t data_to_send = tx_data[tx_pos++];
     b78:	1c73      	adds	r3, r6, #1
     b7a:	b29b      	uxth	r3, r3
     b7c:	9a01      	ldr	r2, [sp, #4]
     b7e:	5d91      	ldrb	r1, [r2, r6]
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     b80:	796a      	ldrb	r2, [r5, #5]
     b82:	2a01      	cmp	r2, #1
     b84:	d017      	beq.n	bb6 <usart_write_buffer_wait+0x7e>
		uint16_t data_to_send = tx_data[tx_pos++];
     b86:	b289      	uxth	r1, r1
     b88:	001e      	movs	r6, r3
		usart_write_wait(module, data_to_send);
     b8a:	0028      	movs	r0, r5
     b8c:	4b1a      	ldr	r3, [pc, #104]	; (bf8 <usart_write_buffer_wait+0xc0>)
     b8e:	4798      	blx	r3
	while (length--) {
     b90:	464b      	mov	r3, r9
     b92:	3b01      	subs	r3, #1
     b94:	b29b      	uxth	r3, r3
     b96:	4699      	mov	r9, r3
     b98:	4543      	cmp	r3, r8
     b9a:	d013      	beq.n	bc4 <usart_write_buffer_wait+0x8c>
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
     b9c:	7ba3      	ldrb	r3, [r4, #14]
     b9e:	423b      	tst	r3, r7
     ba0:	d1ea      	bne.n	b78 <usart_write_buffer_wait+0x40>
     ba2:	4b14      	ldr	r3, [pc, #80]	; (bf4 <usart_write_buffer_wait+0xbc>)
     ba4:	7ba2      	ldrb	r2, [r4, #14]
     ba6:	423a      	tst	r2, r7
     ba8:	d1e6      	bne.n	b78 <usart_write_buffer_wait+0x40>
			} else if (i == USART_TIMEOUT) {
     baa:	2b01      	cmp	r3, #1
     bac:	d019      	beq.n	be2 <usart_write_buffer_wait+0xaa>
     bae:	3b01      	subs	r3, #1
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
     bb0:	2b00      	cmp	r3, #0
     bb2:	d1f7      	bne.n	ba4 <usart_write_buffer_wait+0x6c>
     bb4:	e7e0      	b.n	b78 <usart_write_buffer_wait+0x40>
			data_to_send |= (tx_data[tx_pos++] << 8);
     bb6:	3602      	adds	r6, #2
     bb8:	b2b6      	uxth	r6, r6
     bba:	9a01      	ldr	r2, [sp, #4]
     bbc:	5cd3      	ldrb	r3, [r2, r3]
     bbe:	021b      	lsls	r3, r3, #8
     bc0:	4319      	orrs	r1, r3
     bc2:	e7e2      	b.n	b8a <usart_write_buffer_wait+0x52>
		if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) {
     bc4:	7ba3      	ldrb	r3, [r4, #14]
     bc6:	079b      	lsls	r3, r3, #30
     bc8:	d40d      	bmi.n	be6 <usart_write_buffer_wait+0xae>
     bca:	4b0a      	ldr	r3, [pc, #40]	; (bf4 <usart_write_buffer_wait+0xbc>)
     bcc:	2102      	movs	r1, #2
     bce:	7ba2      	ldrb	r2, [r4, #14]
     bd0:	420a      	tst	r2, r1
     bd2:	d10a      	bne.n	bea <usart_write_buffer_wait+0xb2>
		} else if (i == USART_TIMEOUT) {
     bd4:	2b01      	cmp	r3, #1
     bd6:	d00a      	beq.n	bee <usart_write_buffer_wait+0xb6>
     bd8:	3b01      	subs	r3, #1
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
     bda:	2b00      	cmp	r3, #0
     bdc:	d1f7      	bne.n	bce <usart_write_buffer_wait+0x96>
	return STATUS_OK;
     bde:	2000      	movs	r0, #0
     be0:	e7b4      	b.n	b4c <usart_write_buffer_wait+0x14>
				return STATUS_ERR_TIMEOUT;
     be2:	2012      	movs	r0, #18
     be4:	e7b2      	b.n	b4c <usart_write_buffer_wait+0x14>
	return STATUS_OK;
     be6:	2000      	movs	r0, #0
     be8:	e7b0      	b.n	b4c <usart_write_buffer_wait+0x14>
     bea:	2000      	movs	r0, #0
     bec:	e7ae      	b.n	b4c <usart_write_buffer_wait+0x14>
			return STATUS_ERR_TIMEOUT;
     bee:	2012      	movs	r0, #18
     bf0:	e7ac      	b.n	b4c <usart_write_buffer_wait+0x14>
     bf2:	46c0      	nop			; (mov r8, r8)
     bf4:	0000ffff 	.word	0x0000ffff
     bf8:	00000b09 	.word	0x00000b09

00000bfc <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
     bfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     bfe:	0006      	movs	r6, r0
     c00:	000c      	movs	r4, r1
     c02:	0015      	movs	r5, r2
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     c04:	6807      	ldr	r7, [r0, #0]
	cpu_irq_enter_critical();
     c06:	4b0a      	ldr	r3, [pc, #40]	; (c30 <_usart_read_buffer+0x34>)
     c08:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
     c0a:	8bb3      	ldrh	r3, [r6, #28]
     c0c:	b29b      	uxth	r3, r3
     c0e:	2b00      	cmp	r3, #0
     c10:	d003      	beq.n	c1a <_usart_read_buffer+0x1e>
	cpu_irq_leave_critical();
     c12:	4b08      	ldr	r3, [pc, #32]	; (c34 <_usart_read_buffer+0x38>)
     c14:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
     c16:	2005      	movs	r0, #5
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
	}
#endif

	return STATUS_OK;
}
     c18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	module->remaining_rx_buffer_length = length;
     c1a:	83b5      	strh	r5, [r6, #28]
     c1c:	4b05      	ldr	r3, [pc, #20]	; (c34 <_usart_read_buffer+0x38>)
     c1e:	4798      	blx	r3
	module->rx_buffer_ptr              = rx_data;
     c20:	6174      	str	r4, [r6, #20]
	module->rx_status                  = STATUS_BUSY;
     c22:	2205      	movs	r2, #5
     c24:	2322      	movs	r3, #34	; 0x22
     c26:	54f2      	strb	r2, [r6, r3]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
     c28:	3b1e      	subs	r3, #30
     c2a:	737b      	strb	r3, [r7, #13]
	return STATUS_OK;
     c2c:	2000      	movs	r0, #0
     c2e:	e7f3      	b.n	c18 <_usart_read_buffer+0x1c>
     c30:	00001039 	.word	0x00001039
     c34:	00001079 	.word	0x00001079

00000c38 <usart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
     c38:	1c93      	adds	r3, r2, #2
     c3a:	009b      	lsls	r3, r3, #2
     c3c:	5019      	str	r1, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
     c3e:	2120      	movs	r1, #32
     c40:	2301      	movs	r3, #1
     c42:	4093      	lsls	r3, r2
     c44:	001a      	movs	r2, r3
     c46:	5c43      	ldrb	r3, [r0, r1]
     c48:	4313      	orrs	r3, r2
     c4a:	5443      	strb	r3, [r0, r1]
}
     c4c:	4770      	bx	lr
	...

00000c50 <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
     c50:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
     c52:	2317      	movs	r3, #23
	if (length == 0) {
     c54:	2a00      	cmp	r2, #0
     c56:	d101      	bne.n	c5c <usart_read_buffer_job+0xc>
		return STATUS_ERR_DENIED;
	}

	/* Issue internal asynchronous read */
	return _usart_read_buffer(module, rx_data, length);
}
     c58:	0018      	movs	r0, r3
     c5a:	bd10      	pop	{r4, pc}
	if (!(module->receiver_enabled)) {
     c5c:	7984      	ldrb	r4, [r0, #6]
		return STATUS_ERR_DENIED;
     c5e:	3305      	adds	r3, #5
	if (!(module->receiver_enabled)) {
     c60:	2c00      	cmp	r4, #0
     c62:	d0f9      	beq.n	c58 <usart_read_buffer_job+0x8>
	return _usart_read_buffer(module, rx_data, length);
     c64:	4b01      	ldr	r3, [pc, #4]	; (c6c <usart_read_buffer_job+0x1c>)
     c66:	4798      	blx	r3
     c68:	0003      	movs	r3, r0
     c6a:	e7f5      	b.n	c58 <usart_read_buffer_job+0x8>
     c6c:	00000bfd 	.word	0x00000bfd

00000c70 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
     c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
     c72:	0080      	lsls	r0, r0, #2
     c74:	4b46      	ldr	r3, [pc, #280]	; (d90 <_usart_interrupt_handler+0x120>)
     c76:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
     c78:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
     c7a:	8a23      	ldrh	r3, [r4, #16]
	while (usart_is_syncing(module)) {
     c7c:	b21b      	sxth	r3, r3
     c7e:	2b00      	cmp	r3, #0
     c80:	dbfb      	blt.n	c7a <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
     c82:	7ba3      	ldrb	r3, [r4, #14]
	interrupt_status &= usart_hw->INTENSET.reg;
     c84:	7b66      	ldrb	r6, [r4, #13]
     c86:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
     c88:	2320      	movs	r3, #32
     c8a:	5ceb      	ldrb	r3, [r5, r3]
     c8c:	2221      	movs	r2, #33	; 0x21
     c8e:	5caf      	ldrb	r7, [r5, r2]
     c90:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
     c92:	07f3      	lsls	r3, r6, #31
     c94:	d522      	bpl.n	cdc <_usart_interrupt_handler+0x6c>
		if (module->remaining_tx_buffer_length) {
     c96:	8beb      	ldrh	r3, [r5, #30]
     c98:	b29b      	uxth	r3, r3
     c9a:	2b00      	cmp	r3, #0
     c9c:	d01c      	beq.n	cd8 <_usart_interrupt_handler+0x68>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
     c9e:	69aa      	ldr	r2, [r5, #24]
     ca0:	7813      	ldrb	r3, [r2, #0]
     ca2:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
     ca4:	1c51      	adds	r1, r2, #1
     ca6:	61a9      	str	r1, [r5, #24]

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     ca8:	7969      	ldrb	r1, [r5, #5]
     caa:	2901      	cmp	r1, #1
     cac:	d00e      	beq.n	ccc <_usart_interrupt_handler+0x5c>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
     cae:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
     cb0:	05db      	lsls	r3, r3, #23
     cb2:	0ddb      	lsrs	r3, r3, #23
     cb4:	8323      	strh	r3, [r4, #24]

			if (--(module->remaining_tx_buffer_length) == 0) {
     cb6:	8beb      	ldrh	r3, [r5, #30]
     cb8:	3b01      	subs	r3, #1
     cba:	b29b      	uxth	r3, r3
     cbc:	83eb      	strh	r3, [r5, #30]
     cbe:	2b00      	cmp	r3, #0
     cc0:	d10c      	bne.n	cdc <_usart_interrupt_handler+0x6c>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
     cc2:	3301      	adds	r3, #1
     cc4:	7323      	strb	r3, [r4, #12]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
     cc6:	3301      	adds	r3, #1
     cc8:	7363      	strb	r3, [r4, #13]
     cca:	e007      	b.n	cdc <_usart_interrupt_handler+0x6c>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
     ccc:	7851      	ldrb	r1, [r2, #1]
     cce:	0209      	lsls	r1, r1, #8
     cd0:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
     cd2:	3202      	adds	r2, #2
     cd4:	61aa      	str	r2, [r5, #24]
     cd6:	e7eb      	b.n	cb0 <_usart_interrupt_handler+0x40>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
     cd8:	2301      	movs	r3, #1
     cda:	7323      	strb	r3, [r4, #12]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
     cdc:	07b3      	lsls	r3, r6, #30
     cde:	d506      	bpl.n	cee <_usart_interrupt_handler+0x7e>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
     ce0:	2302      	movs	r3, #2
     ce2:	7323      	strb	r3, [r4, #12]
		module->tx_status = STATUS_OK;
     ce4:	2200      	movs	r2, #0
     ce6:	3321      	adds	r3, #33	; 0x21
     ce8:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
     cea:	07fb      	lsls	r3, r7, #31
     cec:	d416      	bmi.n	d1c <_usart_interrupt_handler+0xac>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
     cee:	0773      	lsls	r3, r6, #29
     cf0:	d54d      	bpl.n	d8e <_usart_interrupt_handler+0x11e>

		if (module->remaining_rx_buffer_length) {
     cf2:	8bab      	ldrh	r3, [r5, #28]
     cf4:	b29b      	uxth	r3, r3
     cf6:	2b00      	cmp	r3, #0
     cf8:	d047      	beq.n	d8a <_usart_interrupt_handler+0x11a>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     cfa:	8a23      	ldrh	r3, [r4, #16]
     cfc:	b2db      	uxtb	r3, r3
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
     cfe:	075a      	lsls	r2, r3, #29
     d00:	d020      	beq.n	d44 <_usart_interrupt_handler+0xd4>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
     d02:	079a      	lsls	r2, r3, #30
     d04:	d50e      	bpl.n	d24 <_usart_interrupt_handler+0xb4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
     d06:	221a      	movs	r2, #26
     d08:	2322      	movs	r3, #34	; 0x22
     d0a:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
     d0c:	3b20      	subs	r3, #32
     d0e:	8223      	strh	r3, [r4, #16]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
     d10:	077b      	lsls	r3, r7, #29
     d12:	d53c      	bpl.n	d8e <_usart_interrupt_handler+0x11e>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
     d14:	692b      	ldr	r3, [r5, #16]
     d16:	0028      	movs	r0, r5
     d18:	4798      	blx	r3
     d1a:	e038      	b.n	d8e <_usart_interrupt_handler+0x11e>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
     d1c:	0028      	movs	r0, r5
     d1e:	68ab      	ldr	r3, [r5, #8]
     d20:	4798      	blx	r3
     d22:	e7e4      	b.n	cee <_usart_interrupt_handler+0x7e>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
     d24:	075a      	lsls	r2, r3, #29
     d26:	d505      	bpl.n	d34 <_usart_interrupt_handler+0xc4>
					module->rx_status = STATUS_ERR_OVERFLOW;
     d28:	221e      	movs	r2, #30
     d2a:	2322      	movs	r3, #34	; 0x22
     d2c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
     d2e:	3b1e      	subs	r3, #30
     d30:	8223      	strh	r3, [r4, #16]
     d32:	e7ed      	b.n	d10 <_usart_interrupt_handler+0xa0>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
     d34:	07db      	lsls	r3, r3, #31
     d36:	d5eb      	bpl.n	d10 <_usart_interrupt_handler+0xa0>
					module->rx_status = STATUS_ERR_BAD_DATA;
     d38:	2213      	movs	r2, #19
     d3a:	2322      	movs	r3, #34	; 0x22
     d3c:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
     d3e:	3b21      	subs	r3, #33	; 0x21
     d40:	8223      	strh	r3, [r4, #16]
     d42:	e7e5      	b.n	d10 <_usart_interrupt_handler+0xa0>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
     d44:	8b23      	ldrh	r3, [r4, #24]
     d46:	05db      	lsls	r3, r3, #23
     d48:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
     d4a:	b2da      	uxtb	r2, r3
     d4c:	6969      	ldr	r1, [r5, #20]
     d4e:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
     d50:	696a      	ldr	r2, [r5, #20]
     d52:	1c51      	adds	r1, r2, #1
     d54:	6169      	str	r1, [r5, #20]

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     d56:	7969      	ldrb	r1, [r5, #5]
     d58:	2901      	cmp	r1, #1
     d5a:	d010      	beq.n	d7e <_usart_interrupt_handler+0x10e>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
     d5c:	8bab      	ldrh	r3, [r5, #28]
     d5e:	3b01      	subs	r3, #1
     d60:	b29b      	uxth	r3, r3
     d62:	83ab      	strh	r3, [r5, #28]
     d64:	2b00      	cmp	r3, #0
     d66:	d112      	bne.n	d8e <_usart_interrupt_handler+0x11e>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
     d68:	3304      	adds	r3, #4
     d6a:	7323      	strb	r3, [r4, #12]
					module->rx_status = STATUS_OK;
     d6c:	2200      	movs	r2, #0
     d6e:	331e      	adds	r3, #30
     d70:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
     d72:	07bb      	lsls	r3, r7, #30
     d74:	d50b      	bpl.n	d8e <_usart_interrupt_handler+0x11e>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
     d76:	68eb      	ldr	r3, [r5, #12]
     d78:	0028      	movs	r0, r5
     d7a:	4798      	blx	r3
     d7c:	e007      	b.n	d8e <_usart_interrupt_handler+0x11e>
					*(module->rx_buffer_ptr) = (received_data >> 8);
     d7e:	0a1b      	lsrs	r3, r3, #8
     d80:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
     d82:	696b      	ldr	r3, [r5, #20]
     d84:	3301      	adds	r3, #1
     d86:	616b      	str	r3, [r5, #20]
     d88:	e7e8      	b.n	d5c <_usart_interrupt_handler+0xec>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
     d8a:	2304      	movs	r3, #4
     d8c:	7323      	strb	r3, [r4, #12]
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
     d8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     d90:	2000031c 	.word	0x2000031c

00000d94 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
     d94:	4770      	bx	lr
	...

00000d98 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
     d98:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
     d9a:	4b0a      	ldr	r3, [pc, #40]	; (dc4 <_sercom_set_handler+0x2c>)
     d9c:	781b      	ldrb	r3, [r3, #0]
     d9e:	2b00      	cmp	r3, #0
     da0:	d10c      	bne.n	dbc <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     da2:	4f09      	ldr	r7, [pc, #36]	; (dc8 <_sercom_set_handler+0x30>)
     da4:	4e09      	ldr	r6, [pc, #36]	; (dcc <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
     da6:	4d0a      	ldr	r5, [pc, #40]	; (dd0 <_sercom_set_handler+0x38>)
     da8:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     daa:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
     dac:	195a      	adds	r2, r3, r5
     dae:	6014      	str	r4, [r2, #0]
     db0:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     db2:	2b18      	cmp	r3, #24
     db4:	d1f9      	bne.n	daa <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
     db6:	2201      	movs	r2, #1
     db8:	4b02      	ldr	r3, [pc, #8]	; (dc4 <_sercom_set_handler+0x2c>)
     dba:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
     dbc:	0080      	lsls	r0, r0, #2
     dbe:	4b02      	ldr	r3, [pc, #8]	; (dc8 <_sercom_set_handler+0x30>)
     dc0:	50c1      	str	r1, [r0, r3]
}
     dc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
     dc4:	2000003e 	.word	0x2000003e
     dc8:	20000040 	.word	0x20000040
     dcc:	00000d95 	.word	0x00000d95
     dd0:	2000031c 	.word	0x2000031c

00000dd4 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
     dd4:	b500      	push	{lr}
     dd6:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
     dd8:	2307      	movs	r3, #7
     dda:	466a      	mov	r2, sp
     ddc:	7013      	strb	r3, [r2, #0]
     dde:	3301      	adds	r3, #1
     de0:	7053      	strb	r3, [r2, #1]
     de2:	3301      	adds	r3, #1
     de4:	7093      	strb	r3, [r2, #2]
     de6:	3301      	adds	r3, #1
     de8:	70d3      	strb	r3, [r2, #3]
     dea:	3301      	adds	r3, #1
     dec:	7113      	strb	r3, [r2, #4]
     dee:	3301      	adds	r3, #1
     df0:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
     df2:	4b03      	ldr	r3, [pc, #12]	; (e00 <_sercom_get_interrupt_vector+0x2c>)
     df4:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
     df6:	466b      	mov	r3, sp
     df8:	5618      	ldrsb	r0, [r3, r0]
}
     dfa:	b003      	add	sp, #12
     dfc:	bd00      	pop	{pc}
     dfe:	46c0      	nop			; (mov r8, r8)
     e00:	00000749 	.word	0x00000749

00000e04 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
     e04:	b510      	push	{r4, lr}
     e06:	4b02      	ldr	r3, [pc, #8]	; (e10 <SERCOM0_Handler+0xc>)
     e08:	681b      	ldr	r3, [r3, #0]
     e0a:	2000      	movs	r0, #0
     e0c:	4798      	blx	r3
     e0e:	bd10      	pop	{r4, pc}
     e10:	20000040 	.word	0x20000040

00000e14 <SERCOM1_Handler>:
     e14:	b510      	push	{r4, lr}
     e16:	4b02      	ldr	r3, [pc, #8]	; (e20 <SERCOM1_Handler+0xc>)
     e18:	685b      	ldr	r3, [r3, #4]
     e1a:	2001      	movs	r0, #1
     e1c:	4798      	blx	r3
     e1e:	bd10      	pop	{r4, pc}
     e20:	20000040 	.word	0x20000040

00000e24 <SERCOM2_Handler>:
     e24:	b510      	push	{r4, lr}
     e26:	4b02      	ldr	r3, [pc, #8]	; (e30 <SERCOM2_Handler+0xc>)
     e28:	689b      	ldr	r3, [r3, #8]
     e2a:	2002      	movs	r0, #2
     e2c:	4798      	blx	r3
     e2e:	bd10      	pop	{r4, pc}
     e30:	20000040 	.word	0x20000040

00000e34 <SERCOM3_Handler>:
     e34:	b510      	push	{r4, lr}
     e36:	4b02      	ldr	r3, [pc, #8]	; (e40 <SERCOM3_Handler+0xc>)
     e38:	68db      	ldr	r3, [r3, #12]
     e3a:	2003      	movs	r0, #3
     e3c:	4798      	blx	r3
     e3e:	bd10      	pop	{r4, pc}
     e40:	20000040 	.word	0x20000040

00000e44 <SERCOM4_Handler>:
     e44:	b510      	push	{r4, lr}
     e46:	4b02      	ldr	r3, [pc, #8]	; (e50 <SERCOM4_Handler+0xc>)
     e48:	691b      	ldr	r3, [r3, #16]
     e4a:	2004      	movs	r0, #4
     e4c:	4798      	blx	r3
     e4e:	bd10      	pop	{r4, pc}
     e50:	20000040 	.word	0x20000040

00000e54 <SERCOM5_Handler>:
     e54:	b510      	push	{r4, lr}
     e56:	4b02      	ldr	r3, [pc, #8]	; (e60 <SERCOM5_Handler+0xc>)
     e58:	695b      	ldr	r3, [r3, #20]
     e5a:	2005      	movs	r0, #5
     e5c:	4798      	blx	r3
     e5e:	bd10      	pop	{r4, pc}
     e60:	20000040 	.word	0x20000040

00000e64 <watchdog_early_warning_callback>:
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     e64:	2280      	movs	r2, #128	; 0x80
     e66:	0112      	lsls	r2, r2, #4
     e68:	4b01      	ldr	r3, [pc, #4]	; (e70 <watchdog_early_warning_callback+0xc>)
     e6a:	619a      	str	r2, [r3, #24]
 * @note				- 
 ******************************************************************************************************/
void watchdog_early_warning_callback(void)
{
    port_pin_set_output_level(PIN_PA11, 1);		// Orange2 LED
}
     e6c:	4770      	bx	lr
     e6e:	46c0      	nop			; (mov r8, r8)
     e70:	41004400 	.word	0x41004400

00000e74 <SysTick_Handler>:
}
     e74:	4770      	bx	lr
	...

00000e78 <config_BOD>:
{
     e78:	b500      	push	{lr}
     e7a:	b083      	sub	sp, #12
		struct bod_config *const conf)
{
	/* Sanity check arguments */
	Assert(conf);

	conf->prescaler      = BOD_PRESCALE_DIV_2;
     e7c:	2300      	movs	r3, #0
     e7e:	466a      	mov	r2, sp
     e80:	8013      	strh	r3, [r2, #0]
	conf->mode           = BOD_MODE_CONTINUOUS;
     e82:	8053      	strh	r3, [r2, #2]
	conf->action         = BOD_ACTION_RESET;
	conf->level          = 0x27;
     e84:	3327      	adds	r3, #39	; 0x27
     e86:	7153      	strb	r3, [r2, #5]
	conf->hysteresis     = true;
     e88:	3b26      	subs	r3, #38	; 0x26
     e8a:	7193      	strb	r3, [r2, #6]
	conf->run_in_standby = true;
     e8c:	71d3      	strb	r3, [r2, #7]
	config_bod33.action = BOD_ACTION_INTERRUPT;
     e8e:	330f      	adds	r3, #15
     e90:	7113      	strb	r3, [r2, #4]
	bod_set_config(BOD_BOD33, &config_bod33);
     e92:	4669      	mov	r1, sp
     e94:	2000      	movs	r0, #0
     e96:	4b08      	ldr	r3, [pc, #32]	; (eb8 <config_BOD+0x40>)
     e98:	4798      	blx	r3
static inline enum status_code bod_enable(
		const enum bod bod_id)
{
	switch (bod_id) {
		case BOD_BOD33:
			SYSCTRL->BOD33.reg |= SYSCTRL_BOD33_ENABLE;
     e9a:	4b08      	ldr	r3, [pc, #32]	; (ebc <config_BOD+0x44>)
     e9c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
     e9e:	2102      	movs	r1, #2
     ea0:	430a      	orrs	r2, r1
     ea2:	635a      	str	r2, [r3, #52]	; 0x34
	SYSCTRL->INTENSET.reg |= SYSCTRL_INTENCLR_BOD33DET;
     ea4:	6858      	ldr	r0, [r3, #4]
     ea6:	2280      	movs	r2, #128	; 0x80
     ea8:	00d2      	lsls	r2, r2, #3
     eaa:	4302      	orrs	r2, r0
     eac:	605a      	str	r2, [r3, #4]
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     eae:	4b04      	ldr	r3, [pc, #16]	; (ec0 <config_BOD+0x48>)
     eb0:	6019      	str	r1, [r3, #0]
}
     eb2:	b003      	add	sp, #12
     eb4:	bd00      	pop	{pc}
     eb6:	46c0      	nop			; (mov r8, r8)
     eb8:	00000399 	.word	0x00000399
     ebc:	40000800 	.word	0x40000800
     ec0:	e000e100 	.word	0xe000e100

00000ec4 <config_GCLK>:
{
     ec4:	b500      	push	{lr}
     ec6:	b085      	sub	sp, #20
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
	config->high_when_disabled = false;
     ec8:	a901      	add	r1, sp, #4
     eca:	2300      	movs	r3, #0
     ecc:	704b      	strb	r3, [r1, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
     ece:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
     ed0:	724b      	strb	r3, [r1, #9]
	gclk_gen_config1.source_clock = SYSTEM_CLOCK_SOURCE_ULP32K;
     ed2:	3303      	adds	r3, #3
     ed4:	700b      	strb	r3, [r1, #0]
	gclk_gen_config1.division_factor = 8;
     ed6:	3305      	adds	r3, #5
     ed8:	604b      	str	r3, [r1, #4]
	system_gclk_gen_set_config(GCLK_GENERATOR_1,&gclk_gen_config1);
     eda:	2001      	movs	r0, #1
     edc:	4b03      	ldr	r3, [pc, #12]	; (eec <config_GCLK+0x28>)
     ede:	4798      	blx	r3
	system_gclk_gen_enable(GCLK_GENERATOR_1);
     ee0:	2001      	movs	r0, #1
     ee2:	4b03      	ldr	r3, [pc, #12]	; (ef0 <config_GCLK+0x2c>)
     ee4:	4798      	blx	r3
}
     ee6:	b005      	add	sp, #20
     ee8:	bd00      	pop	{pc}
     eea:	46c0      	nop			; (mov r8, r8)
     eec:	000012ad 	.word	0x000012ad
     ef0:	00001365 	.word	0x00001365

00000ef4 <config_WDT>:
* @return				- void
*
* @note				-
******************************************************************************************************/
void config_WDT(void)
{
     ef4:	b500      	push	{lr}
     ef6:	b083      	sub	sp, #12
	config->always_on            = false;
     ef8:	2200      	movs	r2, #0
     efa:	466b      	mov	r3, sp
     efc:	701a      	strb	r2, [r3, #0]
	config->enable               = true;
     efe:	2301      	movs	r3, #1
     f00:	4669      	mov	r1, sp
     f02:	704b      	strb	r3, [r1, #1]
	config->timeout_period       = WDT_PERIOD_16384CLK;
     f04:	210c      	movs	r1, #12
     f06:	4668      	mov	r0, sp
     f08:	70c1      	strb	r1, [r0, #3]
	config->window_period        = WDT_PERIOD_NONE;
     f0a:	7102      	strb	r2, [r0, #4]
    struct wdt_conf config_wdt;
    wdt_get_config_defaults(&config_wdt);

    /* Set the Watchdog configuration settings */
    config_wdt.always_on            = false;
	config_wdt.clock_source			= GCLK_GENERATOR_1;
     f0c:	7083      	strb	r3, [r0, #2]
    config_wdt.timeout_period       = WDT_PERIOD_16384CLK;
    config_wdt.early_warning_period = WDT_PERIOD_8192CLK;
     f0e:	330a      	adds	r3, #10
     f10:	7143      	strb	r3, [r0, #5]

    /* Initialize and enable the Watchdog with the user settings */
    wdt_set_config(&config_wdt);
     f12:	4b02      	ldr	r3, [pc, #8]	; (f1c <config_WDT+0x28>)
     f14:	4798      	blx	r3
}
     f16:	b003      	add	sp, #12
     f18:	bd00      	pop	{pc}
     f1a:	46c0      	nop			; (mov r8, r8)
     f1c:	00000105 	.word	0x00000105

00000f20 <config_WDT_Callback>:
* @return				- void
*
* @note				-
******************************************************************************************************/
void config_WDT_Callback(void)
{
     f20:	b510      	push	{r4, lr}
    wdt_register_callback(watchdog_early_warning_callback, WDT_CALLBACK_EARLY_WARNING);
     f22:	2100      	movs	r1, #0
     f24:	4803      	ldr	r0, [pc, #12]	; (f34 <config_WDT_Callback+0x14>)
     f26:	4b04      	ldr	r3, [pc, #16]	; (f38 <config_WDT_Callback+0x18>)
     f28:	4798      	blx	r3
    wdt_enable_callback(WDT_CALLBACK_EARLY_WARNING);
     f2a:	2000      	movs	r0, #0
     f2c:	4b03      	ldr	r3, [pc, #12]	; (f3c <config_WDT_Callback+0x1c>)
     f2e:	4798      	blx	r3
}
     f30:	bd10      	pop	{r4, pc}
     f32:	46c0      	nop			; (mov r8, r8)
     f34:	00000e65 	.word	0x00000e65
     f38:	00000205 	.word	0x00000205
     f3c:	00000219 	.word	0x00000219

00000f40 <sys_config>:
 * @return				- void
 *
 * @note				- 
 ******************************************************************************************************/
void sys_config(void)
{
     f40:	b510      	push	{r4, lr}
	SysTick_Config(system_gclk_gen_get_hz(GCLK_GENERATOR_0));
     f42:	2000      	movs	r0, #0
     f44:	4b14      	ldr	r3, [pc, #80]	; (f98 <sys_config+0x58>)
     f46:	4798      	blx	r3
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
     f48:	3801      	subs	r0, #1
     f4a:	4b14      	ldr	r3, [pc, #80]	; (f9c <sys_config+0x5c>)
     f4c:	4298      	cmp	r0, r3
     f4e:	d80d      	bhi.n	f6c <sys_config+0x2c>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
     f50:	4a13      	ldr	r2, [pc, #76]	; (fa0 <sys_config+0x60>)
     f52:	6050      	str	r0, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
     f54:	4813      	ldr	r0, [pc, #76]	; (fa4 <sys_config+0x64>)
     f56:	6a03      	ldr	r3, [r0, #32]
     f58:	021b      	lsls	r3, r3, #8
     f5a:	0a1b      	lsrs	r3, r3, #8
     f5c:	21c0      	movs	r1, #192	; 0xc0
     f5e:	0609      	lsls	r1, r1, #24
     f60:	430b      	orrs	r3, r1
     f62:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
     f64:	2300      	movs	r3, #0
     f66:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
     f68:	3307      	adds	r3, #7
     f6a:	6013      	str	r3, [r2, #0]
	delay_init();
     f6c:	4b0e      	ldr	r3, [pc, #56]	; (fa8 <sys_config+0x68>)
     f6e:	4798      	blx	r3

	// Initialize USART
	config_UART();
     f70:	4b0e      	ldr	r3, [pc, #56]	; (fac <sys_config+0x6c>)
     f72:	4798      	blx	r3
	config_UART_Callback();
     f74:	4b0e      	ldr	r3, [pc, #56]	; (fb0 <sys_config+0x70>)
     f76:	4798      	blx	r3
	
	// Initialize EEPROM
	//config_eeprom();
	config_BOD();
     f78:	4b0e      	ldr	r3, [pc, #56]	; (fb4 <sys_config+0x74>)
     f7a:	4798      	blx	r3
	
	// Initialize WDT	
	config_GCLK();
     f7c:	4b0e      	ldr	r3, [pc, #56]	; (fb8 <sys_config+0x78>)
     f7e:	4798      	blx	r3
	config_WDT();
     f80:	4b0e      	ldr	r3, [pc, #56]	; (fbc <sys_config+0x7c>)
     f82:	4798      	blx	r3
	config_WDT_Callback();
     f84:	4b0e      	ldr	r3, [pc, #56]	; (fc0 <sys_config+0x80>)
     f86:	4798      	blx	r3
	cpu_irq_enable();
     f88:	2201      	movs	r2, #1
     f8a:	4b0e      	ldr	r3, [pc, #56]	; (fc4 <sys_config+0x84>)
     f8c:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     f8e:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
     f92:	b662      	cpsie	i
	// Initialize Timer
	//configure_timer();	

	system_interrupt_enable_global();
	
}
     f94:	bd10      	pop	{r4, pc}
     f96:	46c0      	nop			; (mov r8, r8)
     f98:	000013a9 	.word	0x000013a9
     f9c:	00ffffff 	.word	0x00ffffff
     fa0:	e000e010 	.word	0xe000e010
     fa4:	e000ed00 	.word	0xe000ed00
     fa8:	00000fc9 	.word	0x00000fc9
     fac:	00000785 	.word	0x00000785
     fb0:	00000825 	.word	0x00000825
     fb4:	00000e79 	.word	0x00000e79
     fb8:	00000ec5 	.word	0x00000ec5
     fbc:	00000ef5 	.word	0x00000ef5
     fc0:	00000f21 	.word	0x00000f21
     fc4:	2000001c 	.word	0x2000001c

00000fc8 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     fc8:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
     fca:	2000      	movs	r0, #0
     fcc:	4b08      	ldr	r3, [pc, #32]	; (ff0 <delay_init+0x28>)
     fce:	4798      	blx	r3
     fd0:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
     fd2:	4c08      	ldr	r4, [pc, #32]	; (ff4 <delay_init+0x2c>)
     fd4:	21fa      	movs	r1, #250	; 0xfa
     fd6:	0089      	lsls	r1, r1, #2
     fd8:	47a0      	blx	r4
     fda:	4b07      	ldr	r3, [pc, #28]	; (ff8 <delay_init+0x30>)
     fdc:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     fde:	4907      	ldr	r1, [pc, #28]	; (ffc <delay_init+0x34>)
     fe0:	0028      	movs	r0, r5
     fe2:	47a0      	blx	r4
     fe4:	4b06      	ldr	r3, [pc, #24]	; (1000 <delay_init+0x38>)
     fe6:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     fe8:	2205      	movs	r2, #5
     fea:	4b06      	ldr	r3, [pc, #24]	; (1004 <delay_init+0x3c>)
     fec:	601a      	str	r2, [r3, #0]
}
     fee:	bd70      	pop	{r4, r5, r6, pc}
     ff0:	000013a9 	.word	0x000013a9
     ff4:	00001759 	.word	0x00001759
     ff8:	20000014 	.word	0x20000014
     ffc:	000f4240 	.word	0x000f4240
    1000:	20000018 	.word	0x20000018
    1004:	e000e010 	.word	0xe000e010

00001008 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
    1008:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
    100a:	4b08      	ldr	r3, [pc, #32]	; (102c <delay_cycles_ms+0x24>)
    100c:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
    100e:	4a08      	ldr	r2, [pc, #32]	; (1030 <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
    1010:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    1012:	2180      	movs	r1, #128	; 0x80
    1014:	0249      	lsls	r1, r1, #9
	while (n--) {
    1016:	3801      	subs	r0, #1
    1018:	d307      	bcc.n	102a <delay_cycles_ms+0x22>
	if (n > 0) {
    101a:	2c00      	cmp	r4, #0
    101c:	d0fb      	beq.n	1016 <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
    101e:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
    1020:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    1022:	6813      	ldr	r3, [r2, #0]
    1024:	420b      	tst	r3, r1
    1026:	d0fc      	beq.n	1022 <delay_cycles_ms+0x1a>
    1028:	e7f5      	b.n	1016 <delay_cycles_ms+0xe>
	}
}
    102a:	bd30      	pop	{r4, r5, pc}
    102c:	20000014 	.word	0x20000014
    1030:	e000e010 	.word	0xe000e010

00001034 <system_board_init>:
{
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
    1034:	4770      	bx	lr
	...

00001038 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    1038:	4b0c      	ldr	r3, [pc, #48]	; (106c <cpu_irq_enter_critical+0x34>)
    103a:	681b      	ldr	r3, [r3, #0]
    103c:	2b00      	cmp	r3, #0
    103e:	d106      	bne.n	104e <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    1040:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    1044:	2b00      	cmp	r3, #0
    1046:	d007      	beq.n	1058 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    1048:	2200      	movs	r2, #0
    104a:	4b09      	ldr	r3, [pc, #36]	; (1070 <cpu_irq_enter_critical+0x38>)
    104c:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    104e:	4a07      	ldr	r2, [pc, #28]	; (106c <cpu_irq_enter_critical+0x34>)
    1050:	6813      	ldr	r3, [r2, #0]
    1052:	3301      	adds	r3, #1
    1054:	6013      	str	r3, [r2, #0]
}
    1056:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    1058:	b672      	cpsid	i
    105a:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    105e:	2200      	movs	r2, #0
    1060:	4b04      	ldr	r3, [pc, #16]	; (1074 <cpu_irq_enter_critical+0x3c>)
    1062:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    1064:	3201      	adds	r2, #1
    1066:	4b02      	ldr	r3, [pc, #8]	; (1070 <cpu_irq_enter_critical+0x38>)
    1068:	701a      	strb	r2, [r3, #0]
    106a:	e7f0      	b.n	104e <cpu_irq_enter_critical+0x16>
    106c:	20000058 	.word	0x20000058
    1070:	2000005c 	.word	0x2000005c
    1074:	2000001c 	.word	0x2000001c

00001078 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    1078:	4b08      	ldr	r3, [pc, #32]	; (109c <cpu_irq_leave_critical+0x24>)
    107a:	681a      	ldr	r2, [r3, #0]
    107c:	3a01      	subs	r2, #1
    107e:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    1080:	681b      	ldr	r3, [r3, #0]
    1082:	2b00      	cmp	r3, #0
    1084:	d109      	bne.n	109a <cpu_irq_leave_critical+0x22>
    1086:	4b06      	ldr	r3, [pc, #24]	; (10a0 <cpu_irq_leave_critical+0x28>)
    1088:	781b      	ldrb	r3, [r3, #0]
    108a:	2b00      	cmp	r3, #0
    108c:	d005      	beq.n	109a <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    108e:	2201      	movs	r2, #1
    1090:	4b04      	ldr	r3, [pc, #16]	; (10a4 <cpu_irq_leave_critical+0x2c>)
    1092:	701a      	strb	r2, [r3, #0]
    1094:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    1098:	b662      	cpsie	i
	}
}
    109a:	4770      	bx	lr
    109c:	20000058 	.word	0x20000058
    10a0:	2000005c 	.word	0x2000005c
    10a4:	2000001c 	.word	0x2000001c

000010a8 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    10a8:	b510      	push	{r4, lr}
	switch (clock_source) {
    10aa:	2807      	cmp	r0, #7
    10ac:	d803      	bhi.n	10b6 <system_clock_source_get_hz+0xe>
    10ae:	0080      	lsls	r0, r0, #2
    10b0:	4b16      	ldr	r3, [pc, #88]	; (110c <system_clock_source_get_hz+0x64>)
    10b2:	581b      	ldr	r3, [r3, r0]
    10b4:	469f      	mov	pc, r3
		}

		return 48000000UL;

	default:
		return 0;
    10b6:	2000      	movs	r0, #0
    10b8:	e027      	b.n	110a <system_clock_source_get_hz+0x62>
		return _system_clock_inst.xosc.frequency;
    10ba:	4b15      	ldr	r3, [pc, #84]	; (1110 <system_clock_source_get_hz+0x68>)
    10bc:	68d8      	ldr	r0, [r3, #12]
    10be:	e024      	b.n	110a <system_clock_source_get_hz+0x62>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    10c0:	4b14      	ldr	r3, [pc, #80]	; (1114 <system_clock_source_get_hz+0x6c>)
    10c2:	6a1b      	ldr	r3, [r3, #32]
    10c4:	059b      	lsls	r3, r3, #22
    10c6:	0f9b      	lsrs	r3, r3, #30
    10c8:	4813      	ldr	r0, [pc, #76]	; (1118 <system_clock_source_get_hz+0x70>)
    10ca:	40d8      	lsrs	r0, r3
    10cc:	e01d      	b.n	110a <system_clock_source_get_hz+0x62>
		return _system_clock_inst.xosc32k.frequency;
    10ce:	4b10      	ldr	r3, [pc, #64]	; (1110 <system_clock_source_get_hz+0x68>)
    10d0:	6918      	ldr	r0, [r3, #16]
    10d2:	e01a      	b.n	110a <system_clock_source_get_hz+0x62>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    10d4:	4b0e      	ldr	r3, [pc, #56]	; (1110 <system_clock_source_get_hz+0x68>)
    10d6:	681b      	ldr	r3, [r3, #0]
			return 0;
    10d8:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    10da:	079b      	lsls	r3, r3, #30
    10dc:	d515      	bpl.n	110a <system_clock_source_get_hz+0x62>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    10de:	490d      	ldr	r1, [pc, #52]	; (1114 <system_clock_source_get_hz+0x6c>)
    10e0:	2210      	movs	r2, #16
    10e2:	68cb      	ldr	r3, [r1, #12]
    10e4:	421a      	tst	r2, r3
    10e6:	d0fc      	beq.n	10e2 <system_clock_source_get_hz+0x3a>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    10e8:	4b09      	ldr	r3, [pc, #36]	; (1110 <system_clock_source_get_hz+0x68>)
    10ea:	681b      	ldr	r3, [r3, #0]
    10ec:	075b      	lsls	r3, r3, #29
    10ee:	d401      	bmi.n	10f4 <system_clock_source_get_hz+0x4c>
		return 48000000UL;
    10f0:	480a      	ldr	r0, [pc, #40]	; (111c <system_clock_source_get_hz+0x74>)
    10f2:	e00a      	b.n	110a <system_clock_source_get_hz+0x62>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    10f4:	2000      	movs	r0, #0
    10f6:	4b0a      	ldr	r3, [pc, #40]	; (1120 <system_clock_source_get_hz+0x78>)
    10f8:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    10fa:	4b05      	ldr	r3, [pc, #20]	; (1110 <system_clock_source_get_hz+0x68>)
    10fc:	689b      	ldr	r3, [r3, #8]
    10fe:	041b      	lsls	r3, r3, #16
    1100:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    1102:	4358      	muls	r0, r3
    1104:	e001      	b.n	110a <system_clock_source_get_hz+0x62>
		return 32768UL;
    1106:	2080      	movs	r0, #128	; 0x80
    1108:	0200      	lsls	r0, r0, #8
	}
}
    110a:	bd10      	pop	{r4, pc}
    110c:	00001924 	.word	0x00001924
    1110:	20000060 	.word	0x20000060
    1114:	40000800 	.word	0x40000800
    1118:	007a1200 	.word	0x007a1200
    111c:	02dc6c00 	.word	0x02dc6c00
    1120:	0000150d 	.word	0x0000150d

00001124 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    1124:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    1126:	490c      	ldr	r1, [pc, #48]	; (1158 <system_clock_source_osc8m_set_config+0x34>)
    1128:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    112a:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    112c:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    112e:	7840      	ldrb	r0, [r0, #1]
    1130:	2201      	movs	r2, #1
    1132:	4010      	ands	r0, r2
    1134:	0180      	lsls	r0, r0, #6
    1136:	2640      	movs	r6, #64	; 0x40
    1138:	43b3      	bics	r3, r6
    113a:	4303      	orrs	r3, r0
    113c:	402a      	ands	r2, r5
    113e:	01d2      	lsls	r2, r2, #7
    1140:	2080      	movs	r0, #128	; 0x80
    1142:	4383      	bics	r3, r0
    1144:	4313      	orrs	r3, r2
    1146:	2203      	movs	r2, #3
    1148:	4022      	ands	r2, r4
    114a:	0212      	lsls	r2, r2, #8
    114c:	4803      	ldr	r0, [pc, #12]	; (115c <system_clock_source_osc8m_set_config+0x38>)
    114e:	4003      	ands	r3, r0
    1150:	4313      	orrs	r3, r2
    1152:	620b      	str	r3, [r1, #32]
}
    1154:	bd70      	pop	{r4, r5, r6, pc}
    1156:	46c0      	nop			; (mov r8, r8)
    1158:	40000800 	.word	0x40000800
    115c:	fffffcff 	.word	0xfffffcff

00001160 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    1160:	2807      	cmp	r0, #7
    1162:	d803      	bhi.n	116c <system_clock_source_enable+0xc>
    1164:	0080      	lsls	r0, r0, #2
    1166:	4b1e      	ldr	r3, [pc, #120]	; (11e0 <system_clock_source_enable+0x80>)
    1168:	581b      	ldr	r3, [r3, r0]
    116a:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    116c:	2017      	movs	r0, #23
    116e:	e036      	b.n	11de <system_clock_source_enable+0x7e>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    1170:	4a1c      	ldr	r2, [pc, #112]	; (11e4 <system_clock_source_enable+0x84>)
    1172:	6a13      	ldr	r3, [r2, #32]
    1174:	2102      	movs	r1, #2
    1176:	430b      	orrs	r3, r1
    1178:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    117a:	2000      	movs	r0, #0
    117c:	e02f      	b.n	11de <system_clock_source_enable+0x7e>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    117e:	4a19      	ldr	r2, [pc, #100]	; (11e4 <system_clock_source_enable+0x84>)
    1180:	6993      	ldr	r3, [r2, #24]
    1182:	2102      	movs	r1, #2
    1184:	430b      	orrs	r3, r1
    1186:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    1188:	2000      	movs	r0, #0
		break;
    118a:	e028      	b.n	11de <system_clock_source_enable+0x7e>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    118c:	4a15      	ldr	r2, [pc, #84]	; (11e4 <system_clock_source_enable+0x84>)
    118e:	8a13      	ldrh	r3, [r2, #16]
    1190:	2102      	movs	r1, #2
    1192:	430b      	orrs	r3, r1
    1194:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    1196:	2000      	movs	r0, #0
		break;
    1198:	e021      	b.n	11de <system_clock_source_enable+0x7e>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    119a:	4a12      	ldr	r2, [pc, #72]	; (11e4 <system_clock_source_enable+0x84>)
    119c:	8a93      	ldrh	r3, [r2, #20]
    119e:	2102      	movs	r1, #2
    11a0:	430b      	orrs	r3, r1
    11a2:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    11a4:	2000      	movs	r0, #0
		break;
    11a6:	e01a      	b.n	11de <system_clock_source_enable+0x7e>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    11a8:	4b0f      	ldr	r3, [pc, #60]	; (11e8 <system_clock_source_enable+0x88>)
    11aa:	681a      	ldr	r2, [r3, #0]
    11ac:	2102      	movs	r1, #2
    11ae:	430a      	orrs	r2, r1
    11b0:	601a      	str	r2, [r3, #0]
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control & ~SYSCTRL_DFLLCTRL_ONDEMAND;
    11b2:	681b      	ldr	r3, [r3, #0]
    11b4:	4a0d      	ldr	r2, [pc, #52]	; (11ec <system_clock_source_enable+0x8c>)
    11b6:	4013      	ands	r3, r2
    11b8:	4a0a      	ldr	r2, [pc, #40]	; (11e4 <system_clock_source_enable+0x84>)
    11ba:	8493      	strh	r3, [r2, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    11bc:	0011      	movs	r1, r2
    11be:	2210      	movs	r2, #16
    11c0:	68cb      	ldr	r3, [r1, #12]
    11c2:	421a      	tst	r2, r3
    11c4:	d0fc      	beq.n	11c0 <system_clock_source_enable+0x60>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    11c6:	4a08      	ldr	r2, [pc, #32]	; (11e8 <system_clock_source_enable+0x88>)
    11c8:	6891      	ldr	r1, [r2, #8]
    11ca:	4b06      	ldr	r3, [pc, #24]	; (11e4 <system_clock_source_enable+0x84>)
    11cc:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    11ce:	6851      	ldr	r1, [r2, #4]
    11d0:	6299      	str	r1, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    11d2:	6812      	ldr	r2, [r2, #0]
    11d4:	b292      	uxth	r2, r2
    11d6:	849a      	strh	r2, [r3, #36]	; 0x24
	return STATUS_OK;
    11d8:	2000      	movs	r0, #0
    11da:	e000      	b.n	11de <system_clock_source_enable+0x7e>
		return STATUS_OK;
    11dc:	2000      	movs	r0, #0
}
    11de:	4770      	bx	lr
    11e0:	00001944 	.word	0x00001944
    11e4:	40000800 	.word	0x40000800
    11e8:	20000060 	.word	0x20000060
    11ec:	0000ff7f 	.word	0x0000ff7f

000011f0 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    11f0:	b530      	push	{r4, r5, lr}
    11f2:	b085      	sub	sp, #20
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    11f4:	22c2      	movs	r2, #194	; 0xc2
    11f6:	00d2      	lsls	r2, r2, #3
    11f8:	4b1a      	ldr	r3, [pc, #104]	; (1264 <system_clock_init+0x74>)
    11fa:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    11fc:	4a1a      	ldr	r2, [pc, #104]	; (1268 <system_clock_init+0x78>)
    11fe:	6853      	ldr	r3, [r2, #4]
    1200:	211e      	movs	r1, #30
    1202:	438b      	bics	r3, r1
    1204:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_1;
    1206:	2301      	movs	r3, #1
    1208:	466a      	mov	r2, sp
    120a:	7013      	strb	r3, [r2, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    120c:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    120e:	4d17      	ldr	r5, [pc, #92]	; (126c <system_clock_init+0x7c>)
    1210:	b2e0      	uxtb	r0, r4
    1212:	4669      	mov	r1, sp
    1214:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1216:	3401      	adds	r4, #1
    1218:	2c1c      	cmp	r4, #28
    121a:	d1f9      	bne.n	1210 <system_clock_init+0x20>
	config->run_in_standby  = false;
    121c:	a803      	add	r0, sp, #12
    121e:	2400      	movs	r4, #0
    1220:	7044      	strb	r4, [r0, #1]
	config->on_demand       = true;
    1222:	2501      	movs	r5, #1
    1224:	7085      	strb	r5, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    1226:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    1228:	4b11      	ldr	r3, [pc, #68]	; (1270 <system_clock_init+0x80>)
    122a:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    122c:	2006      	movs	r0, #6
    122e:	4b11      	ldr	r3, [pc, #68]	; (1274 <system_clock_init+0x84>)
    1230:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    1232:	4b11      	ldr	r3, [pc, #68]	; (1278 <system_clock_init+0x88>)
    1234:	4798      	blx	r3
	PM->CPUSEL.reg = (uint32_t)divider;
    1236:	4b11      	ldr	r3, [pc, #68]	; (127c <system_clock_init+0x8c>)
    1238:	721c      	strb	r4, [r3, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    123a:	725c      	strb	r4, [r3, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    123c:	729c      	strb	r4, [r3, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    123e:	72dc      	strb	r4, [r3, #11]
	config->division_factor    = 1;
    1240:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
    1242:	466b      	mov	r3, sp
    1244:	705c      	strb	r4, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    1246:	2306      	movs	r3, #6
    1248:	466a      	mov	r2, sp
    124a:	7013      	strb	r3, [r2, #0]
	config->run_in_standby     = false;
    124c:	7214      	strb	r4, [r2, #8]
	config->output_enable      = false;
    124e:	7254      	strb	r4, [r2, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    1250:	4669      	mov	r1, sp
    1252:	2000      	movs	r0, #0
    1254:	4b0a      	ldr	r3, [pc, #40]	; (1280 <system_clock_init+0x90>)
    1256:	4798      	blx	r3
    1258:	2000      	movs	r0, #0
    125a:	4b0a      	ldr	r3, [pc, #40]	; (1284 <system_clock_init+0x94>)
    125c:	4798      	blx	r3
#endif
}
    125e:	b005      	add	sp, #20
    1260:	bd30      	pop	{r4, r5, pc}
    1262:	46c0      	nop			; (mov r8, r8)
    1264:	40000800 	.word	0x40000800
    1268:	41004000 	.word	0x41004000
    126c:	000014c1 	.word	0x000014c1
    1270:	00001125 	.word	0x00001125
    1274:	00001161 	.word	0x00001161
    1278:	00001289 	.word	0x00001289
    127c:	40000400 	.word	0x40000400
    1280:	000012ad 	.word	0x000012ad
    1284:	00001365 	.word	0x00001365

00001288 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    1288:	4a06      	ldr	r2, [pc, #24]	; (12a4 <system_gclk_init+0x1c>)
    128a:	6993      	ldr	r3, [r2, #24]
    128c:	2108      	movs	r1, #8
    128e:	430b      	orrs	r3, r1
    1290:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    1292:	2201      	movs	r2, #1
    1294:	4b04      	ldr	r3, [pc, #16]	; (12a8 <system_gclk_init+0x20>)
    1296:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    1298:	0019      	movs	r1, r3
    129a:	780b      	ldrb	r3, [r1, #0]
    129c:	4213      	tst	r3, r2
    129e:	d1fc      	bne.n	129a <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    12a0:	4770      	bx	lr
    12a2:	46c0      	nop			; (mov r8, r8)
    12a4:	40000400 	.word	0x40000400
    12a8:	40000c00 	.word	0x40000c00

000012ac <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    12ac:	b570      	push	{r4, r5, r6, lr}
    12ae:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    12b0:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    12b2:	780d      	ldrb	r5, [r1, #0]
    12b4:	022d      	lsls	r5, r5, #8
    12b6:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    12b8:	784b      	ldrb	r3, [r1, #1]
    12ba:	2b00      	cmp	r3, #0
    12bc:	d002      	beq.n	12c4 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    12be:	2380      	movs	r3, #128	; 0x80
    12c0:	02db      	lsls	r3, r3, #11
    12c2:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    12c4:	7a4b      	ldrb	r3, [r1, #9]
    12c6:	2b00      	cmp	r3, #0
    12c8:	d002      	beq.n	12d0 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    12ca:	2380      	movs	r3, #128	; 0x80
    12cc:	031b      	lsls	r3, r3, #12
    12ce:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    12d0:	6848      	ldr	r0, [r1, #4]
    12d2:	2801      	cmp	r0, #1
    12d4:	d910      	bls.n	12f8 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    12d6:	1e43      	subs	r3, r0, #1
    12d8:	4218      	tst	r0, r3
    12da:	d134      	bne.n	1346 <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    12dc:	2802      	cmp	r0, #2
    12de:	d930      	bls.n	1342 <system_gclk_gen_set_config+0x96>
    12e0:	2302      	movs	r3, #2
    12e2:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    12e4:	3201      	adds	r2, #1
						mask <<= 1) {
    12e6:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    12e8:	4298      	cmp	r0, r3
    12ea:	d8fb      	bhi.n	12e4 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    12ec:	0212      	lsls	r2, r2, #8
    12ee:	4332      	orrs	r2, r6
    12f0:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    12f2:	2380      	movs	r3, #128	; 0x80
    12f4:	035b      	lsls	r3, r3, #13
    12f6:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    12f8:	7a0b      	ldrb	r3, [r1, #8]
    12fa:	2b00      	cmp	r3, #0
    12fc:	d002      	beq.n	1304 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    12fe:	2380      	movs	r3, #128	; 0x80
    1300:	039b      	lsls	r3, r3, #14
    1302:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1304:	4a13      	ldr	r2, [pc, #76]	; (1354 <system_gclk_gen_set_config+0xa8>)
    1306:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    1308:	b25b      	sxtb	r3, r3
    130a:	2b00      	cmp	r3, #0
    130c:	dbfb      	blt.n	1306 <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    130e:	4b12      	ldr	r3, [pc, #72]	; (1358 <system_gclk_gen_set_config+0xac>)
    1310:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1312:	4b12      	ldr	r3, [pc, #72]	; (135c <system_gclk_gen_set_config+0xb0>)
    1314:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1316:	4a0f      	ldr	r2, [pc, #60]	; (1354 <system_gclk_gen_set_config+0xa8>)
    1318:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    131a:	b25b      	sxtb	r3, r3
    131c:	2b00      	cmp	r3, #0
    131e:	dbfb      	blt.n	1318 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    1320:	4b0c      	ldr	r3, [pc, #48]	; (1354 <system_gclk_gen_set_config+0xa8>)
    1322:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1324:	001a      	movs	r2, r3
    1326:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    1328:	b25b      	sxtb	r3, r3
    132a:	2b00      	cmp	r3, #0
    132c:	dbfb      	blt.n	1326 <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    132e:	4a09      	ldr	r2, [pc, #36]	; (1354 <system_gclk_gen_set_config+0xa8>)
    1330:	6853      	ldr	r3, [r2, #4]
    1332:	2180      	movs	r1, #128	; 0x80
    1334:	0249      	lsls	r1, r1, #9
    1336:	400b      	ands	r3, r1
    1338:	431d      	orrs	r5, r3
    133a:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    133c:	4b08      	ldr	r3, [pc, #32]	; (1360 <system_gclk_gen_set_config+0xb4>)
    133e:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1340:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    1342:	2200      	movs	r2, #0
    1344:	e7d2      	b.n	12ec <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    1346:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    1348:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    134a:	2380      	movs	r3, #128	; 0x80
    134c:	029b      	lsls	r3, r3, #10
    134e:	431d      	orrs	r5, r3
    1350:	e7d2      	b.n	12f8 <system_gclk_gen_set_config+0x4c>
    1352:	46c0      	nop			; (mov r8, r8)
    1354:	40000c00 	.word	0x40000c00
    1358:	00001039 	.word	0x00001039
    135c:	40000c08 	.word	0x40000c08
    1360:	00001079 	.word	0x00001079

00001364 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    1364:	b510      	push	{r4, lr}
    1366:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1368:	4a0b      	ldr	r2, [pc, #44]	; (1398 <system_gclk_gen_enable+0x34>)
    136a:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    136c:	b25b      	sxtb	r3, r3
    136e:	2b00      	cmp	r3, #0
    1370:	dbfb      	blt.n	136a <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    1372:	4b0a      	ldr	r3, [pc, #40]	; (139c <system_gclk_gen_enable+0x38>)
    1374:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1376:	4b0a      	ldr	r3, [pc, #40]	; (13a0 <system_gclk_gen_enable+0x3c>)
    1378:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    137a:	4a07      	ldr	r2, [pc, #28]	; (1398 <system_gclk_gen_enable+0x34>)
    137c:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    137e:	b25b      	sxtb	r3, r3
    1380:	2b00      	cmp	r3, #0
    1382:	dbfb      	blt.n	137c <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    1384:	4a04      	ldr	r2, [pc, #16]	; (1398 <system_gclk_gen_enable+0x34>)
    1386:	6851      	ldr	r1, [r2, #4]
    1388:	2380      	movs	r3, #128	; 0x80
    138a:	025b      	lsls	r3, r3, #9
    138c:	430b      	orrs	r3, r1
    138e:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    1390:	4b04      	ldr	r3, [pc, #16]	; (13a4 <system_gclk_gen_enable+0x40>)
    1392:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1394:	bd10      	pop	{r4, pc}
    1396:	46c0      	nop			; (mov r8, r8)
    1398:	40000c00 	.word	0x40000c00
    139c:	00001039 	.word	0x00001039
    13a0:	40000c04 	.word	0x40000c04
    13a4:	00001079 	.word	0x00001079

000013a8 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    13a8:	b570      	push	{r4, r5, r6, lr}
    13aa:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    13ac:	4a1a      	ldr	r2, [pc, #104]	; (1418 <system_gclk_gen_get_hz+0x70>)
    13ae:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    13b0:	b25b      	sxtb	r3, r3
    13b2:	2b00      	cmp	r3, #0
    13b4:	dbfb      	blt.n	13ae <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    13b6:	4b19      	ldr	r3, [pc, #100]	; (141c <system_gclk_gen_get_hz+0x74>)
    13b8:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    13ba:	4b19      	ldr	r3, [pc, #100]	; (1420 <system_gclk_gen_get_hz+0x78>)
    13bc:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    13be:	4a16      	ldr	r2, [pc, #88]	; (1418 <system_gclk_gen_get_hz+0x70>)
    13c0:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    13c2:	b25b      	sxtb	r3, r3
    13c4:	2b00      	cmp	r3, #0
    13c6:	dbfb      	blt.n	13c0 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    13c8:	4e13      	ldr	r6, [pc, #76]	; (1418 <system_gclk_gen_get_hz+0x70>)
    13ca:	6870      	ldr	r0, [r6, #4]
    13cc:	04c0      	lsls	r0, r0, #19
    13ce:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    13d0:	4b14      	ldr	r3, [pc, #80]	; (1424 <system_gclk_gen_get_hz+0x7c>)
    13d2:	4798      	blx	r3
    13d4:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    13d6:	4b12      	ldr	r3, [pc, #72]	; (1420 <system_gclk_gen_get_hz+0x78>)
    13d8:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    13da:	6876      	ldr	r6, [r6, #4]
    13dc:	02f6      	lsls	r6, r6, #11
    13de:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    13e0:	4b11      	ldr	r3, [pc, #68]	; (1428 <system_gclk_gen_get_hz+0x80>)
    13e2:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    13e4:	4a0c      	ldr	r2, [pc, #48]	; (1418 <system_gclk_gen_get_hz+0x70>)
    13e6:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    13e8:	b25b      	sxtb	r3, r3
    13ea:	2b00      	cmp	r3, #0
    13ec:	dbfb      	blt.n	13e6 <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    13ee:	4b0a      	ldr	r3, [pc, #40]	; (1418 <system_gclk_gen_get_hz+0x70>)
    13f0:	689c      	ldr	r4, [r3, #8]
    13f2:	0224      	lsls	r4, r4, #8
    13f4:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    13f6:	4b0d      	ldr	r3, [pc, #52]	; (142c <system_gclk_gen_get_hz+0x84>)
    13f8:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    13fa:	2e00      	cmp	r6, #0
    13fc:	d107      	bne.n	140e <system_gclk_gen_get_hz+0x66>
    13fe:	2c01      	cmp	r4, #1
    1400:	d907      	bls.n	1412 <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    1402:	0021      	movs	r1, r4
    1404:	0028      	movs	r0, r5
    1406:	4b0a      	ldr	r3, [pc, #40]	; (1430 <system_gclk_gen_get_hz+0x88>)
    1408:	4798      	blx	r3
    140a:	0005      	movs	r5, r0
    140c:	e001      	b.n	1412 <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    140e:	3401      	adds	r4, #1
    1410:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    1412:	0028      	movs	r0, r5
    1414:	bd70      	pop	{r4, r5, r6, pc}
    1416:	46c0      	nop			; (mov r8, r8)
    1418:	40000c00 	.word	0x40000c00
    141c:	00001039 	.word	0x00001039
    1420:	40000c04 	.word	0x40000c04
    1424:	000010a9 	.word	0x000010a9
    1428:	40000c08 	.word	0x40000c08
    142c:	00001079 	.word	0x00001079
    1430:	00001759 	.word	0x00001759

00001434 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    1434:	b510      	push	{r4, lr}
    1436:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1438:	4b06      	ldr	r3, [pc, #24]	; (1454 <system_gclk_chan_enable+0x20>)
    143a:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    143c:	4b06      	ldr	r3, [pc, #24]	; (1458 <system_gclk_chan_enable+0x24>)
    143e:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    1440:	4a06      	ldr	r2, [pc, #24]	; (145c <system_gclk_chan_enable+0x28>)
    1442:	8853      	ldrh	r3, [r2, #2]
    1444:	2180      	movs	r1, #128	; 0x80
    1446:	01c9      	lsls	r1, r1, #7
    1448:	430b      	orrs	r3, r1
    144a:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    144c:	4b04      	ldr	r3, [pc, #16]	; (1460 <system_gclk_chan_enable+0x2c>)
    144e:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1450:	bd10      	pop	{r4, pc}
    1452:	46c0      	nop			; (mov r8, r8)
    1454:	00001039 	.word	0x00001039
    1458:	40000c02 	.word	0x40000c02
    145c:	40000c00 	.word	0x40000c00
    1460:	00001079 	.word	0x00001079

00001464 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    1464:	b510      	push	{r4, lr}
    1466:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1468:	4b0f      	ldr	r3, [pc, #60]	; (14a8 <system_gclk_chan_disable+0x44>)
    146a:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    146c:	4b0f      	ldr	r3, [pc, #60]	; (14ac <system_gclk_chan_disable+0x48>)
    146e:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    1470:	4a0f      	ldr	r2, [pc, #60]	; (14b0 <system_gclk_chan_disable+0x4c>)
    1472:	8853      	ldrh	r3, [r2, #2]
    1474:	051b      	lsls	r3, r3, #20
    1476:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    1478:	8853      	ldrh	r3, [r2, #2]
    147a:	490e      	ldr	r1, [pc, #56]	; (14b4 <system_gclk_chan_disable+0x50>)
    147c:	400b      	ands	r3, r1
    147e:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    1480:	8853      	ldrh	r3, [r2, #2]
    1482:	490d      	ldr	r1, [pc, #52]	; (14b8 <system_gclk_chan_disable+0x54>)
    1484:	400b      	ands	r3, r1
    1486:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    1488:	0011      	movs	r1, r2
    148a:	2280      	movs	r2, #128	; 0x80
    148c:	01d2      	lsls	r2, r2, #7
    148e:	884b      	ldrh	r3, [r1, #2]
    1490:	4213      	tst	r3, r2
    1492:	d1fc      	bne.n	148e <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    1494:	4906      	ldr	r1, [pc, #24]	; (14b0 <system_gclk_chan_disable+0x4c>)
    1496:	884a      	ldrh	r2, [r1, #2]
    1498:	0203      	lsls	r3, r0, #8
    149a:	4806      	ldr	r0, [pc, #24]	; (14b4 <system_gclk_chan_disable+0x50>)
    149c:	4002      	ands	r2, r0
    149e:	4313      	orrs	r3, r2
    14a0:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    14a2:	4b06      	ldr	r3, [pc, #24]	; (14bc <system_gclk_chan_disable+0x58>)
    14a4:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    14a6:	bd10      	pop	{r4, pc}
    14a8:	00001039 	.word	0x00001039
    14ac:	40000c02 	.word	0x40000c02
    14b0:	40000c00 	.word	0x40000c00
    14b4:	fffff0ff 	.word	0xfffff0ff
    14b8:	ffffbfff 	.word	0xffffbfff
    14bc:	00001079 	.word	0x00001079

000014c0 <system_gclk_chan_set_config>:
{
    14c0:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    14c2:	780c      	ldrb	r4, [r1, #0]
    14c4:	0224      	lsls	r4, r4, #8
    14c6:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    14c8:	4b02      	ldr	r3, [pc, #8]	; (14d4 <system_gclk_chan_set_config+0x14>)
    14ca:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    14cc:	b2a4      	uxth	r4, r4
    14ce:	4b02      	ldr	r3, [pc, #8]	; (14d8 <system_gclk_chan_set_config+0x18>)
    14d0:	805c      	strh	r4, [r3, #2]
}
    14d2:	bd10      	pop	{r4, pc}
    14d4:	00001465 	.word	0x00001465
    14d8:	40000c00 	.word	0x40000c00

000014dc <system_gclk_chan_lock>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_lock(
		const uint8_t channel)
{
    14dc:	b510      	push	{r4, lr}
    14de:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    14e0:	4b06      	ldr	r3, [pc, #24]	; (14fc <system_gclk_chan_lock+0x20>)
    14e2:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    14e4:	4b06      	ldr	r3, [pc, #24]	; (1500 <system_gclk_chan_lock+0x24>)
    14e6:	701c      	strb	r4, [r3, #0]

	/* Lock the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_WRTLOCK | GCLK_CLKCTRL_CLKEN;
    14e8:	4a06      	ldr	r2, [pc, #24]	; (1504 <system_gclk_chan_lock+0x28>)
    14ea:	8853      	ldrh	r3, [r2, #2]
    14ec:	21c0      	movs	r1, #192	; 0xc0
    14ee:	0209      	lsls	r1, r1, #8
    14f0:	430b      	orrs	r3, r1
    14f2:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    14f4:	4b04      	ldr	r3, [pc, #16]	; (1508 <system_gclk_chan_lock+0x2c>)
    14f6:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    14f8:	bd10      	pop	{r4, pc}
    14fa:	46c0      	nop			; (mov r8, r8)
    14fc:	00001039 	.word	0x00001039
    1500:	40000c02 	.word	0x40000c02
    1504:	40000c00 	.word	0x40000c00
    1508:	00001079 	.word	0x00001079

0000150c <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    150c:	b510      	push	{r4, lr}
    150e:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1510:	4b06      	ldr	r3, [pc, #24]	; (152c <system_gclk_chan_get_hz+0x20>)
    1512:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1514:	4b06      	ldr	r3, [pc, #24]	; (1530 <system_gclk_chan_get_hz+0x24>)
    1516:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    1518:	4b06      	ldr	r3, [pc, #24]	; (1534 <system_gclk_chan_get_hz+0x28>)
    151a:	885c      	ldrh	r4, [r3, #2]
    151c:	0524      	lsls	r4, r4, #20
    151e:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    1520:	4b05      	ldr	r3, [pc, #20]	; (1538 <system_gclk_chan_get_hz+0x2c>)
    1522:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    1524:	0020      	movs	r0, r4
    1526:	4b05      	ldr	r3, [pc, #20]	; (153c <system_gclk_chan_get_hz+0x30>)
    1528:	4798      	blx	r3
}
    152a:	bd10      	pop	{r4, pc}
    152c:	00001039 	.word	0x00001039
    1530:	40000c02 	.word	0x40000c02
    1534:	40000c00 	.word	0x40000c00
    1538:	00001079 	.word	0x00001079
    153c:	000013a9 	.word	0x000013a9

00001540 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    1540:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    1542:	78d3      	ldrb	r3, [r2, #3]
    1544:	2b00      	cmp	r3, #0
    1546:	d135      	bne.n	15b4 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    1548:	7813      	ldrb	r3, [r2, #0]
    154a:	2b80      	cmp	r3, #128	; 0x80
    154c:	d029      	beq.n	15a2 <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    154e:	061b      	lsls	r3, r3, #24
    1550:	2480      	movs	r4, #128	; 0x80
    1552:	0264      	lsls	r4, r4, #9
    1554:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    1556:	7854      	ldrb	r4, [r2, #1]
    1558:	2502      	movs	r5, #2
    155a:	43ac      	bics	r4, r5
    155c:	d106      	bne.n	156c <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    155e:	7894      	ldrb	r4, [r2, #2]
    1560:	2c00      	cmp	r4, #0
    1562:	d120      	bne.n	15a6 <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    1564:	2480      	movs	r4, #128	; 0x80
    1566:	02a4      	lsls	r4, r4, #10
    1568:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    156a:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    156c:	7854      	ldrb	r4, [r2, #1]
    156e:	3c01      	subs	r4, #1
    1570:	2c01      	cmp	r4, #1
    1572:	d91c      	bls.n	15ae <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1574:	040d      	lsls	r5, r1, #16
    1576:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1578:	24a0      	movs	r4, #160	; 0xa0
    157a:	05e4      	lsls	r4, r4, #23
    157c:	432c      	orrs	r4, r5
    157e:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1580:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1582:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1584:	24d0      	movs	r4, #208	; 0xd0
    1586:	0624      	lsls	r4, r4, #24
    1588:	432c      	orrs	r4, r5
    158a:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    158c:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    158e:	78d4      	ldrb	r4, [r2, #3]
    1590:	2c00      	cmp	r4, #0
    1592:	d122      	bne.n	15da <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    1594:	035b      	lsls	r3, r3, #13
    1596:	d51c      	bpl.n	15d2 <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    1598:	7893      	ldrb	r3, [r2, #2]
    159a:	2b01      	cmp	r3, #1
    159c:	d01e      	beq.n	15dc <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    159e:	6141      	str	r1, [r0, #20]
    15a0:	e017      	b.n	15d2 <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    15a2:	2300      	movs	r3, #0
    15a4:	e7d7      	b.n	1556 <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    15a6:	24c0      	movs	r4, #192	; 0xc0
    15a8:	02e4      	lsls	r4, r4, #11
    15aa:	4323      	orrs	r3, r4
    15ac:	e7dd      	b.n	156a <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    15ae:	4c0d      	ldr	r4, [pc, #52]	; (15e4 <_system_pinmux_config+0xa4>)
    15b0:	4023      	ands	r3, r4
    15b2:	e7df      	b.n	1574 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    15b4:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    15b6:	040c      	lsls	r4, r1, #16
    15b8:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    15ba:	23a0      	movs	r3, #160	; 0xa0
    15bc:	05db      	lsls	r3, r3, #23
    15be:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    15c0:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    15c2:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    15c4:	23d0      	movs	r3, #208	; 0xd0
    15c6:	061b      	lsls	r3, r3, #24
    15c8:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    15ca:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    15cc:	78d3      	ldrb	r3, [r2, #3]
    15ce:	2b00      	cmp	r3, #0
    15d0:	d103      	bne.n	15da <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    15d2:	7853      	ldrb	r3, [r2, #1]
    15d4:	3b01      	subs	r3, #1
    15d6:	2b01      	cmp	r3, #1
    15d8:	d902      	bls.n	15e0 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    15da:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    15dc:	6181      	str	r1, [r0, #24]
    15de:	e7f8      	b.n	15d2 <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    15e0:	6081      	str	r1, [r0, #8]
}
    15e2:	e7fa      	b.n	15da <_system_pinmux_config+0x9a>
    15e4:	fffbffff 	.word	0xfffbffff

000015e8 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    15e8:	b510      	push	{r4, lr}
    15ea:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    15ec:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    15ee:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    15f0:	2900      	cmp	r1, #0
    15f2:	d104      	bne.n	15fe <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    15f4:	0943      	lsrs	r3, r0, #5
    15f6:	01db      	lsls	r3, r3, #7
    15f8:	4905      	ldr	r1, [pc, #20]	; (1610 <system_pinmux_pin_set_config+0x28>)
    15fa:	468c      	mov	ip, r1
    15fc:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    15fe:	241f      	movs	r4, #31
    1600:	4020      	ands	r0, r4
    1602:	2101      	movs	r1, #1
    1604:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    1606:	0018      	movs	r0, r3
    1608:	4b02      	ldr	r3, [pc, #8]	; (1614 <system_pinmux_pin_set_config+0x2c>)
    160a:	4798      	blx	r3
}
    160c:	bd10      	pop	{r4, pc}
    160e:	46c0      	nop			; (mov r8, r8)
    1610:	41004400 	.word	0x41004400
    1614:	00001541 	.word	0x00001541

00001618 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    1618:	4770      	bx	lr
	...

0000161c <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    161c:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    161e:	4b05      	ldr	r3, [pc, #20]	; (1634 <system_init+0x18>)
    1620:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    1622:	4b05      	ldr	r3, [pc, #20]	; (1638 <system_init+0x1c>)
    1624:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    1626:	4b05      	ldr	r3, [pc, #20]	; (163c <system_init+0x20>)
    1628:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    162a:	4b05      	ldr	r3, [pc, #20]	; (1640 <system_init+0x24>)
    162c:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    162e:	4b05      	ldr	r3, [pc, #20]	; (1644 <system_init+0x28>)
    1630:	4798      	blx	r3


}
    1632:	bd10      	pop	{r4, pc}
    1634:	000011f1 	.word	0x000011f1
    1638:	00001035 	.word	0x00001035
    163c:	00000375 	.word	0x00000375
    1640:	00001619 	.word	0x00001619
    1644:	00001619 	.word	0x00001619

00001648 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    1648:	e7fe      	b.n	1648 <Dummy_Handler>
	...

0000164c <Reset_Handler>:
{
    164c:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
    164e:	4a1a      	ldr	r2, [pc, #104]	; (16b8 <Reset_Handler+0x6c>)
    1650:	4b1a      	ldr	r3, [pc, #104]	; (16bc <Reset_Handler+0x70>)
    1652:	429a      	cmp	r2, r3
    1654:	d011      	beq.n	167a <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    1656:	001a      	movs	r2, r3
    1658:	4b19      	ldr	r3, [pc, #100]	; (16c0 <Reset_Handler+0x74>)
    165a:	429a      	cmp	r2, r3
    165c:	d20d      	bcs.n	167a <Reset_Handler+0x2e>
    165e:	4a19      	ldr	r2, [pc, #100]	; (16c4 <Reset_Handler+0x78>)
    1660:	3303      	adds	r3, #3
    1662:	1a9b      	subs	r3, r3, r2
    1664:	089b      	lsrs	r3, r3, #2
    1666:	3301      	adds	r3, #1
    1668:	009b      	lsls	r3, r3, #2
    166a:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    166c:	4813      	ldr	r0, [pc, #76]	; (16bc <Reset_Handler+0x70>)
    166e:	4912      	ldr	r1, [pc, #72]	; (16b8 <Reset_Handler+0x6c>)
    1670:	588c      	ldr	r4, [r1, r2]
    1672:	5084      	str	r4, [r0, r2]
    1674:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    1676:	429a      	cmp	r2, r3
    1678:	d1fa      	bne.n	1670 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    167a:	4a13      	ldr	r2, [pc, #76]	; (16c8 <Reset_Handler+0x7c>)
    167c:	4b13      	ldr	r3, [pc, #76]	; (16cc <Reset_Handler+0x80>)
    167e:	429a      	cmp	r2, r3
    1680:	d20a      	bcs.n	1698 <Reset_Handler+0x4c>
    1682:	43d3      	mvns	r3, r2
    1684:	4911      	ldr	r1, [pc, #68]	; (16cc <Reset_Handler+0x80>)
    1686:	185b      	adds	r3, r3, r1
    1688:	2103      	movs	r1, #3
    168a:	438b      	bics	r3, r1
    168c:	3304      	adds	r3, #4
    168e:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    1690:	2100      	movs	r1, #0
    1692:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    1694:	4293      	cmp	r3, r2
    1696:	d1fc      	bne.n	1692 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    1698:	4a0d      	ldr	r2, [pc, #52]	; (16d0 <Reset_Handler+0x84>)
    169a:	21ff      	movs	r1, #255	; 0xff
    169c:	4b0d      	ldr	r3, [pc, #52]	; (16d4 <Reset_Handler+0x88>)
    169e:	438b      	bics	r3, r1
    16a0:	6093      	str	r3, [r2, #8]
        NVMCTRL->CTRLB.bit.MANW = 1;
    16a2:	4a0d      	ldr	r2, [pc, #52]	; (16d8 <Reset_Handler+0x8c>)
    16a4:	6853      	ldr	r3, [r2, #4]
    16a6:	397f      	subs	r1, #127	; 0x7f
    16a8:	430b      	orrs	r3, r1
    16aa:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    16ac:	4b0b      	ldr	r3, [pc, #44]	; (16dc <Reset_Handler+0x90>)
    16ae:	4798      	blx	r3
        main();
    16b0:	4b0b      	ldr	r3, [pc, #44]	; (16e0 <Reset_Handler+0x94>)
    16b2:	4798      	blx	r3
    16b4:	e7fe      	b.n	16b4 <Reset_Handler+0x68>
    16b6:	46c0      	nop			; (mov r8, r8)
    16b8:	00001994 	.word	0x00001994
    16bc:	20000000 	.word	0x20000000
    16c0:	20000020 	.word	0x20000020
    16c4:	20000004 	.word	0x20000004
    16c8:	20000020 	.word	0x20000020
    16cc:	20000338 	.word	0x20000338
    16d0:	e000ed00 	.word	0xe000ed00
    16d4:	00000000 	.word	0x00000000
    16d8:	41004000 	.word	0x41004000
    16dc:	000018c5 	.word	0x000018c5
    16e0:	000016e5 	.word	0x000016e5

000016e4 <main>:




int main (void)
{
    16e4:	b570      	push	{r4, r5, r6, lr}
    16e6:	b084      	sub	sp, #16
	system_init();
    16e8:	4b11      	ldr	r3, [pc, #68]	; (1730 <main+0x4c>)
    16ea:	4798      	blx	r3
	sys_config();
    16ec:	4b11      	ldr	r3, [pc, #68]	; (1734 <main+0x50>)
    16ee:	4798      	blx	r3
	timer_count = 0;
    16f0:	2200      	movs	r2, #0
    16f2:	4b11      	ldr	r3, [pc, #68]	; (1738 <main+0x54>)
    16f4:	601a      	str	r2, [r3, #0]

	Clear_Sleep_Timer();

	uint8_t string[] = "Hello World!\r\n";
    16f6:	4669      	mov	r1, sp
    16f8:	4b10      	ldr	r3, [pc, #64]	; (173c <main+0x58>)
    16fa:	466a      	mov	r2, sp
    16fc:	cb31      	ldmia	r3!, {r0, r4, r5}
    16fe:	c231      	stmia	r2!, {r0, r4, r5}
    1700:	8818      	ldrh	r0, [r3, #0]
    1702:	8010      	strh	r0, [r2, #0]
    1704:	789b      	ldrb	r3, [r3, #2]
    1706:	7093      	strb	r3, [r2, #2]
	usart_write_buffer_wait(&usart_instance, string, sizeof(string));
    1708:	220f      	movs	r2, #15
    170a:	480d      	ldr	r0, [pc, #52]	; (1740 <main+0x5c>)
    170c:	4b0d      	ldr	r3, [pc, #52]	; (1744 <main+0x60>)
    170e:	4798      	blx	r3

	while(1)
	{

		usart_read_buffer_job(&usart_instance, &ch_buffer, MAX_UART_BUFFER_LENGTH);
    1710:	4d0d      	ldr	r5, [pc, #52]	; (1748 <main+0x64>)
    1712:	4c0b      	ldr	r4, [pc, #44]	; (1740 <main+0x5c>)
    1714:	4e0d      	ldr	r6, [pc, #52]	; (174c <main+0x68>)
    1716:	2296      	movs	r2, #150	; 0x96
    1718:	0092      	lsls	r2, r2, #2
    171a:	0029      	movs	r1, r5
    171c:	0020      	movs	r0, r4
    171e:	47b0      	blx	r6
		delay_ms(500);
    1720:	20fa      	movs	r0, #250	; 0xfa
    1722:	0040      	lsls	r0, r0, #1
    1724:	4b0a      	ldr	r3, [pc, #40]	; (1750 <main+0x6c>)
    1726:	4798      	blx	r3
		UART_Continuous();
    1728:	4b0a      	ldr	r3, [pc, #40]	; (1754 <main+0x70>)
    172a:	4798      	blx	r3
    172c:	e7f3      	b.n	1716 <main+0x32>
    172e:	46c0      	nop			; (mov r8, r8)
    1730:	0000161d 	.word	0x0000161d
    1734:	00000f41 	.word	0x00000f41
    1738:	20000334 	.word	0x20000334
    173c:	00001964 	.word	0x00001964
    1740:	2000009c 	.word	0x2000009c
    1744:	00000b39 	.word	0x00000b39
    1748:	20000098 	.word	0x20000098
    174c:	00000c51 	.word	0x00000c51
    1750:	00001009 	.word	0x00001009
    1754:	00000859 	.word	0x00000859

00001758 <__udivsi3>:
    1758:	2200      	movs	r2, #0
    175a:	0843      	lsrs	r3, r0, #1
    175c:	428b      	cmp	r3, r1
    175e:	d374      	bcc.n	184a <__udivsi3+0xf2>
    1760:	0903      	lsrs	r3, r0, #4
    1762:	428b      	cmp	r3, r1
    1764:	d35f      	bcc.n	1826 <__udivsi3+0xce>
    1766:	0a03      	lsrs	r3, r0, #8
    1768:	428b      	cmp	r3, r1
    176a:	d344      	bcc.n	17f6 <__udivsi3+0x9e>
    176c:	0b03      	lsrs	r3, r0, #12
    176e:	428b      	cmp	r3, r1
    1770:	d328      	bcc.n	17c4 <__udivsi3+0x6c>
    1772:	0c03      	lsrs	r3, r0, #16
    1774:	428b      	cmp	r3, r1
    1776:	d30d      	bcc.n	1794 <__udivsi3+0x3c>
    1778:	22ff      	movs	r2, #255	; 0xff
    177a:	0209      	lsls	r1, r1, #8
    177c:	ba12      	rev	r2, r2
    177e:	0c03      	lsrs	r3, r0, #16
    1780:	428b      	cmp	r3, r1
    1782:	d302      	bcc.n	178a <__udivsi3+0x32>
    1784:	1212      	asrs	r2, r2, #8
    1786:	0209      	lsls	r1, r1, #8
    1788:	d065      	beq.n	1856 <__udivsi3+0xfe>
    178a:	0b03      	lsrs	r3, r0, #12
    178c:	428b      	cmp	r3, r1
    178e:	d319      	bcc.n	17c4 <__udivsi3+0x6c>
    1790:	e000      	b.n	1794 <__udivsi3+0x3c>
    1792:	0a09      	lsrs	r1, r1, #8
    1794:	0bc3      	lsrs	r3, r0, #15
    1796:	428b      	cmp	r3, r1
    1798:	d301      	bcc.n	179e <__udivsi3+0x46>
    179a:	03cb      	lsls	r3, r1, #15
    179c:	1ac0      	subs	r0, r0, r3
    179e:	4152      	adcs	r2, r2
    17a0:	0b83      	lsrs	r3, r0, #14
    17a2:	428b      	cmp	r3, r1
    17a4:	d301      	bcc.n	17aa <__udivsi3+0x52>
    17a6:	038b      	lsls	r3, r1, #14
    17a8:	1ac0      	subs	r0, r0, r3
    17aa:	4152      	adcs	r2, r2
    17ac:	0b43      	lsrs	r3, r0, #13
    17ae:	428b      	cmp	r3, r1
    17b0:	d301      	bcc.n	17b6 <__udivsi3+0x5e>
    17b2:	034b      	lsls	r3, r1, #13
    17b4:	1ac0      	subs	r0, r0, r3
    17b6:	4152      	adcs	r2, r2
    17b8:	0b03      	lsrs	r3, r0, #12
    17ba:	428b      	cmp	r3, r1
    17bc:	d301      	bcc.n	17c2 <__udivsi3+0x6a>
    17be:	030b      	lsls	r3, r1, #12
    17c0:	1ac0      	subs	r0, r0, r3
    17c2:	4152      	adcs	r2, r2
    17c4:	0ac3      	lsrs	r3, r0, #11
    17c6:	428b      	cmp	r3, r1
    17c8:	d301      	bcc.n	17ce <__udivsi3+0x76>
    17ca:	02cb      	lsls	r3, r1, #11
    17cc:	1ac0      	subs	r0, r0, r3
    17ce:	4152      	adcs	r2, r2
    17d0:	0a83      	lsrs	r3, r0, #10
    17d2:	428b      	cmp	r3, r1
    17d4:	d301      	bcc.n	17da <__udivsi3+0x82>
    17d6:	028b      	lsls	r3, r1, #10
    17d8:	1ac0      	subs	r0, r0, r3
    17da:	4152      	adcs	r2, r2
    17dc:	0a43      	lsrs	r3, r0, #9
    17de:	428b      	cmp	r3, r1
    17e0:	d301      	bcc.n	17e6 <__udivsi3+0x8e>
    17e2:	024b      	lsls	r3, r1, #9
    17e4:	1ac0      	subs	r0, r0, r3
    17e6:	4152      	adcs	r2, r2
    17e8:	0a03      	lsrs	r3, r0, #8
    17ea:	428b      	cmp	r3, r1
    17ec:	d301      	bcc.n	17f2 <__udivsi3+0x9a>
    17ee:	020b      	lsls	r3, r1, #8
    17f0:	1ac0      	subs	r0, r0, r3
    17f2:	4152      	adcs	r2, r2
    17f4:	d2cd      	bcs.n	1792 <__udivsi3+0x3a>
    17f6:	09c3      	lsrs	r3, r0, #7
    17f8:	428b      	cmp	r3, r1
    17fa:	d301      	bcc.n	1800 <__udivsi3+0xa8>
    17fc:	01cb      	lsls	r3, r1, #7
    17fe:	1ac0      	subs	r0, r0, r3
    1800:	4152      	adcs	r2, r2
    1802:	0983      	lsrs	r3, r0, #6
    1804:	428b      	cmp	r3, r1
    1806:	d301      	bcc.n	180c <__udivsi3+0xb4>
    1808:	018b      	lsls	r3, r1, #6
    180a:	1ac0      	subs	r0, r0, r3
    180c:	4152      	adcs	r2, r2
    180e:	0943      	lsrs	r3, r0, #5
    1810:	428b      	cmp	r3, r1
    1812:	d301      	bcc.n	1818 <__udivsi3+0xc0>
    1814:	014b      	lsls	r3, r1, #5
    1816:	1ac0      	subs	r0, r0, r3
    1818:	4152      	adcs	r2, r2
    181a:	0903      	lsrs	r3, r0, #4
    181c:	428b      	cmp	r3, r1
    181e:	d301      	bcc.n	1824 <__udivsi3+0xcc>
    1820:	010b      	lsls	r3, r1, #4
    1822:	1ac0      	subs	r0, r0, r3
    1824:	4152      	adcs	r2, r2
    1826:	08c3      	lsrs	r3, r0, #3
    1828:	428b      	cmp	r3, r1
    182a:	d301      	bcc.n	1830 <__udivsi3+0xd8>
    182c:	00cb      	lsls	r3, r1, #3
    182e:	1ac0      	subs	r0, r0, r3
    1830:	4152      	adcs	r2, r2
    1832:	0883      	lsrs	r3, r0, #2
    1834:	428b      	cmp	r3, r1
    1836:	d301      	bcc.n	183c <__udivsi3+0xe4>
    1838:	008b      	lsls	r3, r1, #2
    183a:	1ac0      	subs	r0, r0, r3
    183c:	4152      	adcs	r2, r2
    183e:	0843      	lsrs	r3, r0, #1
    1840:	428b      	cmp	r3, r1
    1842:	d301      	bcc.n	1848 <__udivsi3+0xf0>
    1844:	004b      	lsls	r3, r1, #1
    1846:	1ac0      	subs	r0, r0, r3
    1848:	4152      	adcs	r2, r2
    184a:	1a41      	subs	r1, r0, r1
    184c:	d200      	bcs.n	1850 <__udivsi3+0xf8>
    184e:	4601      	mov	r1, r0
    1850:	4152      	adcs	r2, r2
    1852:	4610      	mov	r0, r2
    1854:	4770      	bx	lr
    1856:	e7ff      	b.n	1858 <__udivsi3+0x100>
    1858:	b501      	push	{r0, lr}
    185a:	2000      	movs	r0, #0
    185c:	f000 f806 	bl	186c <__aeabi_idiv0>
    1860:	bd02      	pop	{r1, pc}
    1862:	46c0      	nop			; (mov r8, r8)

00001864 <__aeabi_uidivmod>:
    1864:	2900      	cmp	r1, #0
    1866:	d0f7      	beq.n	1858 <__udivsi3+0x100>
    1868:	e776      	b.n	1758 <__udivsi3>
    186a:	4770      	bx	lr

0000186c <__aeabi_idiv0>:
    186c:	4770      	bx	lr
    186e:	46c0      	nop			; (mov r8, r8)

00001870 <__aeabi_lmul>:
    1870:	b5f0      	push	{r4, r5, r6, r7, lr}
    1872:	46ce      	mov	lr, r9
    1874:	4647      	mov	r7, r8
    1876:	0415      	lsls	r5, r2, #16
    1878:	0c2d      	lsrs	r5, r5, #16
    187a:	002e      	movs	r6, r5
    187c:	b580      	push	{r7, lr}
    187e:	0407      	lsls	r7, r0, #16
    1880:	0c14      	lsrs	r4, r2, #16
    1882:	0c3f      	lsrs	r7, r7, #16
    1884:	4699      	mov	r9, r3
    1886:	0c03      	lsrs	r3, r0, #16
    1888:	437e      	muls	r6, r7
    188a:	435d      	muls	r5, r3
    188c:	4367      	muls	r7, r4
    188e:	4363      	muls	r3, r4
    1890:	197f      	adds	r7, r7, r5
    1892:	0c34      	lsrs	r4, r6, #16
    1894:	19e4      	adds	r4, r4, r7
    1896:	469c      	mov	ip, r3
    1898:	42a5      	cmp	r5, r4
    189a:	d903      	bls.n	18a4 <__aeabi_lmul+0x34>
    189c:	2380      	movs	r3, #128	; 0x80
    189e:	025b      	lsls	r3, r3, #9
    18a0:	4698      	mov	r8, r3
    18a2:	44c4      	add	ip, r8
    18a4:	464b      	mov	r3, r9
    18a6:	4351      	muls	r1, r2
    18a8:	4343      	muls	r3, r0
    18aa:	0436      	lsls	r6, r6, #16
    18ac:	0c36      	lsrs	r6, r6, #16
    18ae:	0c25      	lsrs	r5, r4, #16
    18b0:	0424      	lsls	r4, r4, #16
    18b2:	4465      	add	r5, ip
    18b4:	19a4      	adds	r4, r4, r6
    18b6:	1859      	adds	r1, r3, r1
    18b8:	1949      	adds	r1, r1, r5
    18ba:	0020      	movs	r0, r4
    18bc:	bc0c      	pop	{r2, r3}
    18be:	4690      	mov	r8, r2
    18c0:	4699      	mov	r9, r3
    18c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000018c4 <__libc_init_array>:
    18c4:	b570      	push	{r4, r5, r6, lr}
    18c6:	2600      	movs	r6, #0
    18c8:	4d0c      	ldr	r5, [pc, #48]	; (18fc <__libc_init_array+0x38>)
    18ca:	4c0d      	ldr	r4, [pc, #52]	; (1900 <__libc_init_array+0x3c>)
    18cc:	1b64      	subs	r4, r4, r5
    18ce:	10a4      	asrs	r4, r4, #2
    18d0:	42a6      	cmp	r6, r4
    18d2:	d109      	bne.n	18e8 <__libc_init_array+0x24>
    18d4:	2600      	movs	r6, #0
    18d6:	f000 f84d 	bl	1974 <_init>
    18da:	4d0a      	ldr	r5, [pc, #40]	; (1904 <__libc_init_array+0x40>)
    18dc:	4c0a      	ldr	r4, [pc, #40]	; (1908 <__libc_init_array+0x44>)
    18de:	1b64      	subs	r4, r4, r5
    18e0:	10a4      	asrs	r4, r4, #2
    18e2:	42a6      	cmp	r6, r4
    18e4:	d105      	bne.n	18f2 <__libc_init_array+0x2e>
    18e6:	bd70      	pop	{r4, r5, r6, pc}
    18e8:	00b3      	lsls	r3, r6, #2
    18ea:	58eb      	ldr	r3, [r5, r3]
    18ec:	4798      	blx	r3
    18ee:	3601      	adds	r6, #1
    18f0:	e7ee      	b.n	18d0 <__libc_init_array+0xc>
    18f2:	00b3      	lsls	r3, r6, #2
    18f4:	58eb      	ldr	r3, [r5, r3]
    18f6:	4798      	blx	r3
    18f8:	3601      	adds	r6, #1
    18fa:	e7f2      	b.n	18e2 <__libc_init_array+0x1e>
    18fc:	00001980 	.word	0x00001980
    1900:	00001980 	.word	0x00001980
    1904:	00001980 	.word	0x00001980
    1908:	00001984 	.word	0x00001984
    190c:	42000800 	.word	0x42000800
    1910:	42000c00 	.word	0x42000c00
    1914:	42001000 	.word	0x42001000
    1918:	42001400 	.word	0x42001400
    191c:	42001800 	.word	0x42001800
    1920:	42001c00 	.word	0x42001c00
    1924:	000010ba 	.word	0x000010ba
    1928:	000010b6 	.word	0x000010b6
    192c:	000010b6 	.word	0x000010b6
    1930:	00001106 	.word	0x00001106
    1934:	00001106 	.word	0x00001106
    1938:	000010ce 	.word	0x000010ce
    193c:	000010c0 	.word	0x000010c0
    1940:	000010d4 	.word	0x000010d4
    1944:	0000118c 	.word	0x0000118c
    1948:	0000116c 	.word	0x0000116c
    194c:	0000116c 	.word	0x0000116c
    1950:	000011dc 	.word	0x000011dc
    1954:	0000117e 	.word	0x0000117e
    1958:	0000119a 	.word	0x0000119a
    195c:	00001170 	.word	0x00001170
    1960:	000011a8 	.word	0x000011a8
    1964:	6c6c6548 	.word	0x6c6c6548
    1968:	6f57206f 	.word	0x6f57206f
    196c:	21646c72 	.word	0x21646c72
    1970:	00000a0d 	.word	0x00000a0d

00001974 <_init>:
    1974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1976:	46c0      	nop			; (mov r8, r8)
    1978:	bcf8      	pop	{r3, r4, r5, r6, r7}
    197a:	bc08      	pop	{r3}
    197c:	469e      	mov	lr, r3
    197e:	4770      	bx	lr

00001980 <__init_array_start>:
    1980:	000000cd 	.word	0x000000cd

00001984 <_fini>:
    1984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1986:	46c0      	nop			; (mov r8, r8)
    1988:	bcf8      	pop	{r3, r4, r5, r6, r7}
    198a:	bc08      	pop	{r3}
    198c:	469e      	mov	lr, r3
    198e:	4770      	bx	lr

00001990 <__fini_array_start>:
    1990:	000000a5 	.word	0x000000a5
