
SAMD20_MotorControl.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001994  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000044  20000000  00001994  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000370  20000044  000019d8  00020044  2**2
                  ALLOC
  3 .stack        00002004  200003b4  00001d48  00020044  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
  6 .debug_info   0002c57f  00000000  00000000  000200c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000047b7  00000000  00000000  0004c644  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00004dc4  00000000  00000000  00050dfb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000640  00000000  00000000  00055bbf  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000640  00000000  00000000  000561ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00007ccf  00000000  00000000  0005683f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000f698  00000000  00000000  0005e50e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000609f3  00000000  00000000  0006dba6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00000e54  00000000  00000000  000ce59c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
 * @return				- void
 *
 * @note				- ToDo: Is SERCOM3  OK for this, or will it interfere with i2c?
 ******************************************************************************************************/
void config_encUART(void)
{
       0:	b8 23 00 20 ed 15 00 00 e9 15 00 00 e9 15 00 00     .#. ............
	...
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
      2c:	e9 15 00 00 00 00 00 00 00 00 00 00 e9 15 00 00     ................
	config->parity           = USART_PARITY_NONE;
	config->stopbits         = USART_STOPBITS_1;
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
	config->baudrate         = 9600;
	config->receiver_enable  = true;
	config->transmitter_enable = true;
      3c:	01 0e 00 00 e9 15 00 00 e9 15 00 00 39 02 00 00     ............9...
	writeStr(statusMsg, sizeof(statusMsg));			//uart debug statement
	
	struct usart_config config_usart;
	usart_get_config_defaults(&config_usart);

	config_usart.baudrate    = 115200;						// boosted this above 115200 to overcome a ~10% latency issue
      4c:	e9 15 00 00 e9 15 00 00 e9 15 00 00 39 03 00 00     ............9...
	config_usart.mux_setting = USART_RX_3_TX_2_XCK_3;
	config_usart.pinmux_pad0 = PINMUX_UNUSED;
	config_usart.pinmux_pad1 = PINMUX_UNUSED;
	config_usart.pinmux_pad2 = PINMUX_PA24C_SERCOM3_PAD2;	// PA24 = TX ENC_B
      5c:	91 0d 00 00 a1 0d 00 00 b1 0d 00 00 c1 0d 00 00     ................
	config_usart.pinmux_pad3 = PINMUX_PA25C_SERCOM3_PAD3;	// PA25 = RX ENC_A
	
	while (usart_init(&usart_instance, SERCOM3, &config_usart) != STATUS_OK)
      6c:	d1 0d 00 00 e1 0d 00 00 b9 02 00 00 c9 02 00 00     ................
	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
      7c:	d9 02 00 00 e9 02 00 00 f9 02 00 00 09 03 00 00     ................
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
      8c:	19 03 00 00 29 03 00 00 e9 15 00 00 e9 15 00 00     ....)...........

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
      9c:	e9 15 00 00 e9 15 00 00                             ........

000000a4 <__do_global_dtors_aux>:
	{
		__ASM volatile ("nop");
	}

	usart_enable(&usart_instance);
}
      a4:	b510      	push	{r4, lr}
      a6:	4c06      	ldr	r4, [pc, #24]	; (c0 <__do_global_dtors_aux+0x1c>)
      a8:	7823      	ldrb	r3, [r4, #0]
      aa:	2b00      	cmp	r3, #0
      ac:	d107      	bne.n	be <__do_global_dtors_aux+0x1a>
      ae:	4b05      	ldr	r3, [pc, #20]	; (c4 <__do_global_dtors_aux+0x20>)
      b0:	2b00      	cmp	r3, #0
      b2:	d002      	beq.n	ba <__do_global_dtors_aux+0x16>
      b4:	4804      	ldr	r0, [pc, #16]	; (c8 <__do_global_dtors_aux+0x24>)
      b6:	e000      	b.n	ba <__do_global_dtors_aux+0x16>
      b8:	bf00      	nop
      ba:	2301      	movs	r3, #1
      bc:	7023      	strb	r3, [r4, #0]
      be:	bd10      	pop	{r4, pc}
      c0:	20000044 	.word	0x20000044
      c4:	00000000 	.word	0x00000000
      c8:	00001994 	.word	0x00001994

000000cc <frame_dummy>:
      cc:	4b08      	ldr	r3, [pc, #32]	; (f0 <frame_dummy+0x24>)
      ce:	b510      	push	{r4, lr}
      d0:	2b00      	cmp	r3, #0
      d2:	d003      	beq.n	dc <frame_dummy+0x10>
      d4:	4907      	ldr	r1, [pc, #28]	; (f4 <frame_dummy+0x28>)
      d6:	4808      	ldr	r0, [pc, #32]	; (f8 <frame_dummy+0x2c>)
      d8:	e000      	b.n	dc <frame_dummy+0x10>
      da:	bf00      	nop
      dc:	4807      	ldr	r0, [pc, #28]	; (fc <frame_dummy+0x30>)
      de:	6803      	ldr	r3, [r0, #0]
      e0:	2b00      	cmp	r3, #0
      e2:	d100      	bne.n	e6 <frame_dummy+0x1a>
      e4:	bd10      	pop	{r4, pc}
      e6:	4b06      	ldr	r3, [pc, #24]	; (100 <frame_dummy+0x34>)
      e8:	2b00      	cmp	r3, #0
      ea:	d0fb      	beq.n	e4 <frame_dummy+0x18>
      ec:	4798      	blx	r3
      ee:	e7f9      	b.n	e4 <frame_dummy+0x18>
      f0:	00000000 	.word	0x00000000
      f4:	20000048 	.word	0x20000048
      f8:	00001994 	.word	0x00001994
      fc:	00001994 	.word	0x00001994
     100:	00000000 	.word	0x00000000

00000104 <wdt_set_config>:
	return STATUS_OK;
}
#else
enum status_code wdt_set_config(
		const struct wdt_conf *const config)
{
     104:	b510      	push	{r4, lr}
     106:	b082      	sub	sp, #8
     108:	0004      	movs	r4, r0
		const enum system_clock_apb_bus bus,
		const uint32_t mask)
{
	switch (bus) {
		case SYSTEM_CLOCK_APB_APBA:
			PM->APBAMASK.reg |= mask;
     10a:	4a39      	ldr	r2, [pc, #228]	; (1f0 <wdt_set_config+0xec>)
     10c:	6993      	ldr	r3, [r2, #24]
     10e:	2110      	movs	r1, #16
     110:	430b      	orrs	r3, r1
     112:	6193      	str	r3, [r2, #24]
	Wdt *const WDT_module = WDT;

#if (SAML21) || (SAML22) || (SAMC20) || (SAMC21) || (SAMR30)
	return (WDT_module->CTRLA.reg & WDT_CTRLA_ALWAYSON);
#else
	return (WDT_module->CTRL.reg & WDT_CTRL_ALWAYSON);
     114:	4b37      	ldr	r3, [pc, #220]	; (1f4 <wdt_set_config+0xf0>)
     116:	781b      	ldrb	r3, [r3, #0]

	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_WDT);

	/* Check of the Watchdog has been locked to be always on, if so, abort */
	if (wdt_is_locked()) {
     118:	b25b      	sxtb	r3, r3
		return STATUS_ERR_IO;
     11a:	2010      	movs	r0, #16
	if (wdt_is_locked()) {
     11c:	2b00      	cmp	r3, #0
     11e:	db03      	blt.n	128 <wdt_set_config+0x24>
	}

	/* Check for an invalid timeout period, abort if found */
	if (config->timeout_period == WDT_PERIOD_NONE) {
     120:	78e3      	ldrb	r3, [r4, #3]
		return STATUS_ERR_INVALID_ARG;
     122:	3007      	adds	r0, #7
	if (config->timeout_period == WDT_PERIOD_NONE) {
     124:	2b00      	cmp	r3, #0
     126:	d101      	bne.n	12c <wdt_set_config+0x28>
	while (wdt_is_syncing()) {
		/* Wait for all hardware modules to complete synchronization */
	}

	return STATUS_OK;
}
     128:	b002      	add	sp, #8
     12a:	bd10      	pop	{r4, pc}
	if ((config->timeout_period < config->window_period) ||
     12c:	7922      	ldrb	r2, [r4, #4]
     12e:	429a      	cmp	r2, r3
     130:	d8fa      	bhi.n	128 <wdt_set_config+0x24>
     132:	7962      	ldrb	r2, [r4, #5]
     134:	429a      	cmp	r2, r3
     136:	d8f7      	bhi.n	128 <wdt_set_config+0x24>
	WDT_module->CTRL.reg &= ~WDT_CTRL_ENABLE;
     138:	4a2e      	ldr	r2, [pc, #184]	; (1f4 <wdt_set_config+0xf0>)
     13a:	7813      	ldrb	r3, [r2, #0]
     13c:	390e      	subs	r1, #14
     13e:	438b      	bics	r3, r1
     140:	7013      	strb	r3, [r2, #0]
	if (WDT_module->STATUS.reg & WDT_STATUS_SYNCBUSY) {
     142:	79d3      	ldrb	r3, [r2, #7]
	while (wdt_is_syncing()) {
     144:	b25b      	sxtb	r3, r3
     146:	2b00      	cmp	r3, #0
     148:	dbfb      	blt.n	142 <wdt_set_config+0x3e>
	if(config->enable == false) {
     14a:	7863      	ldrb	r3, [r4, #1]
		return STATUS_OK;
     14c:	2000      	movs	r0, #0
	if(config->enable == false) {
     14e:	2b00      	cmp	r3, #0
     150:	d0ea      	beq.n	128 <wdt_set_config+0x24>
	gclk_chan_conf.source_generator = config->clock_source;
     152:	a901      	add	r1, sp, #4
     154:	78a3      	ldrb	r3, [r4, #2]
     156:	700b      	strb	r3, [r1, #0]
	system_gclk_chan_set_config(WDT_GCLK_ID, &gclk_chan_conf);
     158:	3001      	adds	r0, #1
     15a:	4b27      	ldr	r3, [pc, #156]	; (1f8 <wdt_set_config+0xf4>)
     15c:	4798      	blx	r3
	system_gclk_chan_enable(WDT_GCLK_ID);
     15e:	2001      	movs	r0, #1
     160:	4b26      	ldr	r3, [pc, #152]	; (1fc <wdt_set_config+0xf8>)
     162:	4798      	blx	r3
	if (config->always_on) {
     164:	7823      	ldrb	r3, [r4, #0]
     166:	2b00      	cmp	r3, #0
     168:	d127      	bne.n	1ba <wdt_set_config+0xb6>
	new_config |= (config->timeout_period - 1) << WDT_CONFIG_PER_Pos;
     16a:	78e3      	ldrb	r3, [r4, #3]
     16c:	3b01      	subs	r3, #1
	if (config->window_period != WDT_PERIOD_NONE) {
     16e:	7922      	ldrb	r2, [r4, #4]
     170:	2a00      	cmp	r2, #0
     172:	d026      	beq.n	1c2 <wdt_set_config+0xbe>
		WDT_module->CTRL.reg |= WDT_CTRL_WEN;
     174:	491f      	ldr	r1, [pc, #124]	; (1f4 <wdt_set_config+0xf0>)
     176:	780a      	ldrb	r2, [r1, #0]
     178:	2004      	movs	r0, #4
     17a:	4302      	orrs	r2, r0
     17c:	700a      	strb	r2, [r1, #0]
		new_config |= (config->window_period - 1) << WDT_CONFIG_WINDOW_Pos;
     17e:	7922      	ldrb	r2, [r4, #4]
     180:	3a01      	subs	r2, #1
     182:	4082      	lsls	r2, r0
     184:	4313      	orrs	r3, r2
     186:	491b      	ldr	r1, [pc, #108]	; (1f4 <wdt_set_config+0xf0>)
     188:	79ca      	ldrb	r2, [r1, #7]
	while (wdt_is_syncing()) {
     18a:	b252      	sxtb	r2, r2
     18c:	2a00      	cmp	r2, #0
     18e:	dbfb      	blt.n	188 <wdt_set_config+0x84>
	WDT_module->CONFIG.reg = new_config;
     190:	b2db      	uxtb	r3, r3
     192:	4a18      	ldr	r2, [pc, #96]	; (1f4 <wdt_set_config+0xf0>)
     194:	7053      	strb	r3, [r2, #1]
	if (config->early_warning_period != WDT_PERIOD_NONE) {
     196:	7963      	ldrb	r3, [r4, #5]
     198:	2b00      	cmp	r3, #0
     19a:	d118      	bne.n	1ce <wdt_set_config+0xca>
	if (config->always_on) {
     19c:	7823      	ldrb	r3, [r4, #0]
     19e:	2b00      	cmp	r3, #0
     1a0:	d01f      	beq.n	1e2 <wdt_set_config+0xde>
		WDT_module->CTRL.reg |= WDT_CTRL_ALWAYSON;
     1a2:	4a14      	ldr	r2, [pc, #80]	; (1f4 <wdt_set_config+0xf0>)
     1a4:	7813      	ldrb	r3, [r2, #0]
     1a6:	2180      	movs	r1, #128	; 0x80
     1a8:	430b      	orrs	r3, r1
     1aa:	7013      	strb	r3, [r2, #0]
     1ac:	4a11      	ldr	r2, [pc, #68]	; (1f4 <wdt_set_config+0xf0>)
     1ae:	79d3      	ldrb	r3, [r2, #7]
	while (wdt_is_syncing()) {
     1b0:	b25b      	sxtb	r3, r3
     1b2:	2b00      	cmp	r3, #0
     1b4:	dbfb      	blt.n	1ae <wdt_set_config+0xaa>
	return STATUS_OK;
     1b6:	2000      	movs	r0, #0
     1b8:	e7b6      	b.n	128 <wdt_set_config+0x24>
		system_gclk_chan_lock(WDT_GCLK_ID);
     1ba:	2001      	movs	r0, #1
     1bc:	4b10      	ldr	r3, [pc, #64]	; (200 <wdt_set_config+0xfc>)
     1be:	4798      	blx	r3
     1c0:	e7d3      	b.n	16a <wdt_set_config+0x66>
		WDT_module->CTRL.reg &= ~WDT_CTRL_WEN;
     1c2:	490c      	ldr	r1, [pc, #48]	; (1f4 <wdt_set_config+0xf0>)
     1c4:	780a      	ldrb	r2, [r1, #0]
     1c6:	2004      	movs	r0, #4
     1c8:	4382      	bics	r2, r0
     1ca:	700a      	strb	r2, [r1, #0]
     1cc:	e7db      	b.n	186 <wdt_set_config+0x82>
     1ce:	0011      	movs	r1, r2
     1d0:	79ca      	ldrb	r2, [r1, #7]
		while (wdt_is_syncing()) {
     1d2:	b252      	sxtb	r2, r2
     1d4:	2a00      	cmp	r2, #0
     1d6:	dbfb      	blt.n	1d0 <wdt_set_config+0xcc>
			= (config->early_warning_period - 1) << WDT_EWCTRL_EWOFFSET_Pos;
     1d8:	3b01      	subs	r3, #1
     1da:	b2db      	uxtb	r3, r3
     1dc:	4a05      	ldr	r2, [pc, #20]	; (1f4 <wdt_set_config+0xf0>)
     1de:	7093      	strb	r3, [r2, #2]
     1e0:	e7dc      	b.n	19c <wdt_set_config+0x98>
		WDT_module->CTRL.reg |= WDT_CTRL_ENABLE;
     1e2:	4a04      	ldr	r2, [pc, #16]	; (1f4 <wdt_set_config+0xf0>)
     1e4:	7813      	ldrb	r3, [r2, #0]
     1e6:	2102      	movs	r1, #2
     1e8:	430b      	orrs	r3, r1
     1ea:	7013      	strb	r3, [r2, #0]
     1ec:	e7de      	b.n	1ac <wdt_set_config+0xa8>
     1ee:	46c0      	nop			; (mov r8, r8)
     1f0:	40000400 	.word	0x40000400
     1f4:	40001000 	.word	0x40001000
     1f8:	00001461 	.word	0x00001461
     1fc:	000013d5 	.word	0x000013d5
     200:	0000147d 	.word	0x0000147d

00000204 <wdt_register_callback>:
		const enum wdt_callback type)
{
	/* Sanity check arguments */
	Assert(callback);

	switch (type)
     204:	2900      	cmp	r1, #0
     206:	d001      	beq.n	20c <wdt_register_callback+0x8>
	case WDT_CALLBACK_EARLY_WARNING:
		wdt_early_warning_callback = callback;
		return STATUS_OK;
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     208:	2017      	movs	r0, #23
	}
}
     20a:	4770      	bx	lr
		wdt_early_warning_callback = callback;
     20c:	4b01      	ldr	r3, [pc, #4]	; (214 <wdt_register_callback+0x10>)
     20e:	6018      	str	r0, [r3, #0]
		return STATUS_OK;
     210:	2000      	movs	r0, #0
     212:	e7fa      	b.n	20a <wdt_register_callback+0x6>
     214:	20000098 	.word	0x20000098

00000218 <wdt_enable_callback>:
enum status_code wdt_enable_callback(
		const enum wdt_callback type)
{
	Wdt *const WDT_module = WDT;

	switch (type)
     218:	2800      	cmp	r0, #0
     21a:	d001      	beq.n	220 <wdt_enable_callback+0x8>
		WDT_module->INTENSET.reg = WDT_INTENSET_EW;
		system_interrupt_enable(SYSTEM_INTERRUPT_MODULE_WDT);
		return STATUS_OK;
	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     21c:	2017      	movs	r0, #23
	}
}
     21e:	4770      	bx	lr
		WDT_module->INTENSET.reg = WDT_INTENSET_EW;
     220:	2201      	movs	r2, #1
     222:	4b03      	ldr	r3, [pc, #12]	; (230 <wdt_enable_callback+0x18>)
     224:	715a      	strb	r2, [r3, #5]
     226:	3203      	adds	r2, #3
     228:	4b02      	ldr	r3, [pc, #8]	; (234 <wdt_enable_callback+0x1c>)
     22a:	601a      	str	r2, [r3, #0]
		return STATUS_OK;
     22c:	e7f7      	b.n	21e <wdt_enable_callback+0x6>
     22e:	46c0      	nop			; (mov r8, r8)
     230:	40001000 	.word	0x40001000
     234:	e000e100 	.word	0xe000e100

00000238 <WDT_Handler>:
	}
}

/** Handler for the WDT hardware module interrupt. */
void WDT_Handler(void)
{
     238:	b510      	push	{r4, lr}
 */
static inline void wdt_clear_early_warning(void)
{
	Wdt *const WDT_module = WDT;

	WDT_module->INTFLAG.reg = WDT_INTFLAG_EW;
     23a:	2201      	movs	r2, #1
     23c:	4b03      	ldr	r3, [pc, #12]	; (24c <WDT_Handler+0x14>)
     23e:	719a      	strb	r2, [r3, #6]
	wdt_clear_early_warning();

	if (wdt_early_warning_callback) {
     240:	4b03      	ldr	r3, [pc, #12]	; (250 <WDT_Handler+0x18>)
     242:	681b      	ldr	r3, [r3, #0]
     244:	2b00      	cmp	r3, #0
     246:	d000      	beq.n	24a <WDT_Handler+0x12>
		wdt_early_warning_callback();
     248:	4798      	blx	r3
	}
}
     24a:	bd10      	pop	{r4, pc}
     24c:	40001000 	.word	0x40001000
     250:	20000098 	.word	0x20000098

00000254 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
     254:	b570      	push	{r4, r5, r6, lr}
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
     256:	0080      	lsls	r0, r0, #2
     258:	4b16      	ldr	r3, [pc, #88]	; (2b4 <_tc_interrupt_handler+0x60>)
     25a:	58c4      	ldr	r4, [r0, r3]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
     25c:	6823      	ldr	r3, [r4, #0]
     25e:	7b9d      	ldrb	r5, [r3, #14]
     260:	7e22      	ldrb	r2, [r4, #24]
     262:	7e63      	ldrb	r3, [r4, #25]
     264:	4013      	ands	r3, r2
     266:	401d      	ands	r5, r3
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
     268:	07eb      	lsls	r3, r5, #31
     26a:	d406      	bmi.n	27a <_tc_interrupt_handler+0x26>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
     26c:	07ab      	lsls	r3, r5, #30
     26e:	d40b      	bmi.n	288 <_tc_interrupt_handler+0x34>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
     270:	06eb      	lsls	r3, r5, #27
     272:	d410      	bmi.n	296 <_tc_interrupt_handler+0x42>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
     274:	06ab      	lsls	r3, r5, #26
     276:	d415      	bmi.n	2a4 <_tc_interrupt_handler+0x50>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
	}
}
     278:	bd70      	pop	{r4, r5, r6, pc}
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
     27a:	0020      	movs	r0, r4
     27c:	68a3      	ldr	r3, [r4, #8]
     27e:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
     280:	2301      	movs	r3, #1
     282:	6822      	ldr	r2, [r4, #0]
     284:	7393      	strb	r3, [r2, #14]
     286:	e7f1      	b.n	26c <_tc_interrupt_handler+0x18>
		(module->callback[TC_CALLBACK_ERROR])(module);
     288:	0020      	movs	r0, r4
     28a:	68e3      	ldr	r3, [r4, #12]
     28c:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
     28e:	2302      	movs	r3, #2
     290:	6822      	ldr	r2, [r4, #0]
     292:	7393      	strb	r3, [r2, #14]
     294:	e7ec      	b.n	270 <_tc_interrupt_handler+0x1c>
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
     296:	0020      	movs	r0, r4
     298:	6923      	ldr	r3, [r4, #16]
     29a:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
     29c:	2310      	movs	r3, #16
     29e:	6822      	ldr	r2, [r4, #0]
     2a0:	7393      	strb	r3, [r2, #14]
     2a2:	e7e7      	b.n	274 <_tc_interrupt_handler+0x20>
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
     2a4:	0020      	movs	r0, r4
     2a6:	6963      	ldr	r3, [r4, #20]
     2a8:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
     2aa:	6823      	ldr	r3, [r4, #0]
     2ac:	2220      	movs	r2, #32
     2ae:	739a      	strb	r2, [r3, #14]
}
     2b0:	e7e2      	b.n	278 <_tc_interrupt_handler+0x24>
     2b2:	46c0      	nop			; (mov r8, r8)
     2b4:	2000009c 	.word	0x2000009c

000002b8 <TC0_Handler>:
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
     2b8:	b510      	push	{r4, lr}
     2ba:	2000      	movs	r0, #0
     2bc:	4b01      	ldr	r3, [pc, #4]	; (2c4 <TC0_Handler+0xc>)
     2be:	4798      	blx	r3
     2c0:	bd10      	pop	{r4, pc}
     2c2:	46c0      	nop			; (mov r8, r8)
     2c4:	00000255 	.word	0x00000255

000002c8 <TC1_Handler>:
     2c8:	b510      	push	{r4, lr}
     2ca:	2001      	movs	r0, #1
     2cc:	4b01      	ldr	r3, [pc, #4]	; (2d4 <TC1_Handler+0xc>)
     2ce:	4798      	blx	r3
     2d0:	bd10      	pop	{r4, pc}
     2d2:	46c0      	nop			; (mov r8, r8)
     2d4:	00000255 	.word	0x00000255

000002d8 <TC2_Handler>:
     2d8:	b510      	push	{r4, lr}
     2da:	2002      	movs	r0, #2
     2dc:	4b01      	ldr	r3, [pc, #4]	; (2e4 <TC2_Handler+0xc>)
     2de:	4798      	blx	r3
     2e0:	bd10      	pop	{r4, pc}
     2e2:	46c0      	nop			; (mov r8, r8)
     2e4:	00000255 	.word	0x00000255

000002e8 <TC3_Handler>:
     2e8:	b510      	push	{r4, lr}
     2ea:	2003      	movs	r0, #3
     2ec:	4b01      	ldr	r3, [pc, #4]	; (2f4 <TC3_Handler+0xc>)
     2ee:	4798      	blx	r3
     2f0:	bd10      	pop	{r4, pc}
     2f2:	46c0      	nop			; (mov r8, r8)
     2f4:	00000255 	.word	0x00000255

000002f8 <TC4_Handler>:
     2f8:	b510      	push	{r4, lr}
     2fa:	2004      	movs	r0, #4
     2fc:	4b01      	ldr	r3, [pc, #4]	; (304 <TC4_Handler+0xc>)
     2fe:	4798      	blx	r3
     300:	bd10      	pop	{r4, pc}
     302:	46c0      	nop			; (mov r8, r8)
     304:	00000255 	.word	0x00000255

00000308 <TC5_Handler>:
     308:	b510      	push	{r4, lr}
     30a:	2005      	movs	r0, #5
     30c:	4b01      	ldr	r3, [pc, #4]	; (314 <TC5_Handler+0xc>)
     30e:	4798      	blx	r3
     310:	bd10      	pop	{r4, pc}
     312:	46c0      	nop			; (mov r8, r8)
     314:	00000255 	.word	0x00000255

00000318 <TC6_Handler>:
     318:	b510      	push	{r4, lr}
     31a:	2006      	movs	r0, #6
     31c:	4b01      	ldr	r3, [pc, #4]	; (324 <TC6_Handler+0xc>)
     31e:	4798      	blx	r3
     320:	bd10      	pop	{r4, pc}
     322:	46c0      	nop			; (mov r8, r8)
     324:	00000255 	.word	0x00000255

00000328 <TC7_Handler>:
     328:	b510      	push	{r4, lr}
     32a:	2007      	movs	r0, #7
     32c:	4b01      	ldr	r3, [pc, #4]	; (334 <TC7_Handler+0xc>)
     32e:	4798      	blx	r3
     330:	bd10      	pop	{r4, pc}
     332:	46c0      	nop			; (mov r8, r8)
     334:	00000255 	.word	0x00000255

00000338 <EVSYS_Handler>:

	return STATUS_OK;
}

void EVSYS_Handler(void)
{
     338:	b510      	push	{r4, lr}
	struct events_hook *current_hook = _events_inst.hook_list;
     33a:	4b0b      	ldr	r3, [pc, #44]	; (368 <EVSYS_Handler+0x30>)
     33c:	691c      	ldr	r4, [r3, #16]
	uint32_t flag;

	/* Synch the interrupt flag buffer with the hardware register */
	flag = EVSYS->INTFLAG.reg;
     33e:	490b      	ldr	r1, [pc, #44]	; (36c <EVSYS_Handler+0x34>)
     340:	698a      	ldr	r2, [r1, #24]
	_events_inst.interrupt_flag_buffer |= flag;
     342:	6898      	ldr	r0, [r3, #8]
     344:	4302      	orrs	r2, r0
     346:	609a      	str	r2, [r3, #8]
	/* Clear all hardware interrupt flags */
	EVSYS->INTFLAG.reg = _EVENTS_INTFLAGS_MASK;
     348:	4b09      	ldr	r3, [pc, #36]	; (370 <EVSYS_Handler+0x38>)
     34a:	618b      	str	r3, [r1, #24]

	/* Traverse the linked list */
	while (current_hook != NULL) {
     34c:	2c00      	cmp	r4, #0
     34e:	d005      	beq.n	35c <EVSYS_Handler+0x24>
		current_hook->hook_func(current_hook->resource);
     350:	6820      	ldr	r0, [r4, #0]
     352:	6863      	ldr	r3, [r4, #4]
     354:	4798      	blx	r3
		current_hook = current_hook->next;
     356:	68a4      	ldr	r4, [r4, #8]
	while (current_hook != NULL) {
     358:	2c00      	cmp	r4, #0
     35a:	d1f9      	bne.n	350 <EVSYS_Handler+0x18>
	}

	/* Clear acknowledged interrupt sources from the interrupt flag buffer */
	flag = _events_inst.interrupt_flag_ack_buffer;
     35c:	4b02      	ldr	r3, [pc, #8]	; (368 <EVSYS_Handler+0x30>)
     35e:	68d9      	ldr	r1, [r3, #12]
	_events_inst.interrupt_flag_buffer &= ~flag;
     360:	689a      	ldr	r2, [r3, #8]
     362:	438a      	bics	r2, r1
     364:	609a      	str	r2, [r3, #8]
}
     366:	bd10      	pop	{r4, pc}
     368:	20000000 	.word	0x20000000
     36c:	42000400 	.word	0x42000400
     370:	0f0fffff 	.word	0x0f0fffff

00000374 <_system_events_init>:
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     374:	4a06      	ldr	r2, [pc, #24]	; (390 <_system_events_init+0x1c>)
     376:	6a13      	ldr	r3, [r2, #32]
     378:	2102      	movs	r1, #2
     37a:	430b      	orrs	r3, r1
     37c:	6213      	str	r3, [r2, #32]
{
	/* Enable EVSYS register interface */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_EVSYS);

	/* Make sure the EVSYS module is properly reset */
	EVSYS->CTRL.reg = EVSYS_CTRL_SWRST;
     37e:	2201      	movs	r2, #1
     380:	4b04      	ldr	r3, [pc, #16]	; (394 <_system_events_init+0x20>)
     382:	701a      	strb	r2, [r3, #0]

	while (EVSYS->CTRL.reg & EVSYS_CTRL_SWRST) {
     384:	0019      	movs	r1, r3
     386:	780b      	ldrb	r3, [r1, #0]
     388:	4213      	tst	r3, r2
     38a:	d1fc      	bne.n	386 <_system_events_init+0x12>
	}
}
     38c:	4770      	bx	lr
     38e:	46c0      	nop			; (mov r8, r8)
     390:	40000400 	.word	0x40000400
     394:	42000400 	.word	0x42000400

00000398 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
     398:	b5f0      	push	{r4, r5, r6, r7, lr}
     39a:	46de      	mov	lr, fp
     39c:	4657      	mov	r7, sl
     39e:	464e      	mov	r6, r9
     3a0:	4645      	mov	r5, r8
     3a2:	b5e0      	push	{r5, r6, r7, lr}
     3a4:	b087      	sub	sp, #28
     3a6:	4680      	mov	r8, r0
     3a8:	9104      	str	r1, [sp, #16]
     3aa:	0016      	movs	r6, r2
     3ac:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     3ae:	2200      	movs	r2, #0
     3b0:	2300      	movs	r3, #0
     3b2:	2100      	movs	r1, #0
     3b4:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
     3b6:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
     3b8:	2001      	movs	r0, #1
     3ba:	0021      	movs	r1, r4
     3bc:	9600      	str	r6, [sp, #0]
     3be:	9701      	str	r7, [sp, #4]
     3c0:	465c      	mov	r4, fp
     3c2:	9403      	str	r4, [sp, #12]
     3c4:	4644      	mov	r4, r8
     3c6:	9405      	str	r4, [sp, #20]
     3c8:	e013      	b.n	3f2 <long_division+0x5a>
     3ca:	2420      	movs	r4, #32
     3cc:	1a64      	subs	r4, r4, r1
     3ce:	0005      	movs	r5, r0
     3d0:	40e5      	lsrs	r5, r4
     3d2:	46a8      	mov	r8, r5
     3d4:	e014      	b.n	400 <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
     3d6:	9c00      	ldr	r4, [sp, #0]
     3d8:	9d01      	ldr	r5, [sp, #4]
     3da:	1b12      	subs	r2, r2, r4
     3dc:	41ab      	sbcs	r3, r5
			q |= bit_shift;
     3de:	465c      	mov	r4, fp
     3e0:	464d      	mov	r5, r9
     3e2:	432c      	orrs	r4, r5
     3e4:	46a3      	mov	fp, r4
     3e6:	9c03      	ldr	r4, [sp, #12]
     3e8:	4645      	mov	r5, r8
     3ea:	432c      	orrs	r4, r5
     3ec:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
     3ee:	3901      	subs	r1, #1
     3f0:	d325      	bcc.n	43e <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
     3f2:	2420      	movs	r4, #32
     3f4:	4264      	negs	r4, r4
     3f6:	190c      	adds	r4, r1, r4
     3f8:	d4e7      	bmi.n	3ca <long_division+0x32>
     3fa:	0005      	movs	r5, r0
     3fc:	40a5      	lsls	r5, r4
     3fe:	46a8      	mov	r8, r5
     400:	0004      	movs	r4, r0
     402:	408c      	lsls	r4, r1
     404:	46a1      	mov	r9, r4
		r = r << 1;
     406:	1892      	adds	r2, r2, r2
     408:	415b      	adcs	r3, r3
     40a:	0014      	movs	r4, r2
     40c:	001d      	movs	r5, r3
		if (n & bit_shift) {
     40e:	9e05      	ldr	r6, [sp, #20]
     410:	464f      	mov	r7, r9
     412:	403e      	ands	r6, r7
     414:	46b4      	mov	ip, r6
     416:	9e04      	ldr	r6, [sp, #16]
     418:	4647      	mov	r7, r8
     41a:	403e      	ands	r6, r7
     41c:	46b2      	mov	sl, r6
     41e:	4666      	mov	r6, ip
     420:	4657      	mov	r7, sl
     422:	433e      	orrs	r6, r7
     424:	d003      	beq.n	42e <long_division+0x96>
			r |= 0x01;
     426:	0006      	movs	r6, r0
     428:	4326      	orrs	r6, r4
     42a:	0032      	movs	r2, r6
     42c:	002b      	movs	r3, r5
		if (r >= d) {
     42e:	9c00      	ldr	r4, [sp, #0]
     430:	9d01      	ldr	r5, [sp, #4]
     432:	429d      	cmp	r5, r3
     434:	d8db      	bhi.n	3ee <long_division+0x56>
     436:	d1ce      	bne.n	3d6 <long_division+0x3e>
     438:	4294      	cmp	r4, r2
     43a:	d8d8      	bhi.n	3ee <long_division+0x56>
     43c:	e7cb      	b.n	3d6 <long_division+0x3e>
     43e:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
     440:	4658      	mov	r0, fp
     442:	0019      	movs	r1, r3
     444:	b007      	add	sp, #28
     446:	bc3c      	pop	{r2, r3, r4, r5}
     448:	4690      	mov	r8, r2
     44a:	4699      	mov	r9, r3
     44c:	46a2      	mov	sl, r4
     44e:	46ab      	mov	fp, r5
     450:	bdf0      	pop	{r4, r5, r6, r7, pc}

00000452 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     452:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     454:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     456:	2340      	movs	r3, #64	; 0x40
     458:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
     45a:	4281      	cmp	r1, r0
     45c:	d202      	bcs.n	464 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
     45e:	0018      	movs	r0, r3
     460:	bd10      	pop	{r4, pc}
		baud_calculated++;
     462:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
     464:	1a09      	subs	r1, r1, r0
		baud_calculated++;
     466:	1c63      	adds	r3, r4, #1
     468:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
     46a:	4288      	cmp	r0, r1
     46c:	d9f9      	bls.n	462 <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     46e:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
     470:	2cff      	cmp	r4, #255	; 0xff
     472:	d8f4      	bhi.n	45e <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
     474:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
     476:	2300      	movs	r3, #0
     478:	e7f1      	b.n	45e <_sercom_get_sync_baud_val+0xc>
	...

0000047c <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     47c:	b5f0      	push	{r4, r5, r6, r7, lr}
     47e:	b083      	sub	sp, #12
     480:	000f      	movs	r7, r1
     482:	0016      	movs	r6, r2
     484:	aa08      	add	r2, sp, #32
     486:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     488:	0004      	movs	r4, r0
     48a:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     48c:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
     48e:	42bc      	cmp	r4, r7
     490:	d902      	bls.n	498 <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
     492:	0010      	movs	r0, r2
     494:	b003      	add	sp, #12
     496:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     498:	2b00      	cmp	r3, #0
     49a:	d114      	bne.n	4c6 <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     49c:	0002      	movs	r2, r0
     49e:	0008      	movs	r0, r1
     4a0:	2100      	movs	r1, #0
     4a2:	4c19      	ldr	r4, [pc, #100]	; (508 <_sercom_get_async_baud_val+0x8c>)
     4a4:	47a0      	blx	r4
     4a6:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
     4a8:	003a      	movs	r2, r7
     4aa:	2300      	movs	r3, #0
     4ac:	2000      	movs	r0, #0
     4ae:	4c17      	ldr	r4, [pc, #92]	; (50c <_sercom_get_async_baud_val+0x90>)
     4b0:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
     4b2:	2200      	movs	r2, #0
     4b4:	2301      	movs	r3, #1
     4b6:	1a12      	subs	r2, r2, r0
     4b8:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
     4ba:	0c12      	lsrs	r2, r2, #16
     4bc:	041b      	lsls	r3, r3, #16
     4be:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
     4c0:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
     4c2:	2200      	movs	r2, #0
     4c4:	e7e5      	b.n	492 <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
     4c6:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     4c8:	2b01      	cmp	r3, #1
     4ca:	d1f9      	bne.n	4c0 <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
     4cc:	000a      	movs	r2, r1
     4ce:	2300      	movs	r3, #0
     4d0:	2100      	movs	r1, #0
     4d2:	4c0d      	ldr	r4, [pc, #52]	; (508 <_sercom_get_async_baud_val+0x8c>)
     4d4:	47a0      	blx	r4
     4d6:	0002      	movs	r2, r0
     4d8:	000b      	movs	r3, r1
     4da:	9200      	str	r2, [sp, #0]
     4dc:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
     4de:	0038      	movs	r0, r7
     4e0:	2100      	movs	r1, #0
     4e2:	4c0a      	ldr	r4, [pc, #40]	; (50c <_sercom_get_async_baud_val+0x90>)
     4e4:	47a0      	blx	r4
     4e6:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
     4e8:	2380      	movs	r3, #128	; 0x80
     4ea:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     4ec:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
     4ee:	4298      	cmp	r0, r3
     4f0:	d8cf      	bhi.n	492 <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
     4f2:	0f79      	lsrs	r1, r7, #29
     4f4:	00f8      	lsls	r0, r7, #3
     4f6:	9a00      	ldr	r2, [sp, #0]
     4f8:	9b01      	ldr	r3, [sp, #4]
     4fa:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
     4fc:	00ea      	lsls	r2, r5, #3
     4fe:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
     500:	b2d2      	uxtb	r2, r2
     502:	0352      	lsls	r2, r2, #13
     504:	432a      	orrs	r2, r5
     506:	e7db      	b.n	4c0 <_sercom_get_async_baud_val+0x44>
     508:	00001869 	.word	0x00001869
     50c:	00000399 	.word	0x00000399

00000510 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     510:	b510      	push	{r4, lr}
     512:	b082      	sub	sp, #8
     514:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     516:	4b0e      	ldr	r3, [pc, #56]	; (550 <sercom_set_gclk_generator+0x40>)
     518:	781b      	ldrb	r3, [r3, #0]
     51a:	2b00      	cmp	r3, #0
     51c:	d007      	beq.n	52e <sercom_set_gclk_generator+0x1e>
     51e:	2900      	cmp	r1, #0
     520:	d105      	bne.n	52e <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
     522:	4b0b      	ldr	r3, [pc, #44]	; (550 <sercom_set_gclk_generator+0x40>)
     524:	785b      	ldrb	r3, [r3, #1]
     526:	4283      	cmp	r3, r0
     528:	d010      	beq.n	54c <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     52a:	201d      	movs	r0, #29
     52c:	e00c      	b.n	548 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
     52e:	a901      	add	r1, sp, #4
     530:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     532:	200c      	movs	r0, #12
     534:	4b07      	ldr	r3, [pc, #28]	; (554 <sercom_set_gclk_generator+0x44>)
     536:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     538:	200c      	movs	r0, #12
     53a:	4b07      	ldr	r3, [pc, #28]	; (558 <sercom_set_gclk_generator+0x48>)
     53c:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
     53e:	4b04      	ldr	r3, [pc, #16]	; (550 <sercom_set_gclk_generator+0x40>)
     540:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     542:	2201      	movs	r2, #1
     544:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
     546:	2000      	movs	r0, #0
}
     548:	b002      	add	sp, #8
     54a:	bd10      	pop	{r4, pc}
		return STATUS_OK;
     54c:	2000      	movs	r0, #0
     54e:	e7fb      	b.n	548 <sercom_set_gclk_generator+0x38>
     550:	20000060 	.word	0x20000060
     554:	00001461 	.word	0x00001461
     558:	000013d5 	.word	0x000013d5

0000055c <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     55c:	4b40      	ldr	r3, [pc, #256]	; (660 <_sercom_get_default_pad+0x104>)
     55e:	4298      	cmp	r0, r3
     560:	d031      	beq.n	5c6 <_sercom_get_default_pad+0x6a>
     562:	d90a      	bls.n	57a <_sercom_get_default_pad+0x1e>
     564:	4b3f      	ldr	r3, [pc, #252]	; (664 <_sercom_get_default_pad+0x108>)
     566:	4298      	cmp	r0, r3
     568:	d04d      	beq.n	606 <_sercom_get_default_pad+0xaa>
     56a:	4b3f      	ldr	r3, [pc, #252]	; (668 <_sercom_get_default_pad+0x10c>)
     56c:	4298      	cmp	r0, r3
     56e:	d05a      	beq.n	626 <_sercom_get_default_pad+0xca>
     570:	4b3e      	ldr	r3, [pc, #248]	; (66c <_sercom_get_default_pad+0x110>)
     572:	4298      	cmp	r0, r3
     574:	d037      	beq.n	5e6 <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
     576:	2000      	movs	r0, #0
}
     578:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
     57a:	4b3d      	ldr	r3, [pc, #244]	; (670 <_sercom_get_default_pad+0x114>)
     57c:	4298      	cmp	r0, r3
     57e:	d00c      	beq.n	59a <_sercom_get_default_pad+0x3e>
     580:	4b3c      	ldr	r3, [pc, #240]	; (674 <_sercom_get_default_pad+0x118>)
     582:	4298      	cmp	r0, r3
     584:	d1f7      	bne.n	576 <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     586:	2901      	cmp	r1, #1
     588:	d017      	beq.n	5ba <_sercom_get_default_pad+0x5e>
     58a:	2900      	cmp	r1, #0
     58c:	d05d      	beq.n	64a <_sercom_get_default_pad+0xee>
     58e:	2902      	cmp	r1, #2
     590:	d015      	beq.n	5be <_sercom_get_default_pad+0x62>
     592:	2903      	cmp	r1, #3
     594:	d015      	beq.n	5c2 <_sercom_get_default_pad+0x66>
	return 0;
     596:	2000      	movs	r0, #0
     598:	e7ee      	b.n	578 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     59a:	2901      	cmp	r1, #1
     59c:	d007      	beq.n	5ae <_sercom_get_default_pad+0x52>
     59e:	2900      	cmp	r1, #0
     5a0:	d051      	beq.n	646 <_sercom_get_default_pad+0xea>
     5a2:	2902      	cmp	r1, #2
     5a4:	d005      	beq.n	5b2 <_sercom_get_default_pad+0x56>
     5a6:	2903      	cmp	r1, #3
     5a8:	d005      	beq.n	5b6 <_sercom_get_default_pad+0x5a>
	return 0;
     5aa:	2000      	movs	r0, #0
     5ac:	e7e4      	b.n	578 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     5ae:	4832      	ldr	r0, [pc, #200]	; (678 <_sercom_get_default_pad+0x11c>)
     5b0:	e7e2      	b.n	578 <_sercom_get_default_pad+0x1c>
     5b2:	4832      	ldr	r0, [pc, #200]	; (67c <_sercom_get_default_pad+0x120>)
     5b4:	e7e0      	b.n	578 <_sercom_get_default_pad+0x1c>
     5b6:	4832      	ldr	r0, [pc, #200]	; (680 <_sercom_get_default_pad+0x124>)
     5b8:	e7de      	b.n	578 <_sercom_get_default_pad+0x1c>
     5ba:	4832      	ldr	r0, [pc, #200]	; (684 <_sercom_get_default_pad+0x128>)
     5bc:	e7dc      	b.n	578 <_sercom_get_default_pad+0x1c>
     5be:	4832      	ldr	r0, [pc, #200]	; (688 <_sercom_get_default_pad+0x12c>)
     5c0:	e7da      	b.n	578 <_sercom_get_default_pad+0x1c>
     5c2:	4832      	ldr	r0, [pc, #200]	; (68c <_sercom_get_default_pad+0x130>)
     5c4:	e7d8      	b.n	578 <_sercom_get_default_pad+0x1c>
     5c6:	2901      	cmp	r1, #1
     5c8:	d007      	beq.n	5da <_sercom_get_default_pad+0x7e>
     5ca:	2900      	cmp	r1, #0
     5cc:	d03f      	beq.n	64e <_sercom_get_default_pad+0xf2>
     5ce:	2902      	cmp	r1, #2
     5d0:	d005      	beq.n	5de <_sercom_get_default_pad+0x82>
     5d2:	2903      	cmp	r1, #3
     5d4:	d005      	beq.n	5e2 <_sercom_get_default_pad+0x86>
	return 0;
     5d6:	2000      	movs	r0, #0
     5d8:	e7ce      	b.n	578 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     5da:	482d      	ldr	r0, [pc, #180]	; (690 <_sercom_get_default_pad+0x134>)
     5dc:	e7cc      	b.n	578 <_sercom_get_default_pad+0x1c>
     5de:	482d      	ldr	r0, [pc, #180]	; (694 <_sercom_get_default_pad+0x138>)
     5e0:	e7ca      	b.n	578 <_sercom_get_default_pad+0x1c>
     5e2:	482d      	ldr	r0, [pc, #180]	; (698 <_sercom_get_default_pad+0x13c>)
     5e4:	e7c8      	b.n	578 <_sercom_get_default_pad+0x1c>
     5e6:	2901      	cmp	r1, #1
     5e8:	d007      	beq.n	5fa <_sercom_get_default_pad+0x9e>
     5ea:	2900      	cmp	r1, #0
     5ec:	d031      	beq.n	652 <_sercom_get_default_pad+0xf6>
     5ee:	2902      	cmp	r1, #2
     5f0:	d005      	beq.n	5fe <_sercom_get_default_pad+0xa2>
     5f2:	2903      	cmp	r1, #3
     5f4:	d005      	beq.n	602 <_sercom_get_default_pad+0xa6>
	return 0;
     5f6:	2000      	movs	r0, #0
     5f8:	e7be      	b.n	578 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     5fa:	4828      	ldr	r0, [pc, #160]	; (69c <_sercom_get_default_pad+0x140>)
     5fc:	e7bc      	b.n	578 <_sercom_get_default_pad+0x1c>
     5fe:	4828      	ldr	r0, [pc, #160]	; (6a0 <_sercom_get_default_pad+0x144>)
     600:	e7ba      	b.n	578 <_sercom_get_default_pad+0x1c>
     602:	4828      	ldr	r0, [pc, #160]	; (6a4 <_sercom_get_default_pad+0x148>)
     604:	e7b8      	b.n	578 <_sercom_get_default_pad+0x1c>
     606:	2901      	cmp	r1, #1
     608:	d007      	beq.n	61a <_sercom_get_default_pad+0xbe>
     60a:	2900      	cmp	r1, #0
     60c:	d023      	beq.n	656 <_sercom_get_default_pad+0xfa>
     60e:	2902      	cmp	r1, #2
     610:	d005      	beq.n	61e <_sercom_get_default_pad+0xc2>
     612:	2903      	cmp	r1, #3
     614:	d005      	beq.n	622 <_sercom_get_default_pad+0xc6>
	return 0;
     616:	2000      	movs	r0, #0
     618:	e7ae      	b.n	578 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     61a:	4823      	ldr	r0, [pc, #140]	; (6a8 <_sercom_get_default_pad+0x14c>)
     61c:	e7ac      	b.n	578 <_sercom_get_default_pad+0x1c>
     61e:	4823      	ldr	r0, [pc, #140]	; (6ac <_sercom_get_default_pad+0x150>)
     620:	e7aa      	b.n	578 <_sercom_get_default_pad+0x1c>
     622:	4823      	ldr	r0, [pc, #140]	; (6b0 <_sercom_get_default_pad+0x154>)
     624:	e7a8      	b.n	578 <_sercom_get_default_pad+0x1c>
     626:	2901      	cmp	r1, #1
     628:	d007      	beq.n	63a <_sercom_get_default_pad+0xde>
     62a:	2900      	cmp	r1, #0
     62c:	d015      	beq.n	65a <_sercom_get_default_pad+0xfe>
     62e:	2902      	cmp	r1, #2
     630:	d005      	beq.n	63e <_sercom_get_default_pad+0xe2>
     632:	2903      	cmp	r1, #3
     634:	d005      	beq.n	642 <_sercom_get_default_pad+0xe6>
	return 0;
     636:	2000      	movs	r0, #0
     638:	e79e      	b.n	578 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     63a:	481e      	ldr	r0, [pc, #120]	; (6b4 <_sercom_get_default_pad+0x158>)
     63c:	e79c      	b.n	578 <_sercom_get_default_pad+0x1c>
     63e:	481e      	ldr	r0, [pc, #120]	; (6b8 <_sercom_get_default_pad+0x15c>)
     640:	e79a      	b.n	578 <_sercom_get_default_pad+0x1c>
     642:	481e      	ldr	r0, [pc, #120]	; (6bc <_sercom_get_default_pad+0x160>)
     644:	e798      	b.n	578 <_sercom_get_default_pad+0x1c>
     646:	481e      	ldr	r0, [pc, #120]	; (6c0 <_sercom_get_default_pad+0x164>)
     648:	e796      	b.n	578 <_sercom_get_default_pad+0x1c>
     64a:	2003      	movs	r0, #3
     64c:	e794      	b.n	578 <_sercom_get_default_pad+0x1c>
     64e:	481d      	ldr	r0, [pc, #116]	; (6c4 <_sercom_get_default_pad+0x168>)
     650:	e792      	b.n	578 <_sercom_get_default_pad+0x1c>
     652:	481d      	ldr	r0, [pc, #116]	; (6c8 <_sercom_get_default_pad+0x16c>)
     654:	e790      	b.n	578 <_sercom_get_default_pad+0x1c>
     656:	481d      	ldr	r0, [pc, #116]	; (6cc <_sercom_get_default_pad+0x170>)
     658:	e78e      	b.n	578 <_sercom_get_default_pad+0x1c>
     65a:	481d      	ldr	r0, [pc, #116]	; (6d0 <_sercom_get_default_pad+0x174>)
     65c:	e78c      	b.n	578 <_sercom_get_default_pad+0x1c>
     65e:	46c0      	nop			; (mov r8, r8)
     660:	42001000 	.word	0x42001000
     664:	42001800 	.word	0x42001800
     668:	42001c00 	.word	0x42001c00
     66c:	42001400 	.word	0x42001400
     670:	42000800 	.word	0x42000800
     674:	42000c00 	.word	0x42000c00
     678:	00050003 	.word	0x00050003
     67c:	00060003 	.word	0x00060003
     680:	00070003 	.word	0x00070003
     684:	00010003 	.word	0x00010003
     688:	001e0003 	.word	0x001e0003
     68c:	001f0003 	.word	0x001f0003
     690:	00090003 	.word	0x00090003
     694:	000a0003 	.word	0x000a0003
     698:	000b0003 	.word	0x000b0003
     69c:	00110003 	.word	0x00110003
     6a0:	00120003 	.word	0x00120003
     6a4:	00130003 	.word	0x00130003
     6a8:	000d0003 	.word	0x000d0003
     6ac:	000e0003 	.word	0x000e0003
     6b0:	000f0003 	.word	0x000f0003
     6b4:	00170003 	.word	0x00170003
     6b8:	00180003 	.word	0x00180003
     6bc:	00190003 	.word	0x00190003
     6c0:	00040003 	.word	0x00040003
     6c4:	00080003 	.word	0x00080003
     6c8:	00100003 	.word	0x00100003
     6cc:	000c0003 	.word	0x000c0003
     6d0:	00160003 	.word	0x00160003

000006d4 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     6d4:	b530      	push	{r4, r5, lr}
     6d6:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     6d8:	4b0b      	ldr	r3, [pc, #44]	; (708 <_sercom_get_sercom_inst_index+0x34>)
     6da:	466a      	mov	r2, sp
     6dc:	cb32      	ldmia	r3!, {r1, r4, r5}
     6de:	c232      	stmia	r2!, {r1, r4, r5}
     6e0:	cb32      	ldmia	r3!, {r1, r4, r5}
     6e2:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     6e4:	9b00      	ldr	r3, [sp, #0]
     6e6:	4283      	cmp	r3, r0
     6e8:	d00b      	beq.n	702 <_sercom_get_sercom_inst_index+0x2e>
     6ea:	2301      	movs	r3, #1
     6ec:	009a      	lsls	r2, r3, #2
     6ee:	4669      	mov	r1, sp
     6f0:	5852      	ldr	r2, [r2, r1]
     6f2:	4282      	cmp	r2, r0
     6f4:	d006      	beq.n	704 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     6f6:	3301      	adds	r3, #1
     6f8:	2b06      	cmp	r3, #6
     6fa:	d1f7      	bne.n	6ec <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     6fc:	2000      	movs	r0, #0
}
     6fe:	b007      	add	sp, #28
     700:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     702:	2300      	movs	r3, #0
			return i;
     704:	b2d8      	uxtb	r0, r3
     706:	e7fa      	b.n	6fe <_sercom_get_sercom_inst_index+0x2a>
     708:	00001904 	.word	0x00001904

0000070c <usart_write_callback>:
 *
 * @note				- 
 ******************************************************************************************************/
void usart_write_callback(const struct usart_module *const usart_module)
{
	__ASM volatile ("nop");
     70c:	46c0      	nop			; (mov r8, r8)
}
     70e:	4770      	bx	lr

00000710 <config_UART>:
{
     710:	b530      	push	{r4, r5, lr}
     712:	b08d      	sub	sp, #52	; 0x34
	config->data_order       = USART_DATAORDER_LSB;
     714:	2380      	movs	r3, #128	; 0x80
     716:	05db      	lsls	r3, r3, #23
     718:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
     71a:	2300      	movs	r3, #0
     71c:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
     71e:	22ff      	movs	r2, #255	; 0xff
     720:	4669      	mov	r1, sp
     722:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
     724:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
     726:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
     728:	2296      	movs	r2, #150	; 0x96
     72a:	0192      	lsls	r2, r2, #6
     72c:	9204      	str	r2, [sp, #16]
	config->receiver_enable  = true;
     72e:	2201      	movs	r2, #1
     730:	750a      	strb	r2, [r1, #20]
	config->transmitter_enable = true;
     732:	754a      	strb	r2, [r1, #21]
	config->clock_polarity_inverted = false;
     734:	758b      	strb	r3, [r1, #22]
	config->use_external_clock = false;
     736:	75cb      	strb	r3, [r1, #23]
	config->ext_clock_freq   = 0;
     738:	9306      	str	r3, [sp, #24]
	config->run_in_standby   = false;
     73a:	770b      	strb	r3, [r1, #28]
	config->generator_source = GCLK_GENERATOR_0;
     73c:	774b      	strb	r3, [r1, #29]
	config_usart.mux_setting = USART_RX_1_TX_0_XCK_1;
     73e:	2380      	movs	r3, #128	; 0x80
     740:	035b      	lsls	r3, r3, #13
     742:	9303      	str	r3, [sp, #12]
	config_usart.pinmux_pad0 = PINMUX_PB08D_SERCOM4_PAD0;	// PB08 = TX
     744:	4b13      	ldr	r3, [pc, #76]	; (794 <config_UART+0x84>)
     746:	9308      	str	r3, [sp, #32]
	config_usart.pinmux_pad1 = PINMUX_PB09D_SERCOM4_PAD1;	// PB09 = RX
     748:	4b13      	ldr	r3, [pc, #76]	; (798 <config_UART+0x88>)
     74a:	9309      	str	r3, [sp, #36]	; 0x24
	config_usart.pinmux_pad2 = PINMUX_UNUSED;
     74c:	2301      	movs	r3, #1
     74e:	425b      	negs	r3, r3
     750:	930a      	str	r3, [sp, #40]	; 0x28
	config_usart.pinmux_pad3 = PINMUX_UNUSED;
     752:	930b      	str	r3, [sp, #44]	; 0x2c
	while (usart_init(&usart_instance, SERCOM4, &config_usart) != STATUS_OK)
     754:	4d11      	ldr	r5, [pc, #68]	; (79c <config_UART+0x8c>)
     756:	4c12      	ldr	r4, [pc, #72]	; (7a0 <config_UART+0x90>)
     758:	e000      	b.n	75c <config_UART+0x4c>
		__ASM volatile ("nop");
     75a:	46c0      	nop			; (mov r8, r8)
	while (usart_init(&usart_instance, SERCOM4, &config_usart) != STATUS_OK)
     75c:	466a      	mov	r2, sp
     75e:	4911      	ldr	r1, [pc, #68]	; (7a4 <config_UART+0x94>)
     760:	0028      	movs	r0, r5
     762:	47a0      	blx	r4
     764:	2800      	cmp	r0, #0
     766:	d1f8      	bne.n	75a <config_UART+0x4a>
	SercomUsart *const usart_hw = &(module->hw->USART);
     768:	4d0c      	ldr	r5, [pc, #48]	; (79c <config_UART+0x8c>)
     76a:	682c      	ldr	r4, [r5, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     76c:	0020      	movs	r0, r4
     76e:	4b0e      	ldr	r3, [pc, #56]	; (7a8 <config_UART+0x98>)
     770:	4798      	blx	r3
     772:	231f      	movs	r3, #31
     774:	4018      	ands	r0, r3
     776:	3b1e      	subs	r3, #30
     778:	4083      	lsls	r3, r0
     77a:	4a0c      	ldr	r2, [pc, #48]	; (7ac <config_UART+0x9c>)
     77c:	6013      	str	r3, [r2, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
     77e:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
     780:	8a13      	ldrh	r3, [r2, #16]
	while (usart_is_syncing(module)) {
     782:	b21b      	sxth	r3, r3
     784:	2b00      	cmp	r3, #0
     786:	dbfb      	blt.n	780 <config_UART+0x70>
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
     788:	6823      	ldr	r3, [r4, #0]
     78a:	2202      	movs	r2, #2
     78c:	4313      	orrs	r3, r2
     78e:	6023      	str	r3, [r4, #0]
}
     790:	b00d      	add	sp, #52	; 0x34
     792:	bd30      	pop	{r4, r5, pc}
     794:	00280003 	.word	0x00280003
     798:	00290003 	.word	0x00290003
     79c:	200000c0 	.word	0x200000c0
     7a0:	00000841 	.word	0x00000841
     7a4:	42001800 	.word	0x42001800
     7a8:	00000d61 	.word	0x00000d61
     7ac:	e000e100 	.word	0xe000e100

000007b0 <config_UART_Callback>:
{
     7b0:	b570      	push	{r4, r5, r6, lr}
	usart_register_callback(&usart_instance, (usart_callback_t) usart_write_callback, USART_CALLBACK_BUFFER_TRANSMITTED);
     7b2:	4c08      	ldr	r4, [pc, #32]	; (7d4 <config_UART_Callback+0x24>)
     7b4:	2200      	movs	r2, #0
     7b6:	4908      	ldr	r1, [pc, #32]	; (7d8 <config_UART_Callback+0x28>)
     7b8:	0020      	movs	r0, r4
     7ba:	4d08      	ldr	r5, [pc, #32]	; (7dc <config_UART_Callback+0x2c>)
     7bc:	47a8      	blx	r5
	usart_register_callback(&usart_instance, (usart_callback_t) usart_read_callback, USART_CALLBACK_BUFFER_RECEIVED);
     7be:	2201      	movs	r2, #1
     7c0:	4907      	ldr	r1, [pc, #28]	; (7e0 <config_UART_Callback+0x30>)
     7c2:	0020      	movs	r0, r4
     7c4:	47a8      	blx	r5
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
     7c6:	2221      	movs	r2, #33	; 0x21
     7c8:	5ca3      	ldrb	r3, [r4, r2]
     7ca:	2103      	movs	r1, #3
     7cc:	430b      	orrs	r3, r1
     7ce:	54a3      	strb	r3, [r4, r2]
}
     7d0:	bd70      	pop	{r4, r5, r6, pc}
     7d2:	46c0      	nop			; (mov r8, r8)
     7d4:	200000c0 	.word	0x200000c0
     7d8:	0000070d 	.word	0x0000070d
     7dc:	00000bc5 	.word	0x00000bc5
     7e0:	00000801 	.word	0x00000801

000007e4 <UART_Continuous>:
 * @return				- void
 *
 * @note				- called from usart_read_callback
 ******************************************************************************************************/
void UART_Continuous(void)
{
     7e4:	b510      	push	{r4, lr}
	usart_read_buffer_job(&usart_instance, &ch_buffer, 1);
     7e6:	2201      	movs	r2, #1
     7e8:	4902      	ldr	r1, [pc, #8]	; (7f4 <UART_Continuous+0x10>)
     7ea:	4803      	ldr	r0, [pc, #12]	; (7f8 <UART_Continuous+0x14>)
     7ec:	4b03      	ldr	r3, [pc, #12]	; (7fc <UART_Continuous+0x18>)
     7ee:	4798      	blx	r3
}
     7f0:	bd10      	pop	{r4, pc}
     7f2:	46c0      	nop			; (mov r8, r8)
     7f4:	200000bc 	.word	0x200000bc
     7f8:	200000c0 	.word	0x200000c0
     7fc:	00000bdd 	.word	0x00000bdd

00000800 <usart_read_callback>:
{
     800:	b510      	push	{r4, lr}
	tx_rx_buffer[rx_index] = ch_buffer;
     802:	480a      	ldr	r0, [pc, #40]	; (82c <usart_read_callback+0x2c>)
     804:	8803      	ldrh	r3, [r0, #0]
     806:	4a0a      	ldr	r2, [pc, #40]	; (830 <usart_read_callback+0x30>)
     808:	7811      	ldrb	r1, [r2, #0]
     80a:	4a0a      	ldr	r2, [pc, #40]	; (834 <usart_read_callback+0x34>)
     80c:	54d1      	strb	r1, [r2, r3]
	tx_rx_buffer[rx_index+1] = 0;		// clear future buffer
     80e:	18d2      	adds	r2, r2, r3
     810:	2400      	movs	r4, #0
     812:	7054      	strb	r4, [r2, #1]
	tx_rx_buffer[rx_index+2] = 0;		// clear future buffer
     814:	7094      	strb	r4, [r2, #2]
	rx_index++;
     816:	3301      	adds	r3, #1
     818:	8003      	strh	r3, [r0, #0]
	if (ch_buffer == 0x0A)	// this is four because there are four chars plus a fifth "0x0A" at the end of every response from the encoder
     81a:	290a      	cmp	r1, #10
     81c:	d002      	beq.n	824 <usart_read_callback+0x24>
	UART_Continuous();		// listen for next UART msg
     81e:	4b06      	ldr	r3, [pc, #24]	; (838 <usart_read_callback+0x38>)
     820:	4798      	blx	r3
}
     822:	bd10      	pop	{r4, pc}
		USART_data_available = TRUE;
     824:	2201      	movs	r2, #1
     826:	4b05      	ldr	r3, [pc, #20]	; (83c <usart_read_callback+0x3c>)
     828:	701a      	strb	r2, [r3, #0]
     82a:	e7f8      	b.n	81e <usart_read_callback+0x1e>
     82c:	20000396 	.word	0x20000396
     830:	200000bc 	.word	0x200000bc
     834:	200000e8 	.word	0x200000e8
     838:	000007e5 	.word	0x000007e5
     83c:	20000394 	.word	0x20000394

00000840 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
     840:	b5f0      	push	{r4, r5, r6, r7, lr}
     842:	46de      	mov	lr, fp
     844:	4657      	mov	r7, sl
     846:	464e      	mov	r6, r9
     848:	4645      	mov	r5, r8
     84a:	b5e0      	push	{r5, r6, r7, lr}
     84c:	b08d      	sub	sp, #52	; 0x34
     84e:	0005      	movs	r5, r0
     850:	000c      	movs	r4, r1
     852:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
     854:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     856:	0008      	movs	r0, r1
     858:	4b80      	ldr	r3, [pc, #512]	; (a5c <usart_init+0x21c>)
     85a:	4798      	blx	r3
     85c:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     85e:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
     860:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     862:	07db      	lsls	r3, r3, #31
     864:	d506      	bpl.n	874 <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
     866:	b00d      	add	sp, #52	; 0x34
     868:	bc3c      	pop	{r2, r3, r4, r5}
     86a:	4690      	mov	r8, r2
     86c:	4699      	mov	r9, r3
     86e:	46a2      	mov	sl, r4
     870:	46ab      	mov	fp, r5
     872:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     874:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
     876:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     878:	079b      	lsls	r3, r3, #30
     87a:	d4f4      	bmi.n	866 <usart_init+0x26>
     87c:	4978      	ldr	r1, [pc, #480]	; (a60 <usart_init+0x220>)
     87e:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     880:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     882:	2301      	movs	r3, #1
     884:	40bb      	lsls	r3, r7
     886:	4303      	orrs	r3, r0
     888:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
     88a:	a90b      	add	r1, sp, #44	; 0x2c
     88c:	7f73      	ldrb	r3, [r6, #29]
     88e:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     890:	320d      	adds	r2, #13
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     892:	b2d7      	uxtb	r7, r2
     894:	0038      	movs	r0, r7
     896:	4b73      	ldr	r3, [pc, #460]	; (a64 <usart_init+0x224>)
     898:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     89a:	0038      	movs	r0, r7
     89c:	4b72      	ldr	r3, [pc, #456]	; (a68 <usart_init+0x228>)
     89e:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     8a0:	7f70      	ldrb	r0, [r6, #29]
     8a2:	2100      	movs	r1, #0
     8a4:	4b71      	ldr	r3, [pc, #452]	; (a6c <usart_init+0x22c>)
     8a6:	4798      	blx	r3
	module->character_size = config->character_size;
     8a8:	7af3      	ldrb	r3, [r6, #11]
     8aa:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
     8ac:	7d33      	ldrb	r3, [r6, #20]
     8ae:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
     8b0:	7d73      	ldrb	r3, [r6, #21]
     8b2:	71eb      	strb	r3, [r5, #7]
	SercomUsart *const usart_hw = &(module->hw->USART);
     8b4:	682b      	ldr	r3, [r5, #0]
     8b6:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     8b8:	0018      	movs	r0, r3
     8ba:	4b68      	ldr	r3, [pc, #416]	; (a5c <usart_init+0x21c>)
     8bc:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     8be:	300d      	adds	r0, #13
	uint16_t baud  = 0;
     8c0:	2200      	movs	r2, #0
     8c2:	230e      	movs	r3, #14
     8c4:	a902      	add	r1, sp, #8
     8c6:	468c      	mov	ip, r1
     8c8:	4463      	add	r3, ip
     8ca:	801a      	strh	r2, [r3, #0]
	ctrla = (uint32_t)config->data_order |
     8cc:	6833      	ldr	r3, [r6, #0]
     8ce:	9303      	str	r3, [sp, #12]
		(uint32_t)config->mux_setting |
     8d0:	68f3      	ldr	r3, [r6, #12]
     8d2:	469a      	mov	sl, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     8d4:	7db3      	ldrb	r3, [r6, #22]
     8d6:	469b      	mov	fp, r3
	transfer_mode = (uint32_t)config->transfer_mode;
     8d8:	6873      	ldr	r3, [r6, #4]
     8da:	4699      	mov	r9, r3
	switch (transfer_mode)
     8dc:	2b00      	cmp	r3, #0
     8de:	d014      	beq.n	90a <usart_init+0xca>
     8e0:	2380      	movs	r3, #128	; 0x80
     8e2:	055b      	lsls	r3, r3, #21
     8e4:	4599      	cmp	r9, r3
     8e6:	d130      	bne.n	94a <usart_init+0x10a>
			if (!config->use_external_clock) {
     8e8:	7df3      	ldrb	r3, [r6, #23]
     8ea:	2b00      	cmp	r3, #0
     8ec:	d131      	bne.n	952 <usart_init+0x112>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
     8ee:	6933      	ldr	r3, [r6, #16]
     8f0:	001f      	movs	r7, r3
     8f2:	b2c0      	uxtb	r0, r0
     8f4:	4b5e      	ldr	r3, [pc, #376]	; (a70 <usart_init+0x230>)
     8f6:	4798      	blx	r3
     8f8:	0001      	movs	r1, r0
     8fa:	220e      	movs	r2, #14
     8fc:	ab02      	add	r3, sp, #8
     8fe:	469c      	mov	ip, r3
     900:	4462      	add	r2, ip
     902:	0038      	movs	r0, r7
     904:	4b5b      	ldr	r3, [pc, #364]	; (a74 <usart_init+0x234>)
     906:	4798      	blx	r3
     908:	e020      	b.n	94c <usart_init+0x10c>
			if (config->use_external_clock) {
     90a:	7df3      	ldrb	r3, [r6, #23]
     90c:	2b00      	cmp	r3, #0
     90e:	d00b      	beq.n	928 <usart_init+0xe8>
				status_code =
     910:	2310      	movs	r3, #16
     912:	9300      	str	r3, [sp, #0]
     914:	2300      	movs	r3, #0
     916:	220e      	movs	r2, #14
     918:	a902      	add	r1, sp, #8
     91a:	468c      	mov	ip, r1
     91c:	4462      	add	r2, ip
     91e:	69b1      	ldr	r1, [r6, #24]
     920:	6930      	ldr	r0, [r6, #16]
     922:	4f55      	ldr	r7, [pc, #340]	; (a78 <usart_init+0x238>)
     924:	47b8      	blx	r7
     926:	e011      	b.n	94c <usart_init+0x10c>
						_sercom_get_async_baud_val(config->baudrate,
     928:	6933      	ldr	r3, [r6, #16]
     92a:	001f      	movs	r7, r3
     92c:	b2c0      	uxtb	r0, r0
     92e:	4b50      	ldr	r3, [pc, #320]	; (a70 <usart_init+0x230>)
     930:	4798      	blx	r3
     932:	0001      	movs	r1, r0
				status_code =
     934:	2310      	movs	r3, #16
     936:	9300      	str	r3, [sp, #0]
     938:	2300      	movs	r3, #0
     93a:	220e      	movs	r2, #14
     93c:	a802      	add	r0, sp, #8
     93e:	4684      	mov	ip, r0
     940:	4462      	add	r2, ip
     942:	0038      	movs	r0, r7
     944:	4f4c      	ldr	r7, [pc, #304]	; (a78 <usart_init+0x238>)
     946:	47b8      	blx	r7
     948:	e000      	b.n	94c <usart_init+0x10c>
	enum status_code status_code = STATUS_OK;
     94a:	2000      	movs	r0, #0
	if (status_code != STATUS_OK) {
     94c:	2800      	cmp	r0, #0
     94e:	d000      	beq.n	952 <usart_init+0x112>
     950:	e789      	b.n	866 <usart_init+0x26>
	SercomUsart *const usart_hw = &(module->hw->USART);
     952:	682a      	ldr	r2, [r5, #0]
     954:	9f03      	ldr	r7, [sp, #12]
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
     956:	8a13      	ldrh	r3, [r2, #16]
	while (usart_is_syncing(module)) {
     958:	b21b      	sxth	r3, r3
     95a:	2b00      	cmp	r3, #0
     95c:	dbfb      	blt.n	956 <usart_init+0x116>
	usart_hw->BAUD.reg = baud;
     95e:	230e      	movs	r3, #14
     960:	aa02      	add	r2, sp, #8
     962:	4694      	mov	ip, r2
     964:	4463      	add	r3, ip
     966:	881b      	ldrh	r3, [r3, #0]
     968:	4642      	mov	r2, r8
     96a:	8153      	strh	r3, [r2, #10]
	ctrla |= transfer_mode;
     96c:	4653      	mov	r3, sl
     96e:	431f      	orrs	r7, r3
     970:	464b      	mov	r3, r9
     972:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     974:	465b      	mov	r3, fp
     976:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
     978:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
     97a:	7df3      	ldrb	r3, [r6, #23]
     97c:	2b00      	cmp	r3, #0
     97e:	d101      	bne.n	984 <usart_init+0x144>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
     980:	3304      	adds	r3, #4
     982:	431f      	orrs	r7, r3
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     984:	7d31      	ldrb	r1, [r6, #20]
     986:	0449      	lsls	r1, r1, #17
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
     988:	7d73      	ldrb	r3, [r6, #21]
     98a:	041b      	lsls	r3, r3, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     98c:	430b      	orrs	r3, r1
	ctrlb |= (uint32_t)config->character_size;
     98e:	7ab1      	ldrb	r1, [r6, #10]
     990:	7af2      	ldrb	r2, [r6, #11]
     992:	4311      	orrs	r1, r2
     994:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
     996:	8933      	ldrh	r3, [r6, #8]
     998:	2bff      	cmp	r3, #255	; 0xff
     99a:	d003      	beq.n	9a4 <usart_init+0x164>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
     99c:	2280      	movs	r2, #128	; 0x80
     99e:	0452      	lsls	r2, r2, #17
     9a0:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
     9a2:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
     9a4:	7f33      	ldrb	r3, [r6, #28]
     9a6:	2b00      	cmp	r3, #0
     9a8:	d103      	bne.n	9b2 <usart_init+0x172>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     9aa:	4b34      	ldr	r3, [pc, #208]	; (a7c <usart_init+0x23c>)
     9ac:	789b      	ldrb	r3, [r3, #2]
     9ae:	079b      	lsls	r3, r3, #30
     9b0:	d501      	bpl.n	9b6 <usart_init+0x176>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
     9b2:	2380      	movs	r3, #128	; 0x80
     9b4:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
     9b6:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
     9b8:	8a13      	ldrh	r3, [r2, #16]
	while (usart_is_syncing(module)) {
     9ba:	b21b      	sxth	r3, r3
     9bc:	2b00      	cmp	r3, #0
     9be:	dbfb      	blt.n	9b8 <usart_init+0x178>
	usart_hw->CTRLB.reg = ctrlb;
     9c0:	4643      	mov	r3, r8
     9c2:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
     9c4:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
     9c6:	8a13      	ldrh	r3, [r2, #16]
	while (usart_is_syncing(module)) {
     9c8:	b21b      	sxth	r3, r3
     9ca:	2b00      	cmp	r3, #0
     9cc:	dbfb      	blt.n	9c6 <usart_init+0x186>
	usart_hw->CTRLA.reg = ctrla;
     9ce:	4643      	mov	r3, r8
     9d0:	601f      	str	r7, [r3, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     9d2:	ab0a      	add	r3, sp, #40	; 0x28
     9d4:	2280      	movs	r2, #128	; 0x80
     9d6:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     9d8:	2200      	movs	r2, #0
     9da:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     9dc:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     9de:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
     9e0:	6a33      	ldr	r3, [r6, #32]
     9e2:	9306      	str	r3, [sp, #24]
     9e4:	6a73      	ldr	r3, [r6, #36]	; 0x24
     9e6:	9307      	str	r3, [sp, #28]
     9e8:	6ab3      	ldr	r3, [r6, #40]	; 0x28
     9ea:	9308      	str	r3, [sp, #32]
     9ec:	6af3      	ldr	r3, [r6, #44]	; 0x2c
     9ee:	9303      	str	r3, [sp, #12]
     9f0:	9309      	str	r3, [sp, #36]	; 0x24
     9f2:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
     9f4:	ae06      	add	r6, sp, #24
     9f6:	e006      	b.n	a06 <usart_init+0x1c6>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     9f8:	0020      	movs	r0, r4
     9fa:	4b21      	ldr	r3, [pc, #132]	; (a80 <usart_init+0x240>)
     9fc:	4798      	blx	r3
     9fe:	e007      	b.n	a10 <usart_init+0x1d0>
     a00:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
     a02:	2f04      	cmp	r7, #4
     a04:	d00d      	beq.n	a22 <usart_init+0x1e2>
     a06:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
     a08:	00bb      	lsls	r3, r7, #2
     a0a:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
     a0c:	2800      	cmp	r0, #0
     a0e:	d0f3      	beq.n	9f8 <usart_init+0x1b8>
		if (current_pinmux != PINMUX_UNUSED) {
     a10:	1c43      	adds	r3, r0, #1
     a12:	d0f5      	beq.n	a00 <usart_init+0x1c0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     a14:	a90a      	add	r1, sp, #40	; 0x28
     a16:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     a18:	0c00      	lsrs	r0, r0, #16
     a1a:	b2c0      	uxtb	r0, r0
     a1c:	4b19      	ldr	r3, [pc, #100]	; (a84 <usart_init+0x244>)
     a1e:	4798      	blx	r3
     a20:	e7ee      	b.n	a00 <usart_init+0x1c0>
		module->callback[i]            = NULL;
     a22:	2300      	movs	r3, #0
     a24:	60ab      	str	r3, [r5, #8]
     a26:	60eb      	str	r3, [r5, #12]
     a28:	612b      	str	r3, [r5, #16]
	module->tx_buffer_ptr              = NULL;
     a2a:	61ab      	str	r3, [r5, #24]
	module->rx_buffer_ptr              = NULL;
     a2c:	616b      	str	r3, [r5, #20]
	module->remaining_tx_buffer_length = 0x0000;
     a2e:	2200      	movs	r2, #0
     a30:	83eb      	strh	r3, [r5, #30]
	module->remaining_rx_buffer_length = 0x0000;
     a32:	83ab      	strh	r3, [r5, #28]
	module->callback_reg_mask          = 0x00;
     a34:	3320      	adds	r3, #32
     a36:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
     a38:	3301      	adds	r3, #1
     a3a:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
     a3c:	3301      	adds	r3, #1
     a3e:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
     a40:	3301      	adds	r3, #1
     a42:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
     a44:	6828      	ldr	r0, [r5, #0]
     a46:	4b05      	ldr	r3, [pc, #20]	; (a5c <usart_init+0x21c>)
     a48:	4798      	blx	r3
     a4a:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
     a4c:	490e      	ldr	r1, [pc, #56]	; (a88 <usart_init+0x248>)
     a4e:	4b0f      	ldr	r3, [pc, #60]	; (a8c <usart_init+0x24c>)
     a50:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     a52:	00a4      	lsls	r4, r4, #2
     a54:	4b0e      	ldr	r3, [pc, #56]	; (a90 <usart_init+0x250>)
     a56:	50e5      	str	r5, [r4, r3]
	return status_code;
     a58:	2000      	movs	r0, #0
     a5a:	e704      	b.n	866 <usart_init+0x26>
     a5c:	000006d5 	.word	0x000006d5
     a60:	40000400 	.word	0x40000400
     a64:	00001461 	.word	0x00001461
     a68:	000013d5 	.word	0x000013d5
     a6c:	00000511 	.word	0x00000511
     a70:	000014ad 	.word	0x000014ad
     a74:	00000453 	.word	0x00000453
     a78:	0000047d 	.word	0x0000047d
     a7c:	41002000 	.word	0x41002000
     a80:	0000055d 	.word	0x0000055d
     a84:	00001589 	.word	0x00001589
     a88:	00000bfd 	.word	0x00000bfd
     a8c:	00000d25 	.word	0x00000d25
     a90:	20000398 	.word	0x20000398

00000a94 <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
     a94:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
     a96:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
     a98:	2a00      	cmp	r2, #0
     a9a:	d101      	bne.n	aa0 <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
     a9c:	0018      	movs	r0, r3
     a9e:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
     aa0:	8bc2      	ldrh	r2, [r0, #30]
     aa2:	b292      	uxth	r2, r2
		return STATUS_BUSY;
     aa4:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
     aa6:	2a00      	cmp	r2, #0
     aa8:	d1f8      	bne.n	a9c <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
     aaa:	6802      	ldr	r2, [r0, #0]
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
     aac:	8a13      	ldrh	r3, [r2, #16]
	while (usart_is_syncing(module)) {
     aae:	b21b      	sxth	r3, r3
     ab0:	2b00      	cmp	r3, #0
     ab2:	dbfb      	blt.n	aac <usart_write_wait+0x18>
	usart_hw->DATA.reg = tx_data;
     ab4:	8311      	strh	r1, [r2, #24]
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
     ab6:	2102      	movs	r1, #2
     ab8:	7b93      	ldrb	r3, [r2, #14]
     aba:	420b      	tst	r3, r1
     abc:	d0fc      	beq.n	ab8 <usart_write_wait+0x24>
	return STATUS_OK;
     abe:	2300      	movs	r3, #0
     ac0:	e7ec      	b.n	a9c <usart_write_wait+0x8>
	...

00000ac4 <usart_write_buffer_wait>:
 */
enum status_code usart_write_buffer_wait(
		struct usart_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
     ac4:	b5f0      	push	{r4, r5, r6, r7, lr}
     ac6:	46ce      	mov	lr, r9
     ac8:	4647      	mov	r7, r8
     aca:	b580      	push	{r7, lr}
     acc:	b083      	sub	sp, #12
     ace:	0005      	movs	r5, r0
     ad0:	9101      	str	r1, [sp, #4]
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
     ad2:	2017      	movs	r0, #23
	if (length == 0) {
     ad4:	2a00      	cmp	r2, #0
     ad6:	d104      	bne.n	ae2 <usart_write_buffer_wait+0x1e>
			return STATUS_ERR_TIMEOUT;
		}
	}

	return STATUS_OK;
}
     ad8:	b003      	add	sp, #12
     ada:	bc0c      	pop	{r2, r3}
     adc:	4690      	mov	r8, r2
     ade:	4699      	mov	r9, r3
     ae0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!(module->transmitter_enabled)) {
     ae2:	79eb      	ldrb	r3, [r5, #7]
		return STATUS_ERR_DENIED;
     ae4:	3005      	adds	r0, #5
	if (!(module->transmitter_enabled)) {
     ae6:	2b00      	cmp	r3, #0
     ae8:	d0f6      	beq.n	ad8 <usart_write_buffer_wait+0x14>
	SercomUsart *const usart_hw = &(module->hw->USART);
     aea:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
     aec:	8a23      	ldrh	r3, [r4, #16]
	while (usart_is_syncing(module)) {
     aee:	b21b      	sxth	r3, r3
     af0:	2b00      	cmp	r3, #0
     af2:	dbfb      	blt.n	aec <usart_write_buffer_wait+0x28>
	while (length--) {
     af4:	3a01      	subs	r2, #1
     af6:	b293      	uxth	r3, r2
     af8:	4699      	mov	r9, r3
     afa:	2600      	movs	r6, #0
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
     afc:	2701      	movs	r7, #1
	while (length--) {
     afe:	4b20      	ldr	r3, [pc, #128]	; (b80 <usart_write_buffer_wait+0xbc>)
     b00:	4698      	mov	r8, r3
     b02:	e011      	b.n	b28 <usart_write_buffer_wait+0x64>
		uint16_t data_to_send = tx_data[tx_pos++];
     b04:	1c73      	adds	r3, r6, #1
     b06:	b29b      	uxth	r3, r3
     b08:	9a01      	ldr	r2, [sp, #4]
     b0a:	5d91      	ldrb	r1, [r2, r6]
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     b0c:	796a      	ldrb	r2, [r5, #5]
     b0e:	2a01      	cmp	r2, #1
     b10:	d017      	beq.n	b42 <usart_write_buffer_wait+0x7e>
		uint16_t data_to_send = tx_data[tx_pos++];
     b12:	b289      	uxth	r1, r1
     b14:	001e      	movs	r6, r3
		usart_write_wait(module, data_to_send);
     b16:	0028      	movs	r0, r5
     b18:	4b1a      	ldr	r3, [pc, #104]	; (b84 <usart_write_buffer_wait+0xc0>)
     b1a:	4798      	blx	r3
	while (length--) {
     b1c:	464b      	mov	r3, r9
     b1e:	3b01      	subs	r3, #1
     b20:	b29b      	uxth	r3, r3
     b22:	4699      	mov	r9, r3
     b24:	4543      	cmp	r3, r8
     b26:	d013      	beq.n	b50 <usart_write_buffer_wait+0x8c>
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
     b28:	7ba3      	ldrb	r3, [r4, #14]
     b2a:	423b      	tst	r3, r7
     b2c:	d1ea      	bne.n	b04 <usart_write_buffer_wait+0x40>
     b2e:	4b14      	ldr	r3, [pc, #80]	; (b80 <usart_write_buffer_wait+0xbc>)
     b30:	7ba2      	ldrb	r2, [r4, #14]
     b32:	423a      	tst	r2, r7
     b34:	d1e6      	bne.n	b04 <usart_write_buffer_wait+0x40>
			} else if (i == USART_TIMEOUT) {
     b36:	2b01      	cmp	r3, #1
     b38:	d019      	beq.n	b6e <usart_write_buffer_wait+0xaa>
     b3a:	3b01      	subs	r3, #1
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
     b3c:	2b00      	cmp	r3, #0
     b3e:	d1f7      	bne.n	b30 <usart_write_buffer_wait+0x6c>
     b40:	e7e0      	b.n	b04 <usart_write_buffer_wait+0x40>
			data_to_send |= (tx_data[tx_pos++] << 8);
     b42:	3602      	adds	r6, #2
     b44:	b2b6      	uxth	r6, r6
     b46:	9a01      	ldr	r2, [sp, #4]
     b48:	5cd3      	ldrb	r3, [r2, r3]
     b4a:	021b      	lsls	r3, r3, #8
     b4c:	4319      	orrs	r1, r3
     b4e:	e7e2      	b.n	b16 <usart_write_buffer_wait+0x52>
		if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) {
     b50:	7ba3      	ldrb	r3, [r4, #14]
     b52:	079b      	lsls	r3, r3, #30
     b54:	d40d      	bmi.n	b72 <usart_write_buffer_wait+0xae>
     b56:	4b0a      	ldr	r3, [pc, #40]	; (b80 <usart_write_buffer_wait+0xbc>)
     b58:	2102      	movs	r1, #2
     b5a:	7ba2      	ldrb	r2, [r4, #14]
     b5c:	420a      	tst	r2, r1
     b5e:	d10a      	bne.n	b76 <usart_write_buffer_wait+0xb2>
		} else if (i == USART_TIMEOUT) {
     b60:	2b01      	cmp	r3, #1
     b62:	d00a      	beq.n	b7a <usart_write_buffer_wait+0xb6>
     b64:	3b01      	subs	r3, #1
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
     b66:	2b00      	cmp	r3, #0
     b68:	d1f7      	bne.n	b5a <usart_write_buffer_wait+0x96>
	return STATUS_OK;
     b6a:	2000      	movs	r0, #0
     b6c:	e7b4      	b.n	ad8 <usart_write_buffer_wait+0x14>
				return STATUS_ERR_TIMEOUT;
     b6e:	2012      	movs	r0, #18
     b70:	e7b2      	b.n	ad8 <usart_write_buffer_wait+0x14>
	return STATUS_OK;
     b72:	2000      	movs	r0, #0
     b74:	e7b0      	b.n	ad8 <usart_write_buffer_wait+0x14>
     b76:	2000      	movs	r0, #0
     b78:	e7ae      	b.n	ad8 <usart_write_buffer_wait+0x14>
			return STATUS_ERR_TIMEOUT;
     b7a:	2012      	movs	r0, #18
     b7c:	e7ac      	b.n	ad8 <usart_write_buffer_wait+0x14>
     b7e:	46c0      	nop			; (mov r8, r8)
     b80:	0000ffff 	.word	0x0000ffff
     b84:	00000a95 	.word	0x00000a95

00000b88 <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
     b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     b8a:	0006      	movs	r6, r0
     b8c:	000c      	movs	r4, r1
     b8e:	0015      	movs	r5, r2
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     b90:	6807      	ldr	r7, [r0, #0]
	cpu_irq_enter_critical();
     b92:	4b0a      	ldr	r3, [pc, #40]	; (bbc <_usart_read_buffer+0x34>)
     b94:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
     b96:	8bb3      	ldrh	r3, [r6, #28]
     b98:	b29b      	uxth	r3, r3
     b9a:	2b00      	cmp	r3, #0
     b9c:	d003      	beq.n	ba6 <_usart_read_buffer+0x1e>
	cpu_irq_leave_critical();
     b9e:	4b08      	ldr	r3, [pc, #32]	; (bc0 <_usart_read_buffer+0x38>)
     ba0:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
     ba2:	2005      	movs	r0, #5
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
	}
#endif

	return STATUS_OK;
}
     ba4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	module->remaining_rx_buffer_length = length;
     ba6:	83b5      	strh	r5, [r6, #28]
     ba8:	4b05      	ldr	r3, [pc, #20]	; (bc0 <_usart_read_buffer+0x38>)
     baa:	4798      	blx	r3
	module->rx_buffer_ptr              = rx_data;
     bac:	6174      	str	r4, [r6, #20]
	module->rx_status                  = STATUS_BUSY;
     bae:	2205      	movs	r2, #5
     bb0:	2322      	movs	r3, #34	; 0x22
     bb2:	54f2      	strb	r2, [r6, r3]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
     bb4:	3b1e      	subs	r3, #30
     bb6:	737b      	strb	r3, [r7, #13]
	return STATUS_OK;
     bb8:	2000      	movs	r0, #0
     bba:	e7f3      	b.n	ba4 <_usart_read_buffer+0x1c>
     bbc:	00000fd9 	.word	0x00000fd9
     bc0:	00001019 	.word	0x00001019

00000bc4 <usart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
     bc4:	1c93      	adds	r3, r2, #2
     bc6:	009b      	lsls	r3, r3, #2
     bc8:	5019      	str	r1, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
     bca:	2120      	movs	r1, #32
     bcc:	2301      	movs	r3, #1
     bce:	4093      	lsls	r3, r2
     bd0:	001a      	movs	r2, r3
     bd2:	5c43      	ldrb	r3, [r0, r1]
     bd4:	4313      	orrs	r3, r2
     bd6:	5443      	strb	r3, [r0, r1]
}
     bd8:	4770      	bx	lr
	...

00000bdc <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
     bdc:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
     bde:	2317      	movs	r3, #23
	if (length == 0) {
     be0:	2a00      	cmp	r2, #0
     be2:	d101      	bne.n	be8 <usart_read_buffer_job+0xc>
		return STATUS_ERR_DENIED;
	}

	/* Issue internal asynchronous read */
	return _usart_read_buffer(module, rx_data, length);
}
     be4:	0018      	movs	r0, r3
     be6:	bd10      	pop	{r4, pc}
	if (!(module->receiver_enabled)) {
     be8:	7984      	ldrb	r4, [r0, #6]
		return STATUS_ERR_DENIED;
     bea:	3305      	adds	r3, #5
	if (!(module->receiver_enabled)) {
     bec:	2c00      	cmp	r4, #0
     bee:	d0f9      	beq.n	be4 <usart_read_buffer_job+0x8>
	return _usart_read_buffer(module, rx_data, length);
     bf0:	4b01      	ldr	r3, [pc, #4]	; (bf8 <usart_read_buffer_job+0x1c>)
     bf2:	4798      	blx	r3
     bf4:	0003      	movs	r3, r0
     bf6:	e7f5      	b.n	be4 <usart_read_buffer_job+0x8>
     bf8:	00000b89 	.word	0x00000b89

00000bfc <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
     bfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
     bfe:	0080      	lsls	r0, r0, #2
     c00:	4b46      	ldr	r3, [pc, #280]	; (d1c <_usart_interrupt_handler+0x120>)
     c02:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
     c04:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
     c06:	8a23      	ldrh	r3, [r4, #16]
	while (usart_is_syncing(module)) {
     c08:	b21b      	sxth	r3, r3
     c0a:	2b00      	cmp	r3, #0
     c0c:	dbfb      	blt.n	c06 <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
     c0e:	7ba3      	ldrb	r3, [r4, #14]
	interrupt_status &= usart_hw->INTENSET.reg;
     c10:	7b66      	ldrb	r6, [r4, #13]
     c12:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
     c14:	2320      	movs	r3, #32
     c16:	5ceb      	ldrb	r3, [r5, r3]
     c18:	2221      	movs	r2, #33	; 0x21
     c1a:	5caf      	ldrb	r7, [r5, r2]
     c1c:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
     c1e:	07f3      	lsls	r3, r6, #31
     c20:	d522      	bpl.n	c68 <_usart_interrupt_handler+0x6c>
		if (module->remaining_tx_buffer_length) {
     c22:	8beb      	ldrh	r3, [r5, #30]
     c24:	b29b      	uxth	r3, r3
     c26:	2b00      	cmp	r3, #0
     c28:	d01c      	beq.n	c64 <_usart_interrupt_handler+0x68>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
     c2a:	69aa      	ldr	r2, [r5, #24]
     c2c:	7813      	ldrb	r3, [r2, #0]
     c2e:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
     c30:	1c51      	adds	r1, r2, #1
     c32:	61a9      	str	r1, [r5, #24]

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     c34:	7969      	ldrb	r1, [r5, #5]
     c36:	2901      	cmp	r1, #1
     c38:	d00e      	beq.n	c58 <_usart_interrupt_handler+0x5c>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
     c3a:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
     c3c:	05db      	lsls	r3, r3, #23
     c3e:	0ddb      	lsrs	r3, r3, #23
     c40:	8323      	strh	r3, [r4, #24]

			if (--(module->remaining_tx_buffer_length) == 0) {
     c42:	8beb      	ldrh	r3, [r5, #30]
     c44:	3b01      	subs	r3, #1
     c46:	b29b      	uxth	r3, r3
     c48:	83eb      	strh	r3, [r5, #30]
     c4a:	2b00      	cmp	r3, #0
     c4c:	d10c      	bne.n	c68 <_usart_interrupt_handler+0x6c>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
     c4e:	3301      	adds	r3, #1
     c50:	7323      	strb	r3, [r4, #12]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
     c52:	3301      	adds	r3, #1
     c54:	7363      	strb	r3, [r4, #13]
     c56:	e007      	b.n	c68 <_usart_interrupt_handler+0x6c>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
     c58:	7851      	ldrb	r1, [r2, #1]
     c5a:	0209      	lsls	r1, r1, #8
     c5c:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
     c5e:	3202      	adds	r2, #2
     c60:	61aa      	str	r2, [r5, #24]
     c62:	e7eb      	b.n	c3c <_usart_interrupt_handler+0x40>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
     c64:	2301      	movs	r3, #1
     c66:	7323      	strb	r3, [r4, #12]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
     c68:	07b3      	lsls	r3, r6, #30
     c6a:	d506      	bpl.n	c7a <_usart_interrupt_handler+0x7e>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
     c6c:	2302      	movs	r3, #2
     c6e:	7323      	strb	r3, [r4, #12]
		module->tx_status = STATUS_OK;
     c70:	2200      	movs	r2, #0
     c72:	3321      	adds	r3, #33	; 0x21
     c74:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
     c76:	07fb      	lsls	r3, r7, #31
     c78:	d416      	bmi.n	ca8 <_usart_interrupt_handler+0xac>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
     c7a:	0773      	lsls	r3, r6, #29
     c7c:	d54d      	bpl.n	d1a <_usart_interrupt_handler+0x11e>

		if (module->remaining_rx_buffer_length) {
     c7e:	8bab      	ldrh	r3, [r5, #28]
     c80:	b29b      	uxth	r3, r3
     c82:	2b00      	cmp	r3, #0
     c84:	d047      	beq.n	d16 <_usart_interrupt_handler+0x11a>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     c86:	8a23      	ldrh	r3, [r4, #16]
     c88:	b2db      	uxtb	r3, r3
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
     c8a:	075a      	lsls	r2, r3, #29
     c8c:	d020      	beq.n	cd0 <_usart_interrupt_handler+0xd4>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
     c8e:	079a      	lsls	r2, r3, #30
     c90:	d50e      	bpl.n	cb0 <_usart_interrupt_handler+0xb4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
     c92:	221a      	movs	r2, #26
     c94:	2322      	movs	r3, #34	; 0x22
     c96:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
     c98:	3b20      	subs	r3, #32
     c9a:	8223      	strh	r3, [r4, #16]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
     c9c:	077b      	lsls	r3, r7, #29
     c9e:	d53c      	bpl.n	d1a <_usart_interrupt_handler+0x11e>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
     ca0:	692b      	ldr	r3, [r5, #16]
     ca2:	0028      	movs	r0, r5
     ca4:	4798      	blx	r3
     ca6:	e038      	b.n	d1a <_usart_interrupt_handler+0x11e>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
     ca8:	0028      	movs	r0, r5
     caa:	68ab      	ldr	r3, [r5, #8]
     cac:	4798      	blx	r3
     cae:	e7e4      	b.n	c7a <_usart_interrupt_handler+0x7e>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
     cb0:	075a      	lsls	r2, r3, #29
     cb2:	d505      	bpl.n	cc0 <_usart_interrupt_handler+0xc4>
					module->rx_status = STATUS_ERR_OVERFLOW;
     cb4:	221e      	movs	r2, #30
     cb6:	2322      	movs	r3, #34	; 0x22
     cb8:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
     cba:	3b1e      	subs	r3, #30
     cbc:	8223      	strh	r3, [r4, #16]
     cbe:	e7ed      	b.n	c9c <_usart_interrupt_handler+0xa0>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
     cc0:	07db      	lsls	r3, r3, #31
     cc2:	d5eb      	bpl.n	c9c <_usart_interrupt_handler+0xa0>
					module->rx_status = STATUS_ERR_BAD_DATA;
     cc4:	2213      	movs	r2, #19
     cc6:	2322      	movs	r3, #34	; 0x22
     cc8:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
     cca:	3b21      	subs	r3, #33	; 0x21
     ccc:	8223      	strh	r3, [r4, #16]
     cce:	e7e5      	b.n	c9c <_usart_interrupt_handler+0xa0>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
     cd0:	8b23      	ldrh	r3, [r4, #24]
     cd2:	05db      	lsls	r3, r3, #23
     cd4:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
     cd6:	b2da      	uxtb	r2, r3
     cd8:	6969      	ldr	r1, [r5, #20]
     cda:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
     cdc:	696a      	ldr	r2, [r5, #20]
     cde:	1c51      	adds	r1, r2, #1
     ce0:	6169      	str	r1, [r5, #20]

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     ce2:	7969      	ldrb	r1, [r5, #5]
     ce4:	2901      	cmp	r1, #1
     ce6:	d010      	beq.n	d0a <_usart_interrupt_handler+0x10e>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
     ce8:	8bab      	ldrh	r3, [r5, #28]
     cea:	3b01      	subs	r3, #1
     cec:	b29b      	uxth	r3, r3
     cee:	83ab      	strh	r3, [r5, #28]
     cf0:	2b00      	cmp	r3, #0
     cf2:	d112      	bne.n	d1a <_usart_interrupt_handler+0x11e>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
     cf4:	3304      	adds	r3, #4
     cf6:	7323      	strb	r3, [r4, #12]
					module->rx_status = STATUS_OK;
     cf8:	2200      	movs	r2, #0
     cfa:	331e      	adds	r3, #30
     cfc:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
     cfe:	07bb      	lsls	r3, r7, #30
     d00:	d50b      	bpl.n	d1a <_usart_interrupt_handler+0x11e>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
     d02:	68eb      	ldr	r3, [r5, #12]
     d04:	0028      	movs	r0, r5
     d06:	4798      	blx	r3
     d08:	e007      	b.n	d1a <_usart_interrupt_handler+0x11e>
					*(module->rx_buffer_ptr) = (received_data >> 8);
     d0a:	0a1b      	lsrs	r3, r3, #8
     d0c:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
     d0e:	696b      	ldr	r3, [r5, #20]
     d10:	3301      	adds	r3, #1
     d12:	616b      	str	r3, [r5, #20]
     d14:	e7e8      	b.n	ce8 <_usart_interrupt_handler+0xec>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
     d16:	2304      	movs	r3, #4
     d18:	7323      	strb	r3, [r4, #12]
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
     d1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     d1c:	20000398 	.word	0x20000398

00000d20 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
     d20:	4770      	bx	lr
	...

00000d24 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
     d24:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
     d26:	4b0a      	ldr	r3, [pc, #40]	; (d50 <_sercom_set_handler+0x2c>)
     d28:	781b      	ldrb	r3, [r3, #0]
     d2a:	2b00      	cmp	r3, #0
     d2c:	d10c      	bne.n	d48 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     d2e:	4f09      	ldr	r7, [pc, #36]	; (d54 <_sercom_set_handler+0x30>)
     d30:	4e09      	ldr	r6, [pc, #36]	; (d58 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
     d32:	4d0a      	ldr	r5, [pc, #40]	; (d5c <_sercom_set_handler+0x38>)
     d34:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     d36:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
     d38:	195a      	adds	r2, r3, r5
     d3a:	6014      	str	r4, [r2, #0]
     d3c:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     d3e:	2b18      	cmp	r3, #24
     d40:	d1f9      	bne.n	d36 <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
     d42:	2201      	movs	r2, #1
     d44:	4b02      	ldr	r3, [pc, #8]	; (d50 <_sercom_set_handler+0x2c>)
     d46:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
     d48:	0080      	lsls	r0, r0, #2
     d4a:	4b02      	ldr	r3, [pc, #8]	; (d54 <_sercom_set_handler+0x30>)
     d4c:	50c1      	str	r1, [r0, r3]
}
     d4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
     d50:	20000062 	.word	0x20000062
     d54:	20000064 	.word	0x20000064
     d58:	00000d21 	.word	0x00000d21
     d5c:	20000398 	.word	0x20000398

00000d60 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
     d60:	b500      	push	{lr}
     d62:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
     d64:	2307      	movs	r3, #7
     d66:	466a      	mov	r2, sp
     d68:	7013      	strb	r3, [r2, #0]
     d6a:	3301      	adds	r3, #1
     d6c:	7053      	strb	r3, [r2, #1]
     d6e:	3301      	adds	r3, #1
     d70:	7093      	strb	r3, [r2, #2]
     d72:	3301      	adds	r3, #1
     d74:	70d3      	strb	r3, [r2, #3]
     d76:	3301      	adds	r3, #1
     d78:	7113      	strb	r3, [r2, #4]
     d7a:	3301      	adds	r3, #1
     d7c:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
     d7e:	4b03      	ldr	r3, [pc, #12]	; (d8c <_sercom_get_interrupt_vector+0x2c>)
     d80:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
     d82:	466b      	mov	r3, sp
     d84:	5618      	ldrsb	r0, [r3, r0]
}
     d86:	b003      	add	sp, #12
     d88:	bd00      	pop	{pc}
     d8a:	46c0      	nop			; (mov r8, r8)
     d8c:	000006d5 	.word	0x000006d5

00000d90 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
     d90:	b510      	push	{r4, lr}
     d92:	4b02      	ldr	r3, [pc, #8]	; (d9c <SERCOM0_Handler+0xc>)
     d94:	681b      	ldr	r3, [r3, #0]
     d96:	2000      	movs	r0, #0
     d98:	4798      	blx	r3
     d9a:	bd10      	pop	{r4, pc}
     d9c:	20000064 	.word	0x20000064

00000da0 <SERCOM1_Handler>:
     da0:	b510      	push	{r4, lr}
     da2:	4b02      	ldr	r3, [pc, #8]	; (dac <SERCOM1_Handler+0xc>)
     da4:	685b      	ldr	r3, [r3, #4]
     da6:	2001      	movs	r0, #1
     da8:	4798      	blx	r3
     daa:	bd10      	pop	{r4, pc}
     dac:	20000064 	.word	0x20000064

00000db0 <SERCOM2_Handler>:
     db0:	b510      	push	{r4, lr}
     db2:	4b02      	ldr	r3, [pc, #8]	; (dbc <SERCOM2_Handler+0xc>)
     db4:	689b      	ldr	r3, [r3, #8]
     db6:	2002      	movs	r0, #2
     db8:	4798      	blx	r3
     dba:	bd10      	pop	{r4, pc}
     dbc:	20000064 	.word	0x20000064

00000dc0 <SERCOM3_Handler>:
     dc0:	b510      	push	{r4, lr}
     dc2:	4b02      	ldr	r3, [pc, #8]	; (dcc <SERCOM3_Handler+0xc>)
     dc4:	68db      	ldr	r3, [r3, #12]
     dc6:	2003      	movs	r0, #3
     dc8:	4798      	blx	r3
     dca:	bd10      	pop	{r4, pc}
     dcc:	20000064 	.word	0x20000064

00000dd0 <SERCOM4_Handler>:
     dd0:	b510      	push	{r4, lr}
     dd2:	4b02      	ldr	r3, [pc, #8]	; (ddc <SERCOM4_Handler+0xc>)
     dd4:	691b      	ldr	r3, [r3, #16]
     dd6:	2004      	movs	r0, #4
     dd8:	4798      	blx	r3
     dda:	bd10      	pop	{r4, pc}
     ddc:	20000064 	.word	0x20000064

00000de0 <SERCOM5_Handler>:
     de0:	b510      	push	{r4, lr}
     de2:	4b02      	ldr	r3, [pc, #8]	; (dec <SERCOM5_Handler+0xc>)
     de4:	695b      	ldr	r3, [r3, #20]
     de6:	2005      	movs	r0, #5
     de8:	4798      	blx	r3
     dea:	bd10      	pop	{r4, pc}
     dec:	20000064 	.word	0x20000064

00000df0 <watchdog_early_warning_callback>:
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
     df0:	2280      	movs	r2, #128	; 0x80
     df2:	0112      	lsls	r2, r2, #4
     df4:	4b01      	ldr	r3, [pc, #4]	; (dfc <watchdog_early_warning_callback+0xc>)
     df6:	619a      	str	r2, [r3, #24]
 * @note				- 
 ******************************************************************************************************/
void watchdog_early_warning_callback(void)
{
    port_pin_set_output_level(PIN_PA11, 1);		// Orange2 LED
}
     df8:	4770      	bx	lr
     dfa:	46c0      	nop			; (mov r8, r8)
     dfc:	41004400 	.word	0x41004400

00000e00 <SysTick_Handler>:
}
     e00:	4770      	bx	lr
	...

00000e04 <config_GPIO>:
{
     e04:	b5f0      	push	{r4, r5, r6, r7, lr}
     e06:	b089      	sub	sp, #36	; 0x24
		uint8_t statusMsg[] = "Configuring GPIO....\r\n";
     e08:	a802      	add	r0, sp, #8
     e0a:	4b10      	ldr	r3, [pc, #64]	; (e4c <config_GPIO+0x48>)
     e0c:	0002      	movs	r2, r0
     e0e:	cb32      	ldmia	r3!, {r1, r4, r5}
     e10:	c232      	stmia	r2!, {r1, r4, r5}
     e12:	cb12      	ldmia	r3!, {r1, r4}
     e14:	c212      	stmia	r2!, {r1, r4}
     e16:	8819      	ldrh	r1, [r3, #0]
     e18:	8011      	strh	r1, [r2, #0]
     e1a:	789b      	ldrb	r3, [r3, #2]
     e1c:	7093      	strb	r3, [r2, #2]
		writeStr(statusMsg, sizeof(statusMsg));			//uart debug statement
     e1e:	2117      	movs	r1, #23
     e20:	4b0b      	ldr	r3, [pc, #44]	; (e50 <config_GPIO+0x4c>)
     e22:	4798      	blx	r3
	config->direction  = PORT_PIN_DIR_INPUT;
     e24:	ac01      	add	r4, sp, #4
     e26:	2600      	movs	r6, #0
     e28:	7026      	strb	r6, [r4, #0]
	config->powersave  = false;
     e2a:	70a6      	strb	r6, [r4, #2]
		pin_conf.input_pull = PORT_PIN_PULL_DOWN;
     e2c:	2702      	movs	r7, #2
     e2e:	7067      	strb	r7, [r4, #1]
		port_pin_set_config(STATUSLED_GREEN, &pin_conf);
     e30:	0021      	movs	r1, r4
     e32:	2013      	movs	r0, #19
     e34:	4d07      	ldr	r5, [pc, #28]	; (e54 <config_GPIO+0x50>)
     e36:	47a8      	blx	r5
		port_pin_set_config(STATUSLED_ORANGE, &pin_conf);
     e38:	0021      	movs	r1, r4
     e3a:	2012      	movs	r0, #18
     e3c:	47a8      	blx	r5
		pin_conf.direction  = PORT_PIN_DIR_INPUT;
     e3e:	7026      	strb	r6, [r4, #0]
		pin_conf.input_pull = PORT_PIN_PULL_DOWN;
     e40:	7067      	strb	r7, [r4, #1]
		port_pin_set_config(LIMIT_SW_PIN, &pin_conf);
     e42:	0021      	movs	r1, r4
     e44:	2029      	movs	r0, #41	; 0x29
     e46:	47a8      	blx	r5
}
     e48:	b009      	add	sp, #36	; 0x24
     e4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
     e4c:	0000191c 	.word	0x0000191c
     e50:	00001685 	.word	0x00001685
     e54:	00000fb1 	.word	0x00000fb1

00000e58 <config_GCLK>:
{
     e58:	b500      	push	{lr}
     e5a:	b085      	sub	sp, #20
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
	config->high_when_disabled = false;
     e5c:	a901      	add	r1, sp, #4
     e5e:	2300      	movs	r3, #0
     e60:	704b      	strb	r3, [r1, #1]
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
#endif
	config->run_in_standby     = false;
     e62:	720b      	strb	r3, [r1, #8]
	config->output_enable      = false;
     e64:	724b      	strb	r3, [r1, #9]
	gclk_gen_config1.source_clock = SYSTEM_CLOCK_SOURCE_ULP32K;
     e66:	3303      	adds	r3, #3
     e68:	700b      	strb	r3, [r1, #0]
	gclk_gen_config1.division_factor = 8;
     e6a:	3305      	adds	r3, #5
     e6c:	604b      	str	r3, [r1, #4]
	system_gclk_gen_set_config(GCLK_GENERATOR_1,&gclk_gen_config1);
     e6e:	2001      	movs	r0, #1
     e70:	4b03      	ldr	r3, [pc, #12]	; (e80 <config_GCLK+0x28>)
     e72:	4798      	blx	r3
	system_gclk_gen_enable(GCLK_GENERATOR_1);
     e74:	2001      	movs	r0, #1
     e76:	4b03      	ldr	r3, [pc, #12]	; (e84 <config_GCLK+0x2c>)
     e78:	4798      	blx	r3
}
     e7a:	b005      	add	sp, #20
     e7c:	bd00      	pop	{pc}
     e7e:	46c0      	nop			; (mov r8, r8)
     e80:	0000124d 	.word	0x0000124d
     e84:	00001305 	.word	0x00001305

00000e88 <config_WDT>:
* @return				- void
*
* @note				-
******************************************************************************************************/
void config_WDT(void)
{
     e88:	b500      	push	{lr}
     e8a:	b083      	sub	sp, #12
	config->always_on            = false;
     e8c:	2200      	movs	r2, #0
     e8e:	466b      	mov	r3, sp
     e90:	701a      	strb	r2, [r3, #0]
	config->enable               = true;
     e92:	2301      	movs	r3, #1
     e94:	4669      	mov	r1, sp
     e96:	704b      	strb	r3, [r1, #1]
	config->timeout_period       = WDT_PERIOD_16384CLK;
     e98:	210c      	movs	r1, #12
     e9a:	4668      	mov	r0, sp
     e9c:	70c1      	strb	r1, [r0, #3]
	config->window_period        = WDT_PERIOD_NONE;
     e9e:	7102      	strb	r2, [r0, #4]
    struct wdt_conf config_wdt;
    wdt_get_config_defaults(&config_wdt);

    /* Set the Watchdog configuration settings */
    config_wdt.always_on            = false;
	config_wdt.clock_source			= GCLK_GENERATOR_1;
     ea0:	7083      	strb	r3, [r0, #2]
    config_wdt.timeout_period       = WDT_PERIOD_16384CLK;
    config_wdt.early_warning_period = WDT_PERIOD_8192CLK;
     ea2:	330a      	adds	r3, #10
     ea4:	7143      	strb	r3, [r0, #5]

    /* Initialize and enable the Watchdog with the user settings */
    wdt_set_config(&config_wdt);
     ea6:	4b02      	ldr	r3, [pc, #8]	; (eb0 <config_WDT+0x28>)
     ea8:	4798      	blx	r3
}
     eaa:	b003      	add	sp, #12
     eac:	bd00      	pop	{pc}
     eae:	46c0      	nop			; (mov r8, r8)
     eb0:	00000105 	.word	0x00000105

00000eb4 <config_WDT_Callback>:
* @return				- void
*
* @note				-
******************************************************************************************************/
void config_WDT_Callback(void)
{
     eb4:	b510      	push	{r4, lr}
    wdt_register_callback(watchdog_early_warning_callback, WDT_CALLBACK_EARLY_WARNING);
     eb6:	2100      	movs	r1, #0
     eb8:	4803      	ldr	r0, [pc, #12]	; (ec8 <config_WDT_Callback+0x14>)
     eba:	4b04      	ldr	r3, [pc, #16]	; (ecc <config_WDT_Callback+0x18>)
     ebc:	4798      	blx	r3
    wdt_enable_callback(WDT_CALLBACK_EARLY_WARNING);
     ebe:	2000      	movs	r0, #0
     ec0:	4b03      	ldr	r3, [pc, #12]	; (ed0 <config_WDT_Callback+0x1c>)
     ec2:	4798      	blx	r3
}
     ec4:	bd10      	pop	{r4, pc}
     ec6:	46c0      	nop			; (mov r8, r8)
     ec8:	00000df1 	.word	0x00000df1
     ecc:	00000205 	.word	0x00000205
     ed0:	00000219 	.word	0x00000219

00000ed4 <sys_config>:
 * @return				- void
 *
 * @note				- 
 ******************************************************************************************************/
void sys_config(void)
{
     ed4:	b510      	push	{r4, lr}
	SysTick_Config(system_gclk_gen_get_hz(GCLK_GENERATOR_0));
     ed6:	2000      	movs	r0, #0
     ed8:	4b11      	ldr	r3, [pc, #68]	; (f20 <sys_config+0x4c>)
     eda:	4798      	blx	r3
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
     edc:	3801      	subs	r0, #1
     ede:	4b11      	ldr	r3, [pc, #68]	; (f24 <sys_config+0x50>)
     ee0:	4298      	cmp	r0, r3
     ee2:	d80d      	bhi.n	f00 <sys_config+0x2c>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
     ee4:	4a10      	ldr	r2, [pc, #64]	; (f28 <sys_config+0x54>)
     ee6:	6050      	str	r0, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
     ee8:	4810      	ldr	r0, [pc, #64]	; (f2c <sys_config+0x58>)
     eea:	6a03      	ldr	r3, [r0, #32]
     eec:	021b      	lsls	r3, r3, #8
     eee:	0a1b      	lsrs	r3, r3, #8
     ef0:	21c0      	movs	r1, #192	; 0xc0
     ef2:	0609      	lsls	r1, r1, #24
     ef4:	430b      	orrs	r3, r1
     ef6:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
     ef8:	2300      	movs	r3, #0
     efa:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
     efc:	3307      	adds	r3, #7
     efe:	6013      	str	r3, [r2, #0]
	delay_init();
     f00:	4b0b      	ldr	r3, [pc, #44]	; (f30 <sys_config+0x5c>)
     f02:	4798      	blx	r3
	// Initialize EEPROM
	//config_eeprom();
	//config_BOD();
	
	// Initialize WDT	
	config_GCLK();
     f04:	4b0b      	ldr	r3, [pc, #44]	; (f34 <sys_config+0x60>)
     f06:	4798      	blx	r3
	config_WDT();
     f08:	4b0b      	ldr	r3, [pc, #44]	; (f38 <sys_config+0x64>)
     f0a:	4798      	blx	r3
	config_WDT_Callback();
     f0c:	4b0b      	ldr	r3, [pc, #44]	; (f3c <sys_config+0x68>)
     f0e:	4798      	blx	r3
	cpu_irq_enable();
     f10:	2201      	movs	r2, #1
     f12:	4b0b      	ldr	r3, [pc, #44]	; (f40 <sys_config+0x6c>)
     f14:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     f16:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
     f1a:	b662      	cpsie	i
	// Initialize Timer
	//configure_timer();	

	system_interrupt_enable_global();
	
}
     f1c:	bd10      	pop	{r4, pc}
     f1e:	46c0      	nop			; (mov r8, r8)
     f20:	00001349 	.word	0x00001349
     f24:	00ffffff 	.word	0x00ffffff
     f28:	e000e010 	.word	0xe000e010
     f2c:	e000ed00 	.word	0xe000ed00
     f30:	00000f45 	.word	0x00000f45
     f34:	00000e59 	.word	0x00000e59
     f38:	00000e89 	.word	0x00000e89
     f3c:	00000eb5 	.word	0x00000eb5
     f40:	2000001c 	.word	0x2000001c

00000f44 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     f44:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
     f46:	2000      	movs	r0, #0
     f48:	4b08      	ldr	r3, [pc, #32]	; (f6c <delay_init+0x28>)
     f4a:	4798      	blx	r3
     f4c:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
     f4e:	4c08      	ldr	r4, [pc, #32]	; (f70 <delay_init+0x2c>)
     f50:	21fa      	movs	r1, #250	; 0xfa
     f52:	0089      	lsls	r1, r1, #2
     f54:	47a0      	blx	r4
     f56:	4b07      	ldr	r3, [pc, #28]	; (f74 <delay_init+0x30>)
     f58:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     f5a:	4907      	ldr	r1, [pc, #28]	; (f78 <delay_init+0x34>)
     f5c:	0028      	movs	r0, r5
     f5e:	47a0      	blx	r4
     f60:	4b06      	ldr	r3, [pc, #24]	; (f7c <delay_init+0x38>)
     f62:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     f64:	2205      	movs	r2, #5
     f66:	4b06      	ldr	r3, [pc, #24]	; (f80 <delay_init+0x3c>)
     f68:	601a      	str	r2, [r3, #0]
}
     f6a:	bd70      	pop	{r4, r5, r6, pc}
     f6c:	00001349 	.word	0x00001349
     f70:	00001751 	.word	0x00001751
     f74:	20000014 	.word	0x20000014
     f78:	000f4240 	.word	0x000f4240
     f7c:	20000018 	.word	0x20000018
     f80:	e000e010 	.word	0xe000e010

00000f84 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
     f84:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
     f86:	4b08      	ldr	r3, [pc, #32]	; (fa8 <delay_cycles_ms+0x24>)
     f88:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
     f8a:	4a08      	ldr	r2, [pc, #32]	; (fac <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
     f8c:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     f8e:	2180      	movs	r1, #128	; 0x80
     f90:	0249      	lsls	r1, r1, #9
	while (n--) {
     f92:	3801      	subs	r0, #1
     f94:	d307      	bcc.n	fa6 <delay_cycles_ms+0x22>
	if (n > 0) {
     f96:	2c00      	cmp	r4, #0
     f98:	d0fb      	beq.n	f92 <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
     f9a:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     f9c:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     f9e:	6813      	ldr	r3, [r2, #0]
     fa0:	420b      	tst	r3, r1
     fa2:	d0fc      	beq.n	f9e <delay_cycles_ms+0x1a>
     fa4:	e7f5      	b.n	f92 <delay_cycles_ms+0xe>
	}
}
     fa6:	bd30      	pop	{r4, r5, pc}
     fa8:	20000014 	.word	0x20000014
     fac:	e000e010 	.word	0xe000e010

00000fb0 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     fb0:	b500      	push	{lr}
     fb2:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
     fb4:	ab01      	add	r3, sp, #4
     fb6:	2280      	movs	r2, #128	; 0x80
     fb8:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     fba:	780a      	ldrb	r2, [r1, #0]
     fbc:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     fbe:	784a      	ldrb	r2, [r1, #1]
     fc0:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     fc2:	788a      	ldrb	r2, [r1, #2]
     fc4:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     fc6:	0019      	movs	r1, r3
     fc8:	4b01      	ldr	r3, [pc, #4]	; (fd0 <port_pin_set_config+0x20>)
     fca:	4798      	blx	r3
}
     fcc:	b003      	add	sp, #12
     fce:	bd00      	pop	{pc}
     fd0:	00001589 	.word	0x00001589

00000fd4 <system_board_init>:
{
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
     fd4:	4770      	bx	lr
	...

00000fd8 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     fd8:	4b0c      	ldr	r3, [pc, #48]	; (100c <cpu_irq_enter_critical+0x34>)
     fda:	681b      	ldr	r3, [r3, #0]
     fdc:	2b00      	cmp	r3, #0
     fde:	d106      	bne.n	fee <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     fe0:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
     fe4:	2b00      	cmp	r3, #0
     fe6:	d007      	beq.n	ff8 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     fe8:	2200      	movs	r2, #0
     fea:	4b09      	ldr	r3, [pc, #36]	; (1010 <cpu_irq_enter_critical+0x38>)
     fec:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     fee:	4a07      	ldr	r2, [pc, #28]	; (100c <cpu_irq_enter_critical+0x34>)
     ff0:	6813      	ldr	r3, [r2, #0]
     ff2:	3301      	adds	r3, #1
     ff4:	6013      	str	r3, [r2, #0]
}
     ff6:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
     ff8:	b672      	cpsid	i
     ffa:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     ffe:	2200      	movs	r2, #0
    1000:	4b04      	ldr	r3, [pc, #16]	; (1014 <cpu_irq_enter_critical+0x3c>)
    1002:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    1004:	3201      	adds	r2, #1
    1006:	4b02      	ldr	r3, [pc, #8]	; (1010 <cpu_irq_enter_critical+0x38>)
    1008:	701a      	strb	r2, [r3, #0]
    100a:	e7f0      	b.n	fee <cpu_irq_enter_critical+0x16>
    100c:	2000007c 	.word	0x2000007c
    1010:	20000080 	.word	0x20000080
    1014:	2000001c 	.word	0x2000001c

00001018 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    1018:	4b08      	ldr	r3, [pc, #32]	; (103c <cpu_irq_leave_critical+0x24>)
    101a:	681a      	ldr	r2, [r3, #0]
    101c:	3a01      	subs	r2, #1
    101e:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    1020:	681b      	ldr	r3, [r3, #0]
    1022:	2b00      	cmp	r3, #0
    1024:	d109      	bne.n	103a <cpu_irq_leave_critical+0x22>
    1026:	4b06      	ldr	r3, [pc, #24]	; (1040 <cpu_irq_leave_critical+0x28>)
    1028:	781b      	ldrb	r3, [r3, #0]
    102a:	2b00      	cmp	r3, #0
    102c:	d005      	beq.n	103a <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    102e:	2201      	movs	r2, #1
    1030:	4b04      	ldr	r3, [pc, #16]	; (1044 <cpu_irq_leave_critical+0x2c>)
    1032:	701a      	strb	r2, [r3, #0]
    1034:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    1038:	b662      	cpsie	i
	}
}
    103a:	4770      	bx	lr
    103c:	2000007c 	.word	0x2000007c
    1040:	20000080 	.word	0x20000080
    1044:	2000001c 	.word	0x2000001c

00001048 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    1048:	b510      	push	{r4, lr}
	switch (clock_source) {
    104a:	2807      	cmp	r0, #7
    104c:	d803      	bhi.n	1056 <system_clock_source_get_hz+0xe>
    104e:	0080      	lsls	r0, r0, #2
    1050:	4b16      	ldr	r3, [pc, #88]	; (10ac <system_clock_source_get_hz+0x64>)
    1052:	581b      	ldr	r3, [r3, r0]
    1054:	469f      	mov	pc, r3
		}

		return 48000000UL;

	default:
		return 0;
    1056:	2000      	movs	r0, #0
    1058:	e027      	b.n	10aa <system_clock_source_get_hz+0x62>
		return _system_clock_inst.xosc.frequency;
    105a:	4b15      	ldr	r3, [pc, #84]	; (10b0 <system_clock_source_get_hz+0x68>)
    105c:	68d8      	ldr	r0, [r3, #12]
    105e:	e024      	b.n	10aa <system_clock_source_get_hz+0x62>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    1060:	4b14      	ldr	r3, [pc, #80]	; (10b4 <system_clock_source_get_hz+0x6c>)
    1062:	6a1b      	ldr	r3, [r3, #32]
    1064:	059b      	lsls	r3, r3, #22
    1066:	0f9b      	lsrs	r3, r3, #30
    1068:	4813      	ldr	r0, [pc, #76]	; (10b8 <system_clock_source_get_hz+0x70>)
    106a:	40d8      	lsrs	r0, r3
    106c:	e01d      	b.n	10aa <system_clock_source_get_hz+0x62>
		return _system_clock_inst.xosc32k.frequency;
    106e:	4b10      	ldr	r3, [pc, #64]	; (10b0 <system_clock_source_get_hz+0x68>)
    1070:	6918      	ldr	r0, [r3, #16]
    1072:	e01a      	b.n	10aa <system_clock_source_get_hz+0x62>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    1074:	4b0e      	ldr	r3, [pc, #56]	; (10b0 <system_clock_source_get_hz+0x68>)
    1076:	681b      	ldr	r3, [r3, #0]
			return 0;
    1078:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    107a:	079b      	lsls	r3, r3, #30
    107c:	d515      	bpl.n	10aa <system_clock_source_get_hz+0x62>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    107e:	490d      	ldr	r1, [pc, #52]	; (10b4 <system_clock_source_get_hz+0x6c>)
    1080:	2210      	movs	r2, #16
    1082:	68cb      	ldr	r3, [r1, #12]
    1084:	421a      	tst	r2, r3
    1086:	d0fc      	beq.n	1082 <system_clock_source_get_hz+0x3a>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    1088:	4b09      	ldr	r3, [pc, #36]	; (10b0 <system_clock_source_get_hz+0x68>)
    108a:	681b      	ldr	r3, [r3, #0]
    108c:	075b      	lsls	r3, r3, #29
    108e:	d401      	bmi.n	1094 <system_clock_source_get_hz+0x4c>
		return 48000000UL;
    1090:	480a      	ldr	r0, [pc, #40]	; (10bc <system_clock_source_get_hz+0x74>)
    1092:	e00a      	b.n	10aa <system_clock_source_get_hz+0x62>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    1094:	2000      	movs	r0, #0
    1096:	4b0a      	ldr	r3, [pc, #40]	; (10c0 <system_clock_source_get_hz+0x78>)
    1098:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    109a:	4b05      	ldr	r3, [pc, #20]	; (10b0 <system_clock_source_get_hz+0x68>)
    109c:	689b      	ldr	r3, [r3, #8]
    109e:	041b      	lsls	r3, r3, #16
    10a0:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    10a2:	4358      	muls	r0, r3
    10a4:	e001      	b.n	10aa <system_clock_source_get_hz+0x62>
		return 32768UL;
    10a6:	2080      	movs	r0, #128	; 0x80
    10a8:	0200      	lsls	r0, r0, #8
	}
}
    10aa:	bd10      	pop	{r4, pc}
    10ac:	00001934 	.word	0x00001934
    10b0:	20000084 	.word	0x20000084
    10b4:	40000800 	.word	0x40000800
    10b8:	007a1200 	.word	0x007a1200
    10bc:	02dc6c00 	.word	0x02dc6c00
    10c0:	000014ad 	.word	0x000014ad

000010c4 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    10c4:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    10c6:	490c      	ldr	r1, [pc, #48]	; (10f8 <system_clock_source_osc8m_set_config+0x34>)
    10c8:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    10ca:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    10cc:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    10ce:	7840      	ldrb	r0, [r0, #1]
    10d0:	2201      	movs	r2, #1
    10d2:	4010      	ands	r0, r2
    10d4:	0180      	lsls	r0, r0, #6
    10d6:	2640      	movs	r6, #64	; 0x40
    10d8:	43b3      	bics	r3, r6
    10da:	4303      	orrs	r3, r0
    10dc:	402a      	ands	r2, r5
    10de:	01d2      	lsls	r2, r2, #7
    10e0:	2080      	movs	r0, #128	; 0x80
    10e2:	4383      	bics	r3, r0
    10e4:	4313      	orrs	r3, r2
    10e6:	2203      	movs	r2, #3
    10e8:	4022      	ands	r2, r4
    10ea:	0212      	lsls	r2, r2, #8
    10ec:	4803      	ldr	r0, [pc, #12]	; (10fc <system_clock_source_osc8m_set_config+0x38>)
    10ee:	4003      	ands	r3, r0
    10f0:	4313      	orrs	r3, r2
    10f2:	620b      	str	r3, [r1, #32]
}
    10f4:	bd70      	pop	{r4, r5, r6, pc}
    10f6:	46c0      	nop			; (mov r8, r8)
    10f8:	40000800 	.word	0x40000800
    10fc:	fffffcff 	.word	0xfffffcff

00001100 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    1100:	2807      	cmp	r0, #7
    1102:	d803      	bhi.n	110c <system_clock_source_enable+0xc>
    1104:	0080      	lsls	r0, r0, #2
    1106:	4b1e      	ldr	r3, [pc, #120]	; (1180 <system_clock_source_enable+0x80>)
    1108:	581b      	ldr	r3, [r3, r0]
    110a:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    110c:	2017      	movs	r0, #23
    110e:	e036      	b.n	117e <system_clock_source_enable+0x7e>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    1110:	4a1c      	ldr	r2, [pc, #112]	; (1184 <system_clock_source_enable+0x84>)
    1112:	6a13      	ldr	r3, [r2, #32]
    1114:	2102      	movs	r1, #2
    1116:	430b      	orrs	r3, r1
    1118:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    111a:	2000      	movs	r0, #0
    111c:	e02f      	b.n	117e <system_clock_source_enable+0x7e>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    111e:	4a19      	ldr	r2, [pc, #100]	; (1184 <system_clock_source_enable+0x84>)
    1120:	6993      	ldr	r3, [r2, #24]
    1122:	2102      	movs	r1, #2
    1124:	430b      	orrs	r3, r1
    1126:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    1128:	2000      	movs	r0, #0
		break;
    112a:	e028      	b.n	117e <system_clock_source_enable+0x7e>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    112c:	4a15      	ldr	r2, [pc, #84]	; (1184 <system_clock_source_enable+0x84>)
    112e:	8a13      	ldrh	r3, [r2, #16]
    1130:	2102      	movs	r1, #2
    1132:	430b      	orrs	r3, r1
    1134:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    1136:	2000      	movs	r0, #0
		break;
    1138:	e021      	b.n	117e <system_clock_source_enable+0x7e>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    113a:	4a12      	ldr	r2, [pc, #72]	; (1184 <system_clock_source_enable+0x84>)
    113c:	8a93      	ldrh	r3, [r2, #20]
    113e:	2102      	movs	r1, #2
    1140:	430b      	orrs	r3, r1
    1142:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    1144:	2000      	movs	r0, #0
		break;
    1146:	e01a      	b.n	117e <system_clock_source_enable+0x7e>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    1148:	4b0f      	ldr	r3, [pc, #60]	; (1188 <system_clock_source_enable+0x88>)
    114a:	681a      	ldr	r2, [r3, #0]
    114c:	2102      	movs	r1, #2
    114e:	430a      	orrs	r2, r1
    1150:	601a      	str	r2, [r3, #0]
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control & ~SYSCTRL_DFLLCTRL_ONDEMAND;
    1152:	681b      	ldr	r3, [r3, #0]
    1154:	4a0d      	ldr	r2, [pc, #52]	; (118c <system_clock_source_enable+0x8c>)
    1156:	4013      	ands	r3, r2
    1158:	4a0a      	ldr	r2, [pc, #40]	; (1184 <system_clock_source_enable+0x84>)
    115a:	8493      	strh	r3, [r2, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    115c:	0011      	movs	r1, r2
    115e:	2210      	movs	r2, #16
    1160:	68cb      	ldr	r3, [r1, #12]
    1162:	421a      	tst	r2, r3
    1164:	d0fc      	beq.n	1160 <system_clock_source_enable+0x60>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    1166:	4a08      	ldr	r2, [pc, #32]	; (1188 <system_clock_source_enable+0x88>)
    1168:	6891      	ldr	r1, [r2, #8]
    116a:	4b06      	ldr	r3, [pc, #24]	; (1184 <system_clock_source_enable+0x84>)
    116c:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    116e:	6851      	ldr	r1, [r2, #4]
    1170:	6299      	str	r1, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    1172:	6812      	ldr	r2, [r2, #0]
    1174:	b292      	uxth	r2, r2
    1176:	849a      	strh	r2, [r3, #36]	; 0x24
	return STATUS_OK;
    1178:	2000      	movs	r0, #0
    117a:	e000      	b.n	117e <system_clock_source_enable+0x7e>
		return STATUS_OK;
    117c:	2000      	movs	r0, #0
}
    117e:	4770      	bx	lr
    1180:	00001954 	.word	0x00001954
    1184:	40000800 	.word	0x40000800
    1188:	20000084 	.word	0x20000084
    118c:	0000ff7f 	.word	0x0000ff7f

00001190 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    1190:	b530      	push	{r4, r5, lr}
    1192:	b085      	sub	sp, #20
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    1194:	22c2      	movs	r2, #194	; 0xc2
    1196:	00d2      	lsls	r2, r2, #3
    1198:	4b1a      	ldr	r3, [pc, #104]	; (1204 <system_clock_init+0x74>)
    119a:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    119c:	4a1a      	ldr	r2, [pc, #104]	; (1208 <system_clock_init+0x78>)
    119e:	6853      	ldr	r3, [r2, #4]
    11a0:	211e      	movs	r1, #30
    11a2:	438b      	bics	r3, r1
    11a4:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_1;
    11a6:	2301      	movs	r3, #1
    11a8:	466a      	mov	r2, sp
    11aa:	7013      	strb	r3, [r2, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    11ac:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    11ae:	4d17      	ldr	r5, [pc, #92]	; (120c <system_clock_init+0x7c>)
    11b0:	b2e0      	uxtb	r0, r4
    11b2:	4669      	mov	r1, sp
    11b4:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    11b6:	3401      	adds	r4, #1
    11b8:	2c1c      	cmp	r4, #28
    11ba:	d1f9      	bne.n	11b0 <system_clock_init+0x20>
	config->run_in_standby  = false;
    11bc:	a803      	add	r0, sp, #12
    11be:	2400      	movs	r4, #0
    11c0:	7044      	strb	r4, [r0, #1]
	config->on_demand       = true;
    11c2:	2501      	movs	r5, #1
    11c4:	7085      	strb	r5, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    11c6:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    11c8:	4b11      	ldr	r3, [pc, #68]	; (1210 <system_clock_init+0x80>)
    11ca:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    11cc:	2006      	movs	r0, #6
    11ce:	4b11      	ldr	r3, [pc, #68]	; (1214 <system_clock_init+0x84>)
    11d0:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    11d2:	4b11      	ldr	r3, [pc, #68]	; (1218 <system_clock_init+0x88>)
    11d4:	4798      	blx	r3
	PM->CPUSEL.reg = (uint32_t)divider;
    11d6:	4b11      	ldr	r3, [pc, #68]	; (121c <system_clock_init+0x8c>)
    11d8:	721c      	strb	r4, [r3, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    11da:	725c      	strb	r4, [r3, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    11dc:	729c      	strb	r4, [r3, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    11de:	72dc      	strb	r4, [r3, #11]
	config->division_factor    = 1;
    11e0:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
    11e2:	466b      	mov	r3, sp
    11e4:	705c      	strb	r4, [r3, #1]
	config->source_clock       = GCLK_SOURCE_OSC8M;
    11e6:	2306      	movs	r3, #6
    11e8:	466a      	mov	r2, sp
    11ea:	7013      	strb	r3, [r2, #0]
	config->run_in_standby     = false;
    11ec:	7214      	strb	r4, [r2, #8]
	config->output_enable      = false;
    11ee:	7254      	strb	r4, [r2, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    11f0:	4669      	mov	r1, sp
    11f2:	2000      	movs	r0, #0
    11f4:	4b0a      	ldr	r3, [pc, #40]	; (1220 <system_clock_init+0x90>)
    11f6:	4798      	blx	r3
    11f8:	2000      	movs	r0, #0
    11fa:	4b0a      	ldr	r3, [pc, #40]	; (1224 <system_clock_init+0x94>)
    11fc:	4798      	blx	r3
#endif
}
    11fe:	b005      	add	sp, #20
    1200:	bd30      	pop	{r4, r5, pc}
    1202:	46c0      	nop			; (mov r8, r8)
    1204:	40000800 	.word	0x40000800
    1208:	41004000 	.word	0x41004000
    120c:	00001461 	.word	0x00001461
    1210:	000010c5 	.word	0x000010c5
    1214:	00001101 	.word	0x00001101
    1218:	00001229 	.word	0x00001229
    121c:	40000400 	.word	0x40000400
    1220:	0000124d 	.word	0x0000124d
    1224:	00001305 	.word	0x00001305

00001228 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    1228:	4a06      	ldr	r2, [pc, #24]	; (1244 <system_gclk_init+0x1c>)
    122a:	6993      	ldr	r3, [r2, #24]
    122c:	2108      	movs	r1, #8
    122e:	430b      	orrs	r3, r1
    1230:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    1232:	2201      	movs	r2, #1
    1234:	4b04      	ldr	r3, [pc, #16]	; (1248 <system_gclk_init+0x20>)
    1236:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    1238:	0019      	movs	r1, r3
    123a:	780b      	ldrb	r3, [r1, #0]
    123c:	4213      	tst	r3, r2
    123e:	d1fc      	bne.n	123a <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    1240:	4770      	bx	lr
    1242:	46c0      	nop			; (mov r8, r8)
    1244:	40000400 	.word	0x40000400
    1248:	40000c00 	.word	0x40000c00

0000124c <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    124c:	b570      	push	{r4, r5, r6, lr}
    124e:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    1250:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    1252:	780d      	ldrb	r5, [r1, #0]
    1254:	022d      	lsls	r5, r5, #8
    1256:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    1258:	784b      	ldrb	r3, [r1, #1]
    125a:	2b00      	cmp	r3, #0
    125c:	d002      	beq.n	1264 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    125e:	2380      	movs	r3, #128	; 0x80
    1260:	02db      	lsls	r3, r3, #11
    1262:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    1264:	7a4b      	ldrb	r3, [r1, #9]
    1266:	2b00      	cmp	r3, #0
    1268:	d002      	beq.n	1270 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    126a:	2380      	movs	r3, #128	; 0x80
    126c:	031b      	lsls	r3, r3, #12
    126e:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    1270:	6848      	ldr	r0, [r1, #4]
    1272:	2801      	cmp	r0, #1
    1274:	d910      	bls.n	1298 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    1276:	1e43      	subs	r3, r0, #1
    1278:	4218      	tst	r0, r3
    127a:	d134      	bne.n	12e6 <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    127c:	2802      	cmp	r0, #2
    127e:	d930      	bls.n	12e2 <system_gclk_gen_set_config+0x96>
    1280:	2302      	movs	r3, #2
    1282:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    1284:	3201      	adds	r2, #1
						mask <<= 1) {
    1286:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    1288:	4298      	cmp	r0, r3
    128a:	d8fb      	bhi.n	1284 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    128c:	0212      	lsls	r2, r2, #8
    128e:	4332      	orrs	r2, r6
    1290:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    1292:	2380      	movs	r3, #128	; 0x80
    1294:	035b      	lsls	r3, r3, #13
    1296:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    1298:	7a0b      	ldrb	r3, [r1, #8]
    129a:	2b00      	cmp	r3, #0
    129c:	d002      	beq.n	12a4 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    129e:	2380      	movs	r3, #128	; 0x80
    12a0:	039b      	lsls	r3, r3, #14
    12a2:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    12a4:	4a13      	ldr	r2, [pc, #76]	; (12f4 <system_gclk_gen_set_config+0xa8>)
    12a6:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    12a8:	b25b      	sxtb	r3, r3
    12aa:	2b00      	cmp	r3, #0
    12ac:	dbfb      	blt.n	12a6 <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    12ae:	4b12      	ldr	r3, [pc, #72]	; (12f8 <system_gclk_gen_set_config+0xac>)
    12b0:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    12b2:	4b12      	ldr	r3, [pc, #72]	; (12fc <system_gclk_gen_set_config+0xb0>)
    12b4:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    12b6:	4a0f      	ldr	r2, [pc, #60]	; (12f4 <system_gclk_gen_set_config+0xa8>)
    12b8:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    12ba:	b25b      	sxtb	r3, r3
    12bc:	2b00      	cmp	r3, #0
    12be:	dbfb      	blt.n	12b8 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    12c0:	4b0c      	ldr	r3, [pc, #48]	; (12f4 <system_gclk_gen_set_config+0xa8>)
    12c2:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    12c4:	001a      	movs	r2, r3
    12c6:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    12c8:	b25b      	sxtb	r3, r3
    12ca:	2b00      	cmp	r3, #0
    12cc:	dbfb      	blt.n	12c6 <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    12ce:	4a09      	ldr	r2, [pc, #36]	; (12f4 <system_gclk_gen_set_config+0xa8>)
    12d0:	6853      	ldr	r3, [r2, #4]
    12d2:	2180      	movs	r1, #128	; 0x80
    12d4:	0249      	lsls	r1, r1, #9
    12d6:	400b      	ands	r3, r1
    12d8:	431d      	orrs	r5, r3
    12da:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    12dc:	4b08      	ldr	r3, [pc, #32]	; (1300 <system_gclk_gen_set_config+0xb4>)
    12de:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    12e0:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    12e2:	2200      	movs	r2, #0
    12e4:	e7d2      	b.n	128c <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    12e6:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    12e8:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    12ea:	2380      	movs	r3, #128	; 0x80
    12ec:	029b      	lsls	r3, r3, #10
    12ee:	431d      	orrs	r5, r3
    12f0:	e7d2      	b.n	1298 <system_gclk_gen_set_config+0x4c>
    12f2:	46c0      	nop			; (mov r8, r8)
    12f4:	40000c00 	.word	0x40000c00
    12f8:	00000fd9 	.word	0x00000fd9
    12fc:	40000c08 	.word	0x40000c08
    1300:	00001019 	.word	0x00001019

00001304 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    1304:	b510      	push	{r4, lr}
    1306:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1308:	4a0b      	ldr	r2, [pc, #44]	; (1338 <system_gclk_gen_enable+0x34>)
    130a:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    130c:	b25b      	sxtb	r3, r3
    130e:	2b00      	cmp	r3, #0
    1310:	dbfb      	blt.n	130a <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    1312:	4b0a      	ldr	r3, [pc, #40]	; (133c <system_gclk_gen_enable+0x38>)
    1314:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1316:	4b0a      	ldr	r3, [pc, #40]	; (1340 <system_gclk_gen_enable+0x3c>)
    1318:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    131a:	4a07      	ldr	r2, [pc, #28]	; (1338 <system_gclk_gen_enable+0x34>)
    131c:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    131e:	b25b      	sxtb	r3, r3
    1320:	2b00      	cmp	r3, #0
    1322:	dbfb      	blt.n	131c <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    1324:	4a04      	ldr	r2, [pc, #16]	; (1338 <system_gclk_gen_enable+0x34>)
    1326:	6851      	ldr	r1, [r2, #4]
    1328:	2380      	movs	r3, #128	; 0x80
    132a:	025b      	lsls	r3, r3, #9
    132c:	430b      	orrs	r3, r1
    132e:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    1330:	4b04      	ldr	r3, [pc, #16]	; (1344 <system_gclk_gen_enable+0x40>)
    1332:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1334:	bd10      	pop	{r4, pc}
    1336:	46c0      	nop			; (mov r8, r8)
    1338:	40000c00 	.word	0x40000c00
    133c:	00000fd9 	.word	0x00000fd9
    1340:	40000c04 	.word	0x40000c04
    1344:	00001019 	.word	0x00001019

00001348 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    1348:	b570      	push	{r4, r5, r6, lr}
    134a:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    134c:	4a1a      	ldr	r2, [pc, #104]	; (13b8 <system_gclk_gen_get_hz+0x70>)
    134e:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1350:	b25b      	sxtb	r3, r3
    1352:	2b00      	cmp	r3, #0
    1354:	dbfb      	blt.n	134e <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    1356:	4b19      	ldr	r3, [pc, #100]	; (13bc <system_gclk_gen_get_hz+0x74>)
    1358:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    135a:	4b19      	ldr	r3, [pc, #100]	; (13c0 <system_gclk_gen_get_hz+0x78>)
    135c:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    135e:	4a16      	ldr	r2, [pc, #88]	; (13b8 <system_gclk_gen_get_hz+0x70>)
    1360:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1362:	b25b      	sxtb	r3, r3
    1364:	2b00      	cmp	r3, #0
    1366:	dbfb      	blt.n	1360 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    1368:	4e13      	ldr	r6, [pc, #76]	; (13b8 <system_gclk_gen_get_hz+0x70>)
    136a:	6870      	ldr	r0, [r6, #4]
    136c:	04c0      	lsls	r0, r0, #19
    136e:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    1370:	4b14      	ldr	r3, [pc, #80]	; (13c4 <system_gclk_gen_get_hz+0x7c>)
    1372:	4798      	blx	r3
    1374:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1376:	4b12      	ldr	r3, [pc, #72]	; (13c0 <system_gclk_gen_get_hz+0x78>)
    1378:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    137a:	6876      	ldr	r6, [r6, #4]
    137c:	02f6      	lsls	r6, r6, #11
    137e:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    1380:	4b11      	ldr	r3, [pc, #68]	; (13c8 <system_gclk_gen_get_hz+0x80>)
    1382:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1384:	4a0c      	ldr	r2, [pc, #48]	; (13b8 <system_gclk_gen_get_hz+0x70>)
    1386:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1388:	b25b      	sxtb	r3, r3
    138a:	2b00      	cmp	r3, #0
    138c:	dbfb      	blt.n	1386 <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    138e:	4b0a      	ldr	r3, [pc, #40]	; (13b8 <system_gclk_gen_get_hz+0x70>)
    1390:	689c      	ldr	r4, [r3, #8]
    1392:	0224      	lsls	r4, r4, #8
    1394:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    1396:	4b0d      	ldr	r3, [pc, #52]	; (13cc <system_gclk_gen_get_hz+0x84>)
    1398:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    139a:	2e00      	cmp	r6, #0
    139c:	d107      	bne.n	13ae <system_gclk_gen_get_hz+0x66>
    139e:	2c01      	cmp	r4, #1
    13a0:	d907      	bls.n	13b2 <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    13a2:	0021      	movs	r1, r4
    13a4:	0028      	movs	r0, r5
    13a6:	4b0a      	ldr	r3, [pc, #40]	; (13d0 <system_gclk_gen_get_hz+0x88>)
    13a8:	4798      	blx	r3
    13aa:	0005      	movs	r5, r0
    13ac:	e001      	b.n	13b2 <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    13ae:	3401      	adds	r4, #1
    13b0:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    13b2:	0028      	movs	r0, r5
    13b4:	bd70      	pop	{r4, r5, r6, pc}
    13b6:	46c0      	nop			; (mov r8, r8)
    13b8:	40000c00 	.word	0x40000c00
    13bc:	00000fd9 	.word	0x00000fd9
    13c0:	40000c04 	.word	0x40000c04
    13c4:	00001049 	.word	0x00001049
    13c8:	40000c08 	.word	0x40000c08
    13cc:	00001019 	.word	0x00001019
    13d0:	00001751 	.word	0x00001751

000013d4 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    13d4:	b510      	push	{r4, lr}
    13d6:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    13d8:	4b06      	ldr	r3, [pc, #24]	; (13f4 <system_gclk_chan_enable+0x20>)
    13da:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    13dc:	4b06      	ldr	r3, [pc, #24]	; (13f8 <system_gclk_chan_enable+0x24>)
    13de:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    13e0:	4a06      	ldr	r2, [pc, #24]	; (13fc <system_gclk_chan_enable+0x28>)
    13e2:	8853      	ldrh	r3, [r2, #2]
    13e4:	2180      	movs	r1, #128	; 0x80
    13e6:	01c9      	lsls	r1, r1, #7
    13e8:	430b      	orrs	r3, r1
    13ea:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    13ec:	4b04      	ldr	r3, [pc, #16]	; (1400 <system_gclk_chan_enable+0x2c>)
    13ee:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    13f0:	bd10      	pop	{r4, pc}
    13f2:	46c0      	nop			; (mov r8, r8)
    13f4:	00000fd9 	.word	0x00000fd9
    13f8:	40000c02 	.word	0x40000c02
    13fc:	40000c00 	.word	0x40000c00
    1400:	00001019 	.word	0x00001019

00001404 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    1404:	b510      	push	{r4, lr}
    1406:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1408:	4b0f      	ldr	r3, [pc, #60]	; (1448 <system_gclk_chan_disable+0x44>)
    140a:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    140c:	4b0f      	ldr	r3, [pc, #60]	; (144c <system_gclk_chan_disable+0x48>)
    140e:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    1410:	4a0f      	ldr	r2, [pc, #60]	; (1450 <system_gclk_chan_disable+0x4c>)
    1412:	8853      	ldrh	r3, [r2, #2]
    1414:	051b      	lsls	r3, r3, #20
    1416:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    1418:	8853      	ldrh	r3, [r2, #2]
    141a:	490e      	ldr	r1, [pc, #56]	; (1454 <system_gclk_chan_disable+0x50>)
    141c:	400b      	ands	r3, r1
    141e:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    1420:	8853      	ldrh	r3, [r2, #2]
    1422:	490d      	ldr	r1, [pc, #52]	; (1458 <system_gclk_chan_disable+0x54>)
    1424:	400b      	ands	r3, r1
    1426:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    1428:	0011      	movs	r1, r2
    142a:	2280      	movs	r2, #128	; 0x80
    142c:	01d2      	lsls	r2, r2, #7
    142e:	884b      	ldrh	r3, [r1, #2]
    1430:	4213      	tst	r3, r2
    1432:	d1fc      	bne.n	142e <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    1434:	4906      	ldr	r1, [pc, #24]	; (1450 <system_gclk_chan_disable+0x4c>)
    1436:	884a      	ldrh	r2, [r1, #2]
    1438:	0203      	lsls	r3, r0, #8
    143a:	4806      	ldr	r0, [pc, #24]	; (1454 <system_gclk_chan_disable+0x50>)
    143c:	4002      	ands	r2, r0
    143e:	4313      	orrs	r3, r2
    1440:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    1442:	4b06      	ldr	r3, [pc, #24]	; (145c <system_gclk_chan_disable+0x58>)
    1444:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1446:	bd10      	pop	{r4, pc}
    1448:	00000fd9 	.word	0x00000fd9
    144c:	40000c02 	.word	0x40000c02
    1450:	40000c00 	.word	0x40000c00
    1454:	fffff0ff 	.word	0xfffff0ff
    1458:	ffffbfff 	.word	0xffffbfff
    145c:	00001019 	.word	0x00001019

00001460 <system_gclk_chan_set_config>:
{
    1460:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    1462:	780c      	ldrb	r4, [r1, #0]
    1464:	0224      	lsls	r4, r4, #8
    1466:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    1468:	4b02      	ldr	r3, [pc, #8]	; (1474 <system_gclk_chan_set_config+0x14>)
    146a:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    146c:	b2a4      	uxth	r4, r4
    146e:	4b02      	ldr	r3, [pc, #8]	; (1478 <system_gclk_chan_set_config+0x18>)
    1470:	805c      	strh	r4, [r3, #2]
}
    1472:	bd10      	pop	{r4, pc}
    1474:	00001405 	.word	0x00001405
    1478:	40000c00 	.word	0x40000c00

0000147c <system_gclk_chan_lock>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_lock(
		const uint8_t channel)
{
    147c:	b510      	push	{r4, lr}
    147e:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1480:	4b06      	ldr	r3, [pc, #24]	; (149c <system_gclk_chan_lock+0x20>)
    1482:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1484:	4b06      	ldr	r3, [pc, #24]	; (14a0 <system_gclk_chan_lock+0x24>)
    1486:	701c      	strb	r4, [r3, #0]

	/* Lock the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_WRTLOCK | GCLK_CLKCTRL_CLKEN;
    1488:	4a06      	ldr	r2, [pc, #24]	; (14a4 <system_gclk_chan_lock+0x28>)
    148a:	8853      	ldrh	r3, [r2, #2]
    148c:	21c0      	movs	r1, #192	; 0xc0
    148e:	0209      	lsls	r1, r1, #8
    1490:	430b      	orrs	r3, r1
    1492:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    1494:	4b04      	ldr	r3, [pc, #16]	; (14a8 <system_gclk_chan_lock+0x2c>)
    1496:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1498:	bd10      	pop	{r4, pc}
    149a:	46c0      	nop			; (mov r8, r8)
    149c:	00000fd9 	.word	0x00000fd9
    14a0:	40000c02 	.word	0x40000c02
    14a4:	40000c00 	.word	0x40000c00
    14a8:	00001019 	.word	0x00001019

000014ac <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    14ac:	b510      	push	{r4, lr}
    14ae:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    14b0:	4b06      	ldr	r3, [pc, #24]	; (14cc <system_gclk_chan_get_hz+0x20>)
    14b2:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    14b4:	4b06      	ldr	r3, [pc, #24]	; (14d0 <system_gclk_chan_get_hz+0x24>)
    14b6:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    14b8:	4b06      	ldr	r3, [pc, #24]	; (14d4 <system_gclk_chan_get_hz+0x28>)
    14ba:	885c      	ldrh	r4, [r3, #2]
    14bc:	0524      	lsls	r4, r4, #20
    14be:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    14c0:	4b05      	ldr	r3, [pc, #20]	; (14d8 <system_gclk_chan_get_hz+0x2c>)
    14c2:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    14c4:	0020      	movs	r0, r4
    14c6:	4b05      	ldr	r3, [pc, #20]	; (14dc <system_gclk_chan_get_hz+0x30>)
    14c8:	4798      	blx	r3
}
    14ca:	bd10      	pop	{r4, pc}
    14cc:	00000fd9 	.word	0x00000fd9
    14d0:	40000c02 	.word	0x40000c02
    14d4:	40000c00 	.word	0x40000c00
    14d8:	00001019 	.word	0x00001019
    14dc:	00001349 	.word	0x00001349

000014e0 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    14e0:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    14e2:	78d3      	ldrb	r3, [r2, #3]
    14e4:	2b00      	cmp	r3, #0
    14e6:	d135      	bne.n	1554 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    14e8:	7813      	ldrb	r3, [r2, #0]
    14ea:	2b80      	cmp	r3, #128	; 0x80
    14ec:	d029      	beq.n	1542 <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    14ee:	061b      	lsls	r3, r3, #24
    14f0:	2480      	movs	r4, #128	; 0x80
    14f2:	0264      	lsls	r4, r4, #9
    14f4:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    14f6:	7854      	ldrb	r4, [r2, #1]
    14f8:	2502      	movs	r5, #2
    14fa:	43ac      	bics	r4, r5
    14fc:	d106      	bne.n	150c <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    14fe:	7894      	ldrb	r4, [r2, #2]
    1500:	2c00      	cmp	r4, #0
    1502:	d120      	bne.n	1546 <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    1504:	2480      	movs	r4, #128	; 0x80
    1506:	02a4      	lsls	r4, r4, #10
    1508:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    150a:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    150c:	7854      	ldrb	r4, [r2, #1]
    150e:	3c01      	subs	r4, #1
    1510:	2c01      	cmp	r4, #1
    1512:	d91c      	bls.n	154e <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1514:	040d      	lsls	r5, r1, #16
    1516:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1518:	24a0      	movs	r4, #160	; 0xa0
    151a:	05e4      	lsls	r4, r4, #23
    151c:	432c      	orrs	r4, r5
    151e:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1520:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1522:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1524:	24d0      	movs	r4, #208	; 0xd0
    1526:	0624      	lsls	r4, r4, #24
    1528:	432c      	orrs	r4, r5
    152a:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    152c:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    152e:	78d4      	ldrb	r4, [r2, #3]
    1530:	2c00      	cmp	r4, #0
    1532:	d122      	bne.n	157a <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    1534:	035b      	lsls	r3, r3, #13
    1536:	d51c      	bpl.n	1572 <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    1538:	7893      	ldrb	r3, [r2, #2]
    153a:	2b01      	cmp	r3, #1
    153c:	d01e      	beq.n	157c <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    153e:	6141      	str	r1, [r0, #20]
    1540:	e017      	b.n	1572 <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    1542:	2300      	movs	r3, #0
    1544:	e7d7      	b.n	14f6 <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    1546:	24c0      	movs	r4, #192	; 0xc0
    1548:	02e4      	lsls	r4, r4, #11
    154a:	4323      	orrs	r3, r4
    154c:	e7dd      	b.n	150a <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    154e:	4c0d      	ldr	r4, [pc, #52]	; (1584 <_system_pinmux_config+0xa4>)
    1550:	4023      	ands	r3, r4
    1552:	e7df      	b.n	1514 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    1554:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1556:	040c      	lsls	r4, r1, #16
    1558:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    155a:	23a0      	movs	r3, #160	; 0xa0
    155c:	05db      	lsls	r3, r3, #23
    155e:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1560:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1562:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1564:	23d0      	movs	r3, #208	; 0xd0
    1566:	061b      	lsls	r3, r3, #24
    1568:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    156a:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    156c:	78d3      	ldrb	r3, [r2, #3]
    156e:	2b00      	cmp	r3, #0
    1570:	d103      	bne.n	157a <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1572:	7853      	ldrb	r3, [r2, #1]
    1574:	3b01      	subs	r3, #1
    1576:	2b01      	cmp	r3, #1
    1578:	d902      	bls.n	1580 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    157a:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    157c:	6181      	str	r1, [r0, #24]
    157e:	e7f8      	b.n	1572 <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    1580:	6081      	str	r1, [r0, #8]
}
    1582:	e7fa      	b.n	157a <_system_pinmux_config+0x9a>
    1584:	fffbffff 	.word	0xfffbffff

00001588 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    1588:	b510      	push	{r4, lr}
    158a:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    158c:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    158e:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    1590:	2900      	cmp	r1, #0
    1592:	d104      	bne.n	159e <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    1594:	0943      	lsrs	r3, r0, #5
    1596:	01db      	lsls	r3, r3, #7
    1598:	4905      	ldr	r1, [pc, #20]	; (15b0 <system_pinmux_pin_set_config+0x28>)
    159a:	468c      	mov	ip, r1
    159c:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    159e:	241f      	movs	r4, #31
    15a0:	4020      	ands	r0, r4
    15a2:	2101      	movs	r1, #1
    15a4:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    15a6:	0018      	movs	r0, r3
    15a8:	4b02      	ldr	r3, [pc, #8]	; (15b4 <system_pinmux_pin_set_config+0x2c>)
    15aa:	4798      	blx	r3
}
    15ac:	bd10      	pop	{r4, pc}
    15ae:	46c0      	nop			; (mov r8, r8)
    15b0:	41004400 	.word	0x41004400
    15b4:	000014e1 	.word	0x000014e1

000015b8 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    15b8:	4770      	bx	lr
	...

000015bc <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    15bc:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    15be:	4b05      	ldr	r3, [pc, #20]	; (15d4 <system_init+0x18>)
    15c0:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    15c2:	4b05      	ldr	r3, [pc, #20]	; (15d8 <system_init+0x1c>)
    15c4:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    15c6:	4b05      	ldr	r3, [pc, #20]	; (15dc <system_init+0x20>)
    15c8:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    15ca:	4b05      	ldr	r3, [pc, #20]	; (15e0 <system_init+0x24>)
    15cc:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    15ce:	4b05      	ldr	r3, [pc, #20]	; (15e4 <system_init+0x28>)
    15d0:	4798      	blx	r3


}
    15d2:	bd10      	pop	{r4, pc}
    15d4:	00001191 	.word	0x00001191
    15d8:	00000fd5 	.word	0x00000fd5
    15dc:	00000375 	.word	0x00000375
    15e0:	000015b9 	.word	0x000015b9
    15e4:	000015b9 	.word	0x000015b9

000015e8 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    15e8:	e7fe      	b.n	15e8 <Dummy_Handler>
	...

000015ec <Reset_Handler>:
{
    15ec:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
    15ee:	4a1a      	ldr	r2, [pc, #104]	; (1658 <Reset_Handler+0x6c>)
    15f0:	4b1a      	ldr	r3, [pc, #104]	; (165c <Reset_Handler+0x70>)
    15f2:	429a      	cmp	r2, r3
    15f4:	d011      	beq.n	161a <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    15f6:	001a      	movs	r2, r3
    15f8:	4b19      	ldr	r3, [pc, #100]	; (1660 <Reset_Handler+0x74>)
    15fa:	429a      	cmp	r2, r3
    15fc:	d20d      	bcs.n	161a <Reset_Handler+0x2e>
    15fe:	4a19      	ldr	r2, [pc, #100]	; (1664 <Reset_Handler+0x78>)
    1600:	3303      	adds	r3, #3
    1602:	1a9b      	subs	r3, r3, r2
    1604:	089b      	lsrs	r3, r3, #2
    1606:	3301      	adds	r3, #1
    1608:	009b      	lsls	r3, r3, #2
    160a:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    160c:	4813      	ldr	r0, [pc, #76]	; (165c <Reset_Handler+0x70>)
    160e:	4912      	ldr	r1, [pc, #72]	; (1658 <Reset_Handler+0x6c>)
    1610:	588c      	ldr	r4, [r1, r2]
    1612:	5084      	str	r4, [r0, r2]
    1614:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    1616:	429a      	cmp	r2, r3
    1618:	d1fa      	bne.n	1610 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    161a:	4a13      	ldr	r2, [pc, #76]	; (1668 <Reset_Handler+0x7c>)
    161c:	4b13      	ldr	r3, [pc, #76]	; (166c <Reset_Handler+0x80>)
    161e:	429a      	cmp	r2, r3
    1620:	d20a      	bcs.n	1638 <Reset_Handler+0x4c>
    1622:	43d3      	mvns	r3, r2
    1624:	4911      	ldr	r1, [pc, #68]	; (166c <Reset_Handler+0x80>)
    1626:	185b      	adds	r3, r3, r1
    1628:	2103      	movs	r1, #3
    162a:	438b      	bics	r3, r1
    162c:	3304      	adds	r3, #4
    162e:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    1630:	2100      	movs	r1, #0
    1632:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    1634:	4293      	cmp	r3, r2
    1636:	d1fc      	bne.n	1632 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    1638:	4a0d      	ldr	r2, [pc, #52]	; (1670 <Reset_Handler+0x84>)
    163a:	21ff      	movs	r1, #255	; 0xff
    163c:	4b0d      	ldr	r3, [pc, #52]	; (1674 <Reset_Handler+0x88>)
    163e:	438b      	bics	r3, r1
    1640:	6093      	str	r3, [r2, #8]
        NVMCTRL->CTRLB.bit.MANW = 1;
    1642:	4a0d      	ldr	r2, [pc, #52]	; (1678 <Reset_Handler+0x8c>)
    1644:	6853      	ldr	r3, [r2, #4]
    1646:	397f      	subs	r1, #127	; 0x7f
    1648:	430b      	orrs	r3, r1
    164a:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    164c:	4b0b      	ldr	r3, [pc, #44]	; (167c <Reset_Handler+0x90>)
    164e:	4798      	blx	r3
        main();
    1650:	4b0b      	ldr	r3, [pc, #44]	; (1680 <Reset_Handler+0x94>)
    1652:	4798      	blx	r3
    1654:	e7fe      	b.n	1654 <Reset_Handler+0x68>
    1656:	46c0      	nop			; (mov r8, r8)
    1658:	00001994 	.word	0x00001994
    165c:	20000000 	.word	0x20000000
    1660:	20000044 	.word	0x20000044
    1664:	20000004 	.word	0x20000004
    1668:	20000044 	.word	0x20000044
    166c:	200003b4 	.word	0x200003b4
    1670:	e000ed00 	.word	0xe000ed00
    1674:	00000000 	.word	0x00000000
    1678:	41004000 	.word	0x41004000
    167c:	000018bd 	.word	0x000018bd
    1680:	0000169d 	.word	0x0000169d

00001684 <writeStr>:
 * @return				- void
 *
 * @note				- If Debug with uart is defined (user_hoard.h)
 ******************************************************************************************************/
 void writeStr(uint8_t *ptr, uint8_t len)
 {
    1684:	b510      	push	{r4, lr}
	#ifdef DEBUG_WITH_UART
		usart_write_buffer_wait(&usart_instance, ptr, len);
    1686:	b28a      	uxth	r2, r1
    1688:	0001      	movs	r1, r0
    168a:	4802      	ldr	r0, [pc, #8]	; (1694 <writeStr+0x10>)
    168c:	4b02      	ldr	r3, [pc, #8]	; (1698 <writeStr+0x14>)
    168e:	4798      	blx	r3
	#endif
 }
    1690:	bd10      	pop	{r4, pc}
    1692:	46c0      	nop			; (mov r8, r8)
    1694:	200000c0 	.word	0x200000c0
    1698:	00000ac5 	.word	0x00000ac5

0000169c <main>:
// Debug Status Messages 
uint8_t init[] = "Initializing...\r\n";
uint8_t statusCheck[] = "Hello World!\r\n";

int main (void)
{
    169c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    169e:	46ce      	mov	lr, r9
    16a0:	4647      	mov	r7, r8
    16a2:	b580      	push	{r7, lr}
	system_init();
    16a4:	4b1b      	ldr	r3, [pc, #108]	; (1714 <main+0x78>)
    16a6:	4798      	blx	r3
	sys_config();
    16a8:	4b1b      	ldr	r3, [pc, #108]	; (1718 <main+0x7c>)
    16aa:	4798      	blx	r3

	// Initialize UART - Terminal Debug (Debug On/Off in user_board.h)
	#ifdef DEBUG_WITH_UART
		config_UART();
    16ac:	4b1b      	ldr	r3, [pc, #108]	; (171c <main+0x80>)
    16ae:	4798      	blx	r3
		config_UART_Callback();
    16b0:	4b1b      	ldr	r3, [pc, #108]	; (1720 <main+0x84>)
    16b2:	4798      	blx	r3

		writeStr(init, sizeof(init));			//uart debug statement
    16b4:	2112      	movs	r1, #18
    16b6:	481b      	ldr	r0, [pc, #108]	; (1724 <main+0x88>)
    16b8:	4c1b      	ldr	r4, [pc, #108]	; (1728 <main+0x8c>)
    16ba:	47a0      	blx	r4
	#endif

	// Config / Initialize Modules
	config_GPIO();
    16bc:	4b1b      	ldr	r3, [pc, #108]	; (172c <main+0x90>)
    16be:	4798      	blx	r3
	timer_count = 0;
    16c0:	2200      	movs	r2, #0
    16c2:	4b1b      	ldr	r3, [pc, #108]	; (1730 <main+0x94>)
    16c4:	601a      	str	r2, [r3, #0]
	//config_encoder();
	//config_Motors();

	Clear_Sleep_Timer();

	writeStr(statusCheck, sizeof(init));
    16c6:	2112      	movs	r1, #18
    16c8:	481a      	ldr	r0, [pc, #104]	; (1734 <main+0x98>)
    16ca:	47a0      	blx	r4
		port_base->OUTSET.reg = pin_mask;
    16cc:	4b1a      	ldr	r3, [pc, #104]	; (1738 <main+0x9c>)
    16ce:	2280      	movs	r2, #128	; 0x80
    16d0:	0312      	lsls	r2, r2, #12
    16d2:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
    16d4:	615a      	str	r2, [r3, #20]
		port_base->OUTSET.reg = pin_mask;
    16d6:	2280      	movs	r2, #128	; 0x80
    16d8:	02d2      	lsls	r2, r2, #11
    16da:	619a      	str	r2, [r3, #24]
    16dc:	001c      	movs	r4, r3
    16de:	4690      	mov	r8, r2
    16e0:	4691      	mov	r9, r2
    16e2:	464b      	mov	r3, r9
    16e4:	61a3      	str	r3, [r4, #24]
	int i = 0;

	while(1)
	{
		port_pin_set_output_level(STATUSLED_ORANGE, TRUE);
		usart_read_buffer_job(&usart_instance, &ch_buffer, MAX_UART_BUFFER_LENGTH);
    16e6:	2296      	movs	r2, #150	; 0x96
    16e8:	0092      	lsls	r2, r2, #2
    16ea:	4914      	ldr	r1, [pc, #80]	; (173c <main+0xa0>)
    16ec:	4814      	ldr	r0, [pc, #80]	; (1740 <main+0xa4>)
    16ee:	4b15      	ldr	r3, [pc, #84]	; (1744 <main+0xa8>)
    16f0:	4798      	blx	r3
		delay_ms(500);
    16f2:	27fa      	movs	r7, #250	; 0xfa
    16f4:	007f      	lsls	r7, r7, #1
    16f6:	0038      	movs	r0, r7
    16f8:	4e13      	ldr	r6, [pc, #76]	; (1748 <main+0xac>)
    16fa:	47b0      	blx	r6
		port_base->OUTCLR.reg = pin_mask;
    16fc:	4643      	mov	r3, r8
    16fe:	6163      	str	r3, [r4, #20]
		port_base->OUTSET.reg = pin_mask;
    1700:	2580      	movs	r5, #128	; 0x80
    1702:	032d      	lsls	r5, r5, #12
    1704:	61a5      	str	r5, [r4, #24]
		port_pin_set_output_level(STATUSLED_ORANGE, FALSE);
		port_pin_set_output_level(STATUSLED_GREEN, TRUE);
		UART_Continuous();
    1706:	4b11      	ldr	r3, [pc, #68]	; (174c <main+0xb0>)
    1708:	4798      	blx	r3
		delay_ms(500);
    170a:	0038      	movs	r0, r7
    170c:	47b0      	blx	r6
		port_base->OUTCLR.reg = pin_mask;
    170e:	6165      	str	r5, [r4, #20]
    1710:	e7e7      	b.n	16e2 <main+0x46>
    1712:	46c0      	nop			; (mov r8, r8)
    1714:	000015bd 	.word	0x000015bd
    1718:	00000ed5 	.word	0x00000ed5
    171c:	00000711 	.word	0x00000711
    1720:	000007b1 	.word	0x000007b1
    1724:	20000020 	.word	0x20000020
    1728:	00001685 	.word	0x00001685
    172c:	00000e05 	.word	0x00000e05
    1730:	200003b0 	.word	0x200003b0
    1734:	20000034 	.word	0x20000034
    1738:	41004400 	.word	0x41004400
    173c:	200000bc 	.word	0x200000bc
    1740:	200000c0 	.word	0x200000c0
    1744:	00000bdd 	.word	0x00000bdd
    1748:	00000f85 	.word	0x00000f85
    174c:	000007e5 	.word	0x000007e5

00001750 <__udivsi3>:
    1750:	2200      	movs	r2, #0
    1752:	0843      	lsrs	r3, r0, #1
    1754:	428b      	cmp	r3, r1
    1756:	d374      	bcc.n	1842 <__udivsi3+0xf2>
    1758:	0903      	lsrs	r3, r0, #4
    175a:	428b      	cmp	r3, r1
    175c:	d35f      	bcc.n	181e <__udivsi3+0xce>
    175e:	0a03      	lsrs	r3, r0, #8
    1760:	428b      	cmp	r3, r1
    1762:	d344      	bcc.n	17ee <__udivsi3+0x9e>
    1764:	0b03      	lsrs	r3, r0, #12
    1766:	428b      	cmp	r3, r1
    1768:	d328      	bcc.n	17bc <__udivsi3+0x6c>
    176a:	0c03      	lsrs	r3, r0, #16
    176c:	428b      	cmp	r3, r1
    176e:	d30d      	bcc.n	178c <__udivsi3+0x3c>
    1770:	22ff      	movs	r2, #255	; 0xff
    1772:	0209      	lsls	r1, r1, #8
    1774:	ba12      	rev	r2, r2
    1776:	0c03      	lsrs	r3, r0, #16
    1778:	428b      	cmp	r3, r1
    177a:	d302      	bcc.n	1782 <__udivsi3+0x32>
    177c:	1212      	asrs	r2, r2, #8
    177e:	0209      	lsls	r1, r1, #8
    1780:	d065      	beq.n	184e <__udivsi3+0xfe>
    1782:	0b03      	lsrs	r3, r0, #12
    1784:	428b      	cmp	r3, r1
    1786:	d319      	bcc.n	17bc <__udivsi3+0x6c>
    1788:	e000      	b.n	178c <__udivsi3+0x3c>
    178a:	0a09      	lsrs	r1, r1, #8
    178c:	0bc3      	lsrs	r3, r0, #15
    178e:	428b      	cmp	r3, r1
    1790:	d301      	bcc.n	1796 <__udivsi3+0x46>
    1792:	03cb      	lsls	r3, r1, #15
    1794:	1ac0      	subs	r0, r0, r3
    1796:	4152      	adcs	r2, r2
    1798:	0b83      	lsrs	r3, r0, #14
    179a:	428b      	cmp	r3, r1
    179c:	d301      	bcc.n	17a2 <__udivsi3+0x52>
    179e:	038b      	lsls	r3, r1, #14
    17a0:	1ac0      	subs	r0, r0, r3
    17a2:	4152      	adcs	r2, r2
    17a4:	0b43      	lsrs	r3, r0, #13
    17a6:	428b      	cmp	r3, r1
    17a8:	d301      	bcc.n	17ae <__udivsi3+0x5e>
    17aa:	034b      	lsls	r3, r1, #13
    17ac:	1ac0      	subs	r0, r0, r3
    17ae:	4152      	adcs	r2, r2
    17b0:	0b03      	lsrs	r3, r0, #12
    17b2:	428b      	cmp	r3, r1
    17b4:	d301      	bcc.n	17ba <__udivsi3+0x6a>
    17b6:	030b      	lsls	r3, r1, #12
    17b8:	1ac0      	subs	r0, r0, r3
    17ba:	4152      	adcs	r2, r2
    17bc:	0ac3      	lsrs	r3, r0, #11
    17be:	428b      	cmp	r3, r1
    17c0:	d301      	bcc.n	17c6 <__udivsi3+0x76>
    17c2:	02cb      	lsls	r3, r1, #11
    17c4:	1ac0      	subs	r0, r0, r3
    17c6:	4152      	adcs	r2, r2
    17c8:	0a83      	lsrs	r3, r0, #10
    17ca:	428b      	cmp	r3, r1
    17cc:	d301      	bcc.n	17d2 <__udivsi3+0x82>
    17ce:	028b      	lsls	r3, r1, #10
    17d0:	1ac0      	subs	r0, r0, r3
    17d2:	4152      	adcs	r2, r2
    17d4:	0a43      	lsrs	r3, r0, #9
    17d6:	428b      	cmp	r3, r1
    17d8:	d301      	bcc.n	17de <__udivsi3+0x8e>
    17da:	024b      	lsls	r3, r1, #9
    17dc:	1ac0      	subs	r0, r0, r3
    17de:	4152      	adcs	r2, r2
    17e0:	0a03      	lsrs	r3, r0, #8
    17e2:	428b      	cmp	r3, r1
    17e4:	d301      	bcc.n	17ea <__udivsi3+0x9a>
    17e6:	020b      	lsls	r3, r1, #8
    17e8:	1ac0      	subs	r0, r0, r3
    17ea:	4152      	adcs	r2, r2
    17ec:	d2cd      	bcs.n	178a <__udivsi3+0x3a>
    17ee:	09c3      	lsrs	r3, r0, #7
    17f0:	428b      	cmp	r3, r1
    17f2:	d301      	bcc.n	17f8 <__udivsi3+0xa8>
    17f4:	01cb      	lsls	r3, r1, #7
    17f6:	1ac0      	subs	r0, r0, r3
    17f8:	4152      	adcs	r2, r2
    17fa:	0983      	lsrs	r3, r0, #6
    17fc:	428b      	cmp	r3, r1
    17fe:	d301      	bcc.n	1804 <__udivsi3+0xb4>
    1800:	018b      	lsls	r3, r1, #6
    1802:	1ac0      	subs	r0, r0, r3
    1804:	4152      	adcs	r2, r2
    1806:	0943      	lsrs	r3, r0, #5
    1808:	428b      	cmp	r3, r1
    180a:	d301      	bcc.n	1810 <__udivsi3+0xc0>
    180c:	014b      	lsls	r3, r1, #5
    180e:	1ac0      	subs	r0, r0, r3
    1810:	4152      	adcs	r2, r2
    1812:	0903      	lsrs	r3, r0, #4
    1814:	428b      	cmp	r3, r1
    1816:	d301      	bcc.n	181c <__udivsi3+0xcc>
    1818:	010b      	lsls	r3, r1, #4
    181a:	1ac0      	subs	r0, r0, r3
    181c:	4152      	adcs	r2, r2
    181e:	08c3      	lsrs	r3, r0, #3
    1820:	428b      	cmp	r3, r1
    1822:	d301      	bcc.n	1828 <__udivsi3+0xd8>
    1824:	00cb      	lsls	r3, r1, #3
    1826:	1ac0      	subs	r0, r0, r3
    1828:	4152      	adcs	r2, r2
    182a:	0883      	lsrs	r3, r0, #2
    182c:	428b      	cmp	r3, r1
    182e:	d301      	bcc.n	1834 <__udivsi3+0xe4>
    1830:	008b      	lsls	r3, r1, #2
    1832:	1ac0      	subs	r0, r0, r3
    1834:	4152      	adcs	r2, r2
    1836:	0843      	lsrs	r3, r0, #1
    1838:	428b      	cmp	r3, r1
    183a:	d301      	bcc.n	1840 <__udivsi3+0xf0>
    183c:	004b      	lsls	r3, r1, #1
    183e:	1ac0      	subs	r0, r0, r3
    1840:	4152      	adcs	r2, r2
    1842:	1a41      	subs	r1, r0, r1
    1844:	d200      	bcs.n	1848 <__udivsi3+0xf8>
    1846:	4601      	mov	r1, r0
    1848:	4152      	adcs	r2, r2
    184a:	4610      	mov	r0, r2
    184c:	4770      	bx	lr
    184e:	e7ff      	b.n	1850 <__udivsi3+0x100>
    1850:	b501      	push	{r0, lr}
    1852:	2000      	movs	r0, #0
    1854:	f000 f806 	bl	1864 <__aeabi_idiv0>
    1858:	bd02      	pop	{r1, pc}
    185a:	46c0      	nop			; (mov r8, r8)

0000185c <__aeabi_uidivmod>:
    185c:	2900      	cmp	r1, #0
    185e:	d0f7      	beq.n	1850 <__udivsi3+0x100>
    1860:	e776      	b.n	1750 <__udivsi3>
    1862:	4770      	bx	lr

00001864 <__aeabi_idiv0>:
    1864:	4770      	bx	lr
    1866:	46c0      	nop			; (mov r8, r8)

00001868 <__aeabi_lmul>:
    1868:	b5f0      	push	{r4, r5, r6, r7, lr}
    186a:	46ce      	mov	lr, r9
    186c:	4647      	mov	r7, r8
    186e:	0415      	lsls	r5, r2, #16
    1870:	0c2d      	lsrs	r5, r5, #16
    1872:	002e      	movs	r6, r5
    1874:	b580      	push	{r7, lr}
    1876:	0407      	lsls	r7, r0, #16
    1878:	0c14      	lsrs	r4, r2, #16
    187a:	0c3f      	lsrs	r7, r7, #16
    187c:	4699      	mov	r9, r3
    187e:	0c03      	lsrs	r3, r0, #16
    1880:	437e      	muls	r6, r7
    1882:	435d      	muls	r5, r3
    1884:	4367      	muls	r7, r4
    1886:	4363      	muls	r3, r4
    1888:	197f      	adds	r7, r7, r5
    188a:	0c34      	lsrs	r4, r6, #16
    188c:	19e4      	adds	r4, r4, r7
    188e:	469c      	mov	ip, r3
    1890:	42a5      	cmp	r5, r4
    1892:	d903      	bls.n	189c <__aeabi_lmul+0x34>
    1894:	2380      	movs	r3, #128	; 0x80
    1896:	025b      	lsls	r3, r3, #9
    1898:	4698      	mov	r8, r3
    189a:	44c4      	add	ip, r8
    189c:	464b      	mov	r3, r9
    189e:	4351      	muls	r1, r2
    18a0:	4343      	muls	r3, r0
    18a2:	0436      	lsls	r6, r6, #16
    18a4:	0c36      	lsrs	r6, r6, #16
    18a6:	0c25      	lsrs	r5, r4, #16
    18a8:	0424      	lsls	r4, r4, #16
    18aa:	4465      	add	r5, ip
    18ac:	19a4      	adds	r4, r4, r6
    18ae:	1859      	adds	r1, r3, r1
    18b0:	1949      	adds	r1, r1, r5
    18b2:	0020      	movs	r0, r4
    18b4:	bc0c      	pop	{r2, r3}
    18b6:	4690      	mov	r8, r2
    18b8:	4699      	mov	r9, r3
    18ba:	bdf0      	pop	{r4, r5, r6, r7, pc}

000018bc <__libc_init_array>:
    18bc:	b570      	push	{r4, r5, r6, lr}
    18be:	2600      	movs	r6, #0
    18c0:	4d0c      	ldr	r5, [pc, #48]	; (18f4 <__libc_init_array+0x38>)
    18c2:	4c0d      	ldr	r4, [pc, #52]	; (18f8 <__libc_init_array+0x3c>)
    18c4:	1b64      	subs	r4, r4, r5
    18c6:	10a4      	asrs	r4, r4, #2
    18c8:	42a6      	cmp	r6, r4
    18ca:	d109      	bne.n	18e0 <__libc_init_array+0x24>
    18cc:	2600      	movs	r6, #0
    18ce:	f000 f851 	bl	1974 <_init>
    18d2:	4d0a      	ldr	r5, [pc, #40]	; (18fc <__libc_init_array+0x40>)
    18d4:	4c0a      	ldr	r4, [pc, #40]	; (1900 <__libc_init_array+0x44>)
    18d6:	1b64      	subs	r4, r4, r5
    18d8:	10a4      	asrs	r4, r4, #2
    18da:	42a6      	cmp	r6, r4
    18dc:	d105      	bne.n	18ea <__libc_init_array+0x2e>
    18de:	bd70      	pop	{r4, r5, r6, pc}
    18e0:	00b3      	lsls	r3, r6, #2
    18e2:	58eb      	ldr	r3, [r5, r3]
    18e4:	4798      	blx	r3
    18e6:	3601      	adds	r6, #1
    18e8:	e7ee      	b.n	18c8 <__libc_init_array+0xc>
    18ea:	00b3      	lsls	r3, r6, #2
    18ec:	58eb      	ldr	r3, [r5, r3]
    18ee:	4798      	blx	r3
    18f0:	3601      	adds	r6, #1
    18f2:	e7f2      	b.n	18da <__libc_init_array+0x1e>
    18f4:	00001980 	.word	0x00001980
    18f8:	00001980 	.word	0x00001980
    18fc:	00001980 	.word	0x00001980
    1900:	00001984 	.word	0x00001984
    1904:	42000800 	.word	0x42000800
    1908:	42000c00 	.word	0x42000c00
    190c:	42001000 	.word	0x42001000
    1910:	42001400 	.word	0x42001400
    1914:	42001800 	.word	0x42001800
    1918:	42001c00 	.word	0x42001c00
    191c:	666e6f43 	.word	0x666e6f43
    1920:	72756769 	.word	0x72756769
    1924:	20676e69 	.word	0x20676e69
    1928:	4f495047 	.word	0x4f495047
    192c:	2e2e2e2e 	.word	0x2e2e2e2e
    1930:	00000a0d 	.word	0x00000a0d
    1934:	0000105a 	.word	0x0000105a
    1938:	00001056 	.word	0x00001056
    193c:	00001056 	.word	0x00001056
    1940:	000010a6 	.word	0x000010a6
    1944:	000010a6 	.word	0x000010a6
    1948:	0000106e 	.word	0x0000106e
    194c:	00001060 	.word	0x00001060
    1950:	00001074 	.word	0x00001074
    1954:	0000112c 	.word	0x0000112c
    1958:	0000110c 	.word	0x0000110c
    195c:	0000110c 	.word	0x0000110c
    1960:	0000117c 	.word	0x0000117c
    1964:	0000111e 	.word	0x0000111e
    1968:	0000113a 	.word	0x0000113a
    196c:	00001110 	.word	0x00001110
    1970:	00001148 	.word	0x00001148

00001974 <_init>:
    1974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1976:	46c0      	nop			; (mov r8, r8)
    1978:	bcf8      	pop	{r3, r4, r5, r6, r7}
    197a:	bc08      	pop	{r3}
    197c:	469e      	mov	lr, r3
    197e:	4770      	bx	lr

00001980 <__init_array_start>:
    1980:	000000cd 	.word	0x000000cd

00001984 <_fini>:
    1984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1986:	46c0      	nop			; (mov r8, r8)
    1988:	bcf8      	pop	{r3, r4, r5, r6, r7}
    198a:	bc08      	pop	{r3}
    198c:	469e      	mov	lr, r3
    198e:	4770      	bx	lr

00001990 <__fini_array_start>:
    1990:	000000a5 	.word	0x000000a5
