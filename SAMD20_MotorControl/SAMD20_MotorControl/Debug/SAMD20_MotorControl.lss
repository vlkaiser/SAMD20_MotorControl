
SAMD20_MotorControl.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000184c  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000044  20000000  0000184c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000036c  20000044  00001890  00020044  2**2
                  ALLOC
  3 .stack        00002000  200003b0  00001bfc  00020044  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
  6 .debug_info   0002abe8  00000000  00000000  000200c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004488  00000000  00000000  0004acad  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00004cff  00000000  00000000  0004f135  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000618  00000000  00000000  00053e34  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000640  00000000  00000000  0005444c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  000077b6  00000000  00000000  00054a8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000ec46  00000000  00000000  0005c242  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000609ad  00000000  00000000  0006ae88  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00000e18  00000000  00000000  000cb838  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
 * @return				- void
 *
 * @note				- ToDo: Is SERCOM3  OK for this, or will it interfere with i2c?
 ******************************************************************************************************/
void config_encUART(void)
{
       0:	b0 23 00 20 49 14 00 00 45 14 00 00 45 14 00 00     .#. I...E...E...
	...
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
      2c:	45 14 00 00 00 00 00 00 00 00 00 00 45 14 00 00     E...........E...
	config->parity           = USART_PARITY_NONE;
	config->stopbits         = USART_STOPBITS_1;
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
	config->baudrate         = 9600;
	config->receiver_enable  = true;
	config->transmitter_enable = true;
      3c:	05 0d 00 00 45 14 00 00 45 14 00 00 05 01 00 00     ....E...E.......
	writeStr(statusMsg, sizeof(statusMsg));			//uart debug statement
	
	struct usart_config config_usart;
	usart_get_config_defaults(&config_usart);

	config_usart.baudrate    = 115200;						// boosted this above 115200 to overcome a ~10% latency issue
      4c:	45 14 00 00 45 14 00 00 45 14 00 00 05 02 00 00     E...E...E.......
	config_usart.mux_setting = USART_RX_3_TX_2_XCK_3;
	config_usart.pinmux_pad0 = PINMUX_UNUSED;
	config_usart.pinmux_pad1 = PINMUX_UNUSED;
	config_usart.pinmux_pad2 = PINMUX_PA24C_SERCOM3_PAD2;	// PA24 = TX ENC_B
      5c:	a5 0c 00 00 b5 0c 00 00 c5 0c 00 00 d5 0c 00 00     ................
	config_usart.pinmux_pad3 = PINMUX_PA25C_SERCOM3_PAD3;	// PA25 = RX ENC_A
	
	while (usart_init(&usart_instance, SERCOM3, &config_usart) != STATUS_OK)
      6c:	e5 0c 00 00 f5 0c 00 00 85 01 00 00 95 01 00 00     ................
	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
      7c:	a5 01 00 00 b5 01 00 00 c5 01 00 00 d5 01 00 00     ................
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
      8c:	e5 01 00 00 f5 01 00 00 45 14 00 00 45 14 00 00     ........E...E...

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
      9c:	45 14 00 00 45 14 00 00                             E...E...

000000a4 <__do_global_dtors_aux>:
	{
		__ASM volatile ("nop");
	}

	usart_enable(&usart_instance);
}
      a4:	b510      	push	{r4, lr}
      a6:	4c06      	ldr	r4, [pc, #24]	; (c0 <__do_global_dtors_aux+0x1c>)
      a8:	7823      	ldrb	r3, [r4, #0]
      aa:	2b00      	cmp	r3, #0
      ac:	d107      	bne.n	be <__do_global_dtors_aux+0x1a>
      ae:	4b05      	ldr	r3, [pc, #20]	; (c4 <__do_global_dtors_aux+0x20>)
      b0:	2b00      	cmp	r3, #0
      b2:	d002      	beq.n	ba <__do_global_dtors_aux+0x16>
      b4:	4804      	ldr	r0, [pc, #16]	; (c8 <__do_global_dtors_aux+0x24>)
      b6:	e000      	b.n	ba <__do_global_dtors_aux+0x16>
      b8:	bf00      	nop
      ba:	2301      	movs	r3, #1
      bc:	7023      	strb	r3, [r4, #0]
      be:	bd10      	pop	{r4, pc}
      c0:	20000044 	.word	0x20000044
      c4:	00000000 	.word	0x00000000
      c8:	0000184c 	.word	0x0000184c

000000cc <frame_dummy>:
      cc:	4b08      	ldr	r3, [pc, #32]	; (f0 <frame_dummy+0x24>)
      ce:	b510      	push	{r4, lr}
      d0:	2b00      	cmp	r3, #0
      d2:	d003      	beq.n	dc <frame_dummy+0x10>
      d4:	4907      	ldr	r1, [pc, #28]	; (f4 <frame_dummy+0x28>)
      d6:	4808      	ldr	r0, [pc, #32]	; (f8 <frame_dummy+0x2c>)
      d8:	e000      	b.n	dc <frame_dummy+0x10>
      da:	bf00      	nop
      dc:	4807      	ldr	r0, [pc, #28]	; (fc <frame_dummy+0x30>)
      de:	6803      	ldr	r3, [r0, #0]
      e0:	2b00      	cmp	r3, #0
      e2:	d100      	bne.n	e6 <frame_dummy+0x1a>
      e4:	bd10      	pop	{r4, pc}
      e6:	4b06      	ldr	r3, [pc, #24]	; (100 <frame_dummy+0x34>)
      e8:	2b00      	cmp	r3, #0
      ea:	d0fb      	beq.n	e4 <frame_dummy+0x18>
      ec:	4798      	blx	r3
      ee:	e7f9      	b.n	e4 <frame_dummy+0x18>
      f0:	00000000 	.word	0x00000000
      f4:	20000048 	.word	0x20000048
      f8:	0000184c 	.word	0x0000184c
      fc:	0000184c 	.word	0x0000184c
     100:	00000000 	.word	0x00000000

00000104 <WDT_Handler>:
	}
}

/** Handler for the WDT hardware module interrupt. */
void WDT_Handler(void)
{
     104:	b510      	push	{r4, lr}
 */
static inline void wdt_clear_early_warning(void)
{
	Wdt *const WDT_module = WDT;

	WDT_module->INTFLAG.reg = WDT_INTFLAG_EW;
     106:	2201      	movs	r2, #1
     108:	4b03      	ldr	r3, [pc, #12]	; (118 <WDT_Handler+0x14>)
     10a:	719a      	strb	r2, [r3, #6]
	wdt_clear_early_warning();

	if (wdt_early_warning_callback) {
     10c:	4b03      	ldr	r3, [pc, #12]	; (11c <WDT_Handler+0x18>)
     10e:	681b      	ldr	r3, [r3, #0]
     110:	2b00      	cmp	r3, #0
     112:	d000      	beq.n	116 <WDT_Handler+0x12>
		wdt_early_warning_callback();
     114:	4798      	blx	r3
	}
}
     116:	bd10      	pop	{r4, pc}
     118:	40001000 	.word	0x40001000
     11c:	20000098 	.word	0x20000098

00000120 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
     120:	b570      	push	{r4, r5, r6, lr}
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
     122:	0080      	lsls	r0, r0, #2
     124:	4b16      	ldr	r3, [pc, #88]	; (180 <_tc_interrupt_handler+0x60>)
     126:	58c4      	ldr	r4, [r0, r3]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
     128:	6823      	ldr	r3, [r4, #0]
     12a:	7b9d      	ldrb	r5, [r3, #14]
     12c:	7e22      	ldrb	r2, [r4, #24]
     12e:	7e63      	ldrb	r3, [r4, #25]
     130:	4013      	ands	r3, r2
     132:	401d      	ands	r5, r3
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
     134:	07eb      	lsls	r3, r5, #31
     136:	d406      	bmi.n	146 <_tc_interrupt_handler+0x26>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
     138:	07ab      	lsls	r3, r5, #30
     13a:	d40b      	bmi.n	154 <_tc_interrupt_handler+0x34>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
     13c:	06eb      	lsls	r3, r5, #27
     13e:	d410      	bmi.n	162 <_tc_interrupt_handler+0x42>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
     140:	06ab      	lsls	r3, r5, #26
     142:	d415      	bmi.n	170 <_tc_interrupt_handler+0x50>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
	}
}
     144:	bd70      	pop	{r4, r5, r6, pc}
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
     146:	0020      	movs	r0, r4
     148:	68a3      	ldr	r3, [r4, #8]
     14a:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
     14c:	2301      	movs	r3, #1
     14e:	6822      	ldr	r2, [r4, #0]
     150:	7393      	strb	r3, [r2, #14]
     152:	e7f1      	b.n	138 <_tc_interrupt_handler+0x18>
		(module->callback[TC_CALLBACK_ERROR])(module);
     154:	0020      	movs	r0, r4
     156:	68e3      	ldr	r3, [r4, #12]
     158:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
     15a:	2302      	movs	r3, #2
     15c:	6822      	ldr	r2, [r4, #0]
     15e:	7393      	strb	r3, [r2, #14]
     160:	e7ec      	b.n	13c <_tc_interrupt_handler+0x1c>
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
     162:	0020      	movs	r0, r4
     164:	6923      	ldr	r3, [r4, #16]
     166:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
     168:	2310      	movs	r3, #16
     16a:	6822      	ldr	r2, [r4, #0]
     16c:	7393      	strb	r3, [r2, #14]
     16e:	e7e7      	b.n	140 <_tc_interrupt_handler+0x20>
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
     170:	0020      	movs	r0, r4
     172:	6963      	ldr	r3, [r4, #20]
     174:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
     176:	6823      	ldr	r3, [r4, #0]
     178:	2220      	movs	r2, #32
     17a:	739a      	strb	r2, [r3, #14]
}
     17c:	e7e2      	b.n	144 <_tc_interrupt_handler+0x24>
     17e:	46c0      	nop			; (mov r8, r8)
     180:	2000009c 	.word	0x2000009c

00000184 <TC0_Handler>:
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
     184:	b510      	push	{r4, lr}
     186:	2000      	movs	r0, #0
     188:	4b01      	ldr	r3, [pc, #4]	; (190 <TC0_Handler+0xc>)
     18a:	4798      	blx	r3
     18c:	bd10      	pop	{r4, pc}
     18e:	46c0      	nop			; (mov r8, r8)
     190:	00000121 	.word	0x00000121

00000194 <TC1_Handler>:
     194:	b510      	push	{r4, lr}
     196:	2001      	movs	r0, #1
     198:	4b01      	ldr	r3, [pc, #4]	; (1a0 <TC1_Handler+0xc>)
     19a:	4798      	blx	r3
     19c:	bd10      	pop	{r4, pc}
     19e:	46c0      	nop			; (mov r8, r8)
     1a0:	00000121 	.word	0x00000121

000001a4 <TC2_Handler>:
     1a4:	b510      	push	{r4, lr}
     1a6:	2002      	movs	r0, #2
     1a8:	4b01      	ldr	r3, [pc, #4]	; (1b0 <TC2_Handler+0xc>)
     1aa:	4798      	blx	r3
     1ac:	bd10      	pop	{r4, pc}
     1ae:	46c0      	nop			; (mov r8, r8)
     1b0:	00000121 	.word	0x00000121

000001b4 <TC3_Handler>:
     1b4:	b510      	push	{r4, lr}
     1b6:	2003      	movs	r0, #3
     1b8:	4b01      	ldr	r3, [pc, #4]	; (1c0 <TC3_Handler+0xc>)
     1ba:	4798      	blx	r3
     1bc:	bd10      	pop	{r4, pc}
     1be:	46c0      	nop			; (mov r8, r8)
     1c0:	00000121 	.word	0x00000121

000001c4 <TC4_Handler>:
     1c4:	b510      	push	{r4, lr}
     1c6:	2004      	movs	r0, #4
     1c8:	4b01      	ldr	r3, [pc, #4]	; (1d0 <TC4_Handler+0xc>)
     1ca:	4798      	blx	r3
     1cc:	bd10      	pop	{r4, pc}
     1ce:	46c0      	nop			; (mov r8, r8)
     1d0:	00000121 	.word	0x00000121

000001d4 <TC5_Handler>:
     1d4:	b510      	push	{r4, lr}
     1d6:	2005      	movs	r0, #5
     1d8:	4b01      	ldr	r3, [pc, #4]	; (1e0 <TC5_Handler+0xc>)
     1da:	4798      	blx	r3
     1dc:	bd10      	pop	{r4, pc}
     1de:	46c0      	nop			; (mov r8, r8)
     1e0:	00000121 	.word	0x00000121

000001e4 <TC6_Handler>:
     1e4:	b510      	push	{r4, lr}
     1e6:	2006      	movs	r0, #6
     1e8:	4b01      	ldr	r3, [pc, #4]	; (1f0 <TC6_Handler+0xc>)
     1ea:	4798      	blx	r3
     1ec:	bd10      	pop	{r4, pc}
     1ee:	46c0      	nop			; (mov r8, r8)
     1f0:	00000121 	.word	0x00000121

000001f4 <TC7_Handler>:
     1f4:	b510      	push	{r4, lr}
     1f6:	2007      	movs	r0, #7
     1f8:	4b01      	ldr	r3, [pc, #4]	; (200 <TC7_Handler+0xc>)
     1fa:	4798      	blx	r3
     1fc:	bd10      	pop	{r4, pc}
     1fe:	46c0      	nop			; (mov r8, r8)
     200:	00000121 	.word	0x00000121

00000204 <EVSYS_Handler>:

	return STATUS_OK;
}

void EVSYS_Handler(void)
{
     204:	b510      	push	{r4, lr}
	struct events_hook *current_hook = _events_inst.hook_list;
     206:	4b0b      	ldr	r3, [pc, #44]	; (234 <EVSYS_Handler+0x30>)
     208:	691c      	ldr	r4, [r3, #16]
	uint32_t flag;

	/* Synch the interrupt flag buffer with the hardware register */
	flag = EVSYS->INTFLAG.reg;
     20a:	490b      	ldr	r1, [pc, #44]	; (238 <EVSYS_Handler+0x34>)
     20c:	698a      	ldr	r2, [r1, #24]
	_events_inst.interrupt_flag_buffer |= flag;
     20e:	6898      	ldr	r0, [r3, #8]
     210:	4302      	orrs	r2, r0
     212:	609a      	str	r2, [r3, #8]
	/* Clear all hardware interrupt flags */
	EVSYS->INTFLAG.reg = _EVENTS_INTFLAGS_MASK;
     214:	4b09      	ldr	r3, [pc, #36]	; (23c <EVSYS_Handler+0x38>)
     216:	618b      	str	r3, [r1, #24]

	/* Traverse the linked list */
	while (current_hook != NULL) {
     218:	2c00      	cmp	r4, #0
     21a:	d005      	beq.n	228 <EVSYS_Handler+0x24>
		current_hook->hook_func(current_hook->resource);
     21c:	6820      	ldr	r0, [r4, #0]
     21e:	6863      	ldr	r3, [r4, #4]
     220:	4798      	blx	r3
		current_hook = current_hook->next;
     222:	68a4      	ldr	r4, [r4, #8]
	while (current_hook != NULL) {
     224:	2c00      	cmp	r4, #0
     226:	d1f9      	bne.n	21c <EVSYS_Handler+0x18>
	}

	/* Clear acknowledged interrupt sources from the interrupt flag buffer */
	flag = _events_inst.interrupt_flag_ack_buffer;
     228:	4b02      	ldr	r3, [pc, #8]	; (234 <EVSYS_Handler+0x30>)
     22a:	68d9      	ldr	r1, [r3, #12]
	_events_inst.interrupt_flag_buffer &= ~flag;
     22c:	689a      	ldr	r2, [r3, #8]
     22e:	438a      	bics	r2, r1
     230:	609a      	str	r2, [r3, #8]
}
     232:	bd10      	pop	{r4, pc}
     234:	20000000 	.word	0x20000000
     238:	42000400 	.word	0x42000400
     23c:	0f0fffff 	.word	0x0f0fffff

00000240 <_system_events_init>:
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     240:	4a06      	ldr	r2, [pc, #24]	; (25c <_system_events_init+0x1c>)
     242:	6a13      	ldr	r3, [r2, #32]
     244:	2102      	movs	r1, #2
     246:	430b      	orrs	r3, r1
     248:	6213      	str	r3, [r2, #32]
{
	/* Enable EVSYS register interface */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_EVSYS);

	/* Make sure the EVSYS module is properly reset */
	EVSYS->CTRL.reg = EVSYS_CTRL_SWRST;
     24a:	2201      	movs	r2, #1
     24c:	4b04      	ldr	r3, [pc, #16]	; (260 <_system_events_init+0x20>)
     24e:	701a      	strb	r2, [r3, #0]

	while (EVSYS->CTRL.reg & EVSYS_CTRL_SWRST) {
     250:	0019      	movs	r1, r3
     252:	780b      	ldrb	r3, [r1, #0]
     254:	4213      	tst	r3, r2
     256:	d1fc      	bne.n	252 <_system_events_init+0x12>
	}
}
     258:	4770      	bx	lr
     25a:	46c0      	nop			; (mov r8, r8)
     25c:	40000400 	.word	0x40000400
     260:	42000400 	.word	0x42000400

00000264 <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
     264:	b5f0      	push	{r4, r5, r6, r7, lr}
     266:	46de      	mov	lr, fp
     268:	4657      	mov	r7, sl
     26a:	464e      	mov	r6, r9
     26c:	4645      	mov	r5, r8
     26e:	b5e0      	push	{r5, r6, r7, lr}
     270:	b087      	sub	sp, #28
     272:	4680      	mov	r8, r0
     274:	9104      	str	r1, [sp, #16]
     276:	0016      	movs	r6, r2
     278:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     27a:	2200      	movs	r2, #0
     27c:	2300      	movs	r3, #0
     27e:	2100      	movs	r1, #0
     280:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
     282:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
     284:	2001      	movs	r0, #1
     286:	0021      	movs	r1, r4
     288:	9600      	str	r6, [sp, #0]
     28a:	9701      	str	r7, [sp, #4]
     28c:	465c      	mov	r4, fp
     28e:	9403      	str	r4, [sp, #12]
     290:	4644      	mov	r4, r8
     292:	9405      	str	r4, [sp, #20]
     294:	e013      	b.n	2be <long_division+0x5a>
     296:	2420      	movs	r4, #32
     298:	1a64      	subs	r4, r4, r1
     29a:	0005      	movs	r5, r0
     29c:	40e5      	lsrs	r5, r4
     29e:	46a8      	mov	r8, r5
     2a0:	e014      	b.n	2cc <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
     2a2:	9c00      	ldr	r4, [sp, #0]
     2a4:	9d01      	ldr	r5, [sp, #4]
     2a6:	1b12      	subs	r2, r2, r4
     2a8:	41ab      	sbcs	r3, r5
			q |= bit_shift;
     2aa:	465c      	mov	r4, fp
     2ac:	464d      	mov	r5, r9
     2ae:	432c      	orrs	r4, r5
     2b0:	46a3      	mov	fp, r4
     2b2:	9c03      	ldr	r4, [sp, #12]
     2b4:	4645      	mov	r5, r8
     2b6:	432c      	orrs	r4, r5
     2b8:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
     2ba:	3901      	subs	r1, #1
     2bc:	d325      	bcc.n	30a <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
     2be:	2420      	movs	r4, #32
     2c0:	4264      	negs	r4, r4
     2c2:	190c      	adds	r4, r1, r4
     2c4:	d4e7      	bmi.n	296 <long_division+0x32>
     2c6:	0005      	movs	r5, r0
     2c8:	40a5      	lsls	r5, r4
     2ca:	46a8      	mov	r8, r5
     2cc:	0004      	movs	r4, r0
     2ce:	408c      	lsls	r4, r1
     2d0:	46a1      	mov	r9, r4
		r = r << 1;
     2d2:	1892      	adds	r2, r2, r2
     2d4:	415b      	adcs	r3, r3
     2d6:	0014      	movs	r4, r2
     2d8:	001d      	movs	r5, r3
		if (n & bit_shift) {
     2da:	9e05      	ldr	r6, [sp, #20]
     2dc:	464f      	mov	r7, r9
     2de:	403e      	ands	r6, r7
     2e0:	46b4      	mov	ip, r6
     2e2:	9e04      	ldr	r6, [sp, #16]
     2e4:	4647      	mov	r7, r8
     2e6:	403e      	ands	r6, r7
     2e8:	46b2      	mov	sl, r6
     2ea:	4666      	mov	r6, ip
     2ec:	4657      	mov	r7, sl
     2ee:	433e      	orrs	r6, r7
     2f0:	d003      	beq.n	2fa <long_division+0x96>
			r |= 0x01;
     2f2:	0006      	movs	r6, r0
     2f4:	4326      	orrs	r6, r4
     2f6:	0032      	movs	r2, r6
     2f8:	002b      	movs	r3, r5
		if (r >= d) {
     2fa:	9c00      	ldr	r4, [sp, #0]
     2fc:	9d01      	ldr	r5, [sp, #4]
     2fe:	429d      	cmp	r5, r3
     300:	d8db      	bhi.n	2ba <long_division+0x56>
     302:	d1ce      	bne.n	2a2 <long_division+0x3e>
     304:	4294      	cmp	r4, r2
     306:	d8d8      	bhi.n	2ba <long_division+0x56>
     308:	e7cb      	b.n	2a2 <long_division+0x3e>
     30a:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
     30c:	4658      	mov	r0, fp
     30e:	0019      	movs	r1, r3
     310:	b007      	add	sp, #28
     312:	bc3c      	pop	{r2, r3, r4, r5}
     314:	4690      	mov	r8, r2
     316:	4699      	mov	r9, r3
     318:	46a2      	mov	sl, r4
     31a:	46ab      	mov	fp, r5
     31c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000031e <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     31e:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     320:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     322:	2340      	movs	r3, #64	; 0x40
     324:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
     326:	4281      	cmp	r1, r0
     328:	d202      	bcs.n	330 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
     32a:	0018      	movs	r0, r3
     32c:	bd10      	pop	{r4, pc}
		baud_calculated++;
     32e:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
     330:	1a09      	subs	r1, r1, r0
		baud_calculated++;
     332:	1c63      	adds	r3, r4, #1
     334:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
     336:	4288      	cmp	r0, r1
     338:	d9f9      	bls.n	32e <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     33a:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
     33c:	2cff      	cmp	r4, #255	; 0xff
     33e:	d8f4      	bhi.n	32a <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
     340:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
     342:	2300      	movs	r3, #0
     344:	e7f1      	b.n	32a <_sercom_get_sync_baud_val+0xc>
	...

00000348 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     348:	b5f0      	push	{r4, r5, r6, r7, lr}
     34a:	b083      	sub	sp, #12
     34c:	000f      	movs	r7, r1
     34e:	0016      	movs	r6, r2
     350:	aa08      	add	r2, sp, #32
     352:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     354:	0004      	movs	r4, r0
     356:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     358:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
     35a:	42bc      	cmp	r4, r7
     35c:	d902      	bls.n	364 <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
     35e:	0010      	movs	r0, r2
     360:	b003      	add	sp, #12
     362:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     364:	2b00      	cmp	r3, #0
     366:	d114      	bne.n	392 <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     368:	0002      	movs	r2, r0
     36a:	0008      	movs	r0, r1
     36c:	2100      	movs	r1, #0
     36e:	4c19      	ldr	r4, [pc, #100]	; (3d4 <_sercom_get_async_baud_val+0x8c>)
     370:	47a0      	blx	r4
     372:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
     374:	003a      	movs	r2, r7
     376:	2300      	movs	r3, #0
     378:	2000      	movs	r0, #0
     37a:	4c17      	ldr	r4, [pc, #92]	; (3d8 <_sercom_get_async_baud_val+0x90>)
     37c:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
     37e:	2200      	movs	r2, #0
     380:	2301      	movs	r3, #1
     382:	1a12      	subs	r2, r2, r0
     384:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
     386:	0c12      	lsrs	r2, r2, #16
     388:	041b      	lsls	r3, r3, #16
     38a:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
     38c:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
     38e:	2200      	movs	r2, #0
     390:	e7e5      	b.n	35e <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
     392:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     394:	2b01      	cmp	r3, #1
     396:	d1f9      	bne.n	38c <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
     398:	000a      	movs	r2, r1
     39a:	2300      	movs	r3, #0
     39c:	2100      	movs	r1, #0
     39e:	4c0d      	ldr	r4, [pc, #52]	; (3d4 <_sercom_get_async_baud_val+0x8c>)
     3a0:	47a0      	blx	r4
     3a2:	0002      	movs	r2, r0
     3a4:	000b      	movs	r3, r1
     3a6:	9200      	str	r2, [sp, #0]
     3a8:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
     3aa:	0038      	movs	r0, r7
     3ac:	2100      	movs	r1, #0
     3ae:	4c0a      	ldr	r4, [pc, #40]	; (3d8 <_sercom_get_async_baud_val+0x90>)
     3b0:	47a0      	blx	r4
     3b2:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
     3b4:	2380      	movs	r3, #128	; 0x80
     3b6:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     3b8:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
     3ba:	4298      	cmp	r0, r3
     3bc:	d8cf      	bhi.n	35e <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
     3be:	0f79      	lsrs	r1, r7, #29
     3c0:	00f8      	lsls	r0, r7, #3
     3c2:	9a00      	ldr	r2, [sp, #0]
     3c4:	9b01      	ldr	r3, [sp, #4]
     3c6:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
     3c8:	00ea      	lsls	r2, r5, #3
     3ca:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
     3cc:	b2d2      	uxtb	r2, r2
     3ce:	0352      	lsls	r2, r2, #13
     3d0:	432a      	orrs	r2, r5
     3d2:	e7db      	b.n	38c <_sercom_get_async_baud_val+0x44>
     3d4:	000016cd 	.word	0x000016cd
     3d8:	00000265 	.word	0x00000265

000003dc <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     3dc:	b510      	push	{r4, lr}
     3de:	b082      	sub	sp, #8
     3e0:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     3e2:	4b0e      	ldr	r3, [pc, #56]	; (41c <sercom_set_gclk_generator+0x40>)
     3e4:	781b      	ldrb	r3, [r3, #0]
     3e6:	2b00      	cmp	r3, #0
     3e8:	d007      	beq.n	3fa <sercom_set_gclk_generator+0x1e>
     3ea:	2900      	cmp	r1, #0
     3ec:	d105      	bne.n	3fa <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
     3ee:	4b0b      	ldr	r3, [pc, #44]	; (41c <sercom_set_gclk_generator+0x40>)
     3f0:	785b      	ldrb	r3, [r3, #1]
     3f2:	4283      	cmp	r3, r0
     3f4:	d010      	beq.n	418 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     3f6:	201d      	movs	r0, #29
     3f8:	e00c      	b.n	414 <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
     3fa:	a901      	add	r1, sp, #4
     3fc:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     3fe:	200c      	movs	r0, #12
     400:	4b07      	ldr	r3, [pc, #28]	; (420 <sercom_set_gclk_generator+0x44>)
     402:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     404:	200c      	movs	r0, #12
     406:	4b07      	ldr	r3, [pc, #28]	; (424 <sercom_set_gclk_generator+0x48>)
     408:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
     40a:	4b04      	ldr	r3, [pc, #16]	; (41c <sercom_set_gclk_generator+0x40>)
     40c:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     40e:	2201      	movs	r2, #1
     410:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
     412:	2000      	movs	r0, #0
}
     414:	b002      	add	sp, #8
     416:	bd10      	pop	{r4, pc}
		return STATUS_OK;
     418:	2000      	movs	r0, #0
     41a:	e7fb      	b.n	414 <sercom_set_gclk_generator+0x38>
     41c:	20000060 	.word	0x20000060
     420:	000012ed 	.word	0x000012ed
     424:	00001261 	.word	0x00001261

00000428 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     428:	4b40      	ldr	r3, [pc, #256]	; (52c <_sercom_get_default_pad+0x104>)
     42a:	4298      	cmp	r0, r3
     42c:	d031      	beq.n	492 <_sercom_get_default_pad+0x6a>
     42e:	d90a      	bls.n	446 <_sercom_get_default_pad+0x1e>
     430:	4b3f      	ldr	r3, [pc, #252]	; (530 <_sercom_get_default_pad+0x108>)
     432:	4298      	cmp	r0, r3
     434:	d04d      	beq.n	4d2 <_sercom_get_default_pad+0xaa>
     436:	4b3f      	ldr	r3, [pc, #252]	; (534 <_sercom_get_default_pad+0x10c>)
     438:	4298      	cmp	r0, r3
     43a:	d05a      	beq.n	4f2 <_sercom_get_default_pad+0xca>
     43c:	4b3e      	ldr	r3, [pc, #248]	; (538 <_sercom_get_default_pad+0x110>)
     43e:	4298      	cmp	r0, r3
     440:	d037      	beq.n	4b2 <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
     442:	2000      	movs	r0, #0
}
     444:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
     446:	4b3d      	ldr	r3, [pc, #244]	; (53c <_sercom_get_default_pad+0x114>)
     448:	4298      	cmp	r0, r3
     44a:	d00c      	beq.n	466 <_sercom_get_default_pad+0x3e>
     44c:	4b3c      	ldr	r3, [pc, #240]	; (540 <_sercom_get_default_pad+0x118>)
     44e:	4298      	cmp	r0, r3
     450:	d1f7      	bne.n	442 <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     452:	2901      	cmp	r1, #1
     454:	d017      	beq.n	486 <_sercom_get_default_pad+0x5e>
     456:	2900      	cmp	r1, #0
     458:	d05d      	beq.n	516 <_sercom_get_default_pad+0xee>
     45a:	2902      	cmp	r1, #2
     45c:	d015      	beq.n	48a <_sercom_get_default_pad+0x62>
     45e:	2903      	cmp	r1, #3
     460:	d015      	beq.n	48e <_sercom_get_default_pad+0x66>
	return 0;
     462:	2000      	movs	r0, #0
     464:	e7ee      	b.n	444 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     466:	2901      	cmp	r1, #1
     468:	d007      	beq.n	47a <_sercom_get_default_pad+0x52>
     46a:	2900      	cmp	r1, #0
     46c:	d051      	beq.n	512 <_sercom_get_default_pad+0xea>
     46e:	2902      	cmp	r1, #2
     470:	d005      	beq.n	47e <_sercom_get_default_pad+0x56>
     472:	2903      	cmp	r1, #3
     474:	d005      	beq.n	482 <_sercom_get_default_pad+0x5a>
	return 0;
     476:	2000      	movs	r0, #0
     478:	e7e4      	b.n	444 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     47a:	4832      	ldr	r0, [pc, #200]	; (544 <_sercom_get_default_pad+0x11c>)
     47c:	e7e2      	b.n	444 <_sercom_get_default_pad+0x1c>
     47e:	4832      	ldr	r0, [pc, #200]	; (548 <_sercom_get_default_pad+0x120>)
     480:	e7e0      	b.n	444 <_sercom_get_default_pad+0x1c>
     482:	4832      	ldr	r0, [pc, #200]	; (54c <_sercom_get_default_pad+0x124>)
     484:	e7de      	b.n	444 <_sercom_get_default_pad+0x1c>
     486:	4832      	ldr	r0, [pc, #200]	; (550 <_sercom_get_default_pad+0x128>)
     488:	e7dc      	b.n	444 <_sercom_get_default_pad+0x1c>
     48a:	4832      	ldr	r0, [pc, #200]	; (554 <_sercom_get_default_pad+0x12c>)
     48c:	e7da      	b.n	444 <_sercom_get_default_pad+0x1c>
     48e:	4832      	ldr	r0, [pc, #200]	; (558 <_sercom_get_default_pad+0x130>)
     490:	e7d8      	b.n	444 <_sercom_get_default_pad+0x1c>
     492:	2901      	cmp	r1, #1
     494:	d007      	beq.n	4a6 <_sercom_get_default_pad+0x7e>
     496:	2900      	cmp	r1, #0
     498:	d03f      	beq.n	51a <_sercom_get_default_pad+0xf2>
     49a:	2902      	cmp	r1, #2
     49c:	d005      	beq.n	4aa <_sercom_get_default_pad+0x82>
     49e:	2903      	cmp	r1, #3
     4a0:	d005      	beq.n	4ae <_sercom_get_default_pad+0x86>
	return 0;
     4a2:	2000      	movs	r0, #0
     4a4:	e7ce      	b.n	444 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     4a6:	482d      	ldr	r0, [pc, #180]	; (55c <_sercom_get_default_pad+0x134>)
     4a8:	e7cc      	b.n	444 <_sercom_get_default_pad+0x1c>
     4aa:	482d      	ldr	r0, [pc, #180]	; (560 <_sercom_get_default_pad+0x138>)
     4ac:	e7ca      	b.n	444 <_sercom_get_default_pad+0x1c>
     4ae:	482d      	ldr	r0, [pc, #180]	; (564 <_sercom_get_default_pad+0x13c>)
     4b0:	e7c8      	b.n	444 <_sercom_get_default_pad+0x1c>
     4b2:	2901      	cmp	r1, #1
     4b4:	d007      	beq.n	4c6 <_sercom_get_default_pad+0x9e>
     4b6:	2900      	cmp	r1, #0
     4b8:	d031      	beq.n	51e <_sercom_get_default_pad+0xf6>
     4ba:	2902      	cmp	r1, #2
     4bc:	d005      	beq.n	4ca <_sercom_get_default_pad+0xa2>
     4be:	2903      	cmp	r1, #3
     4c0:	d005      	beq.n	4ce <_sercom_get_default_pad+0xa6>
	return 0;
     4c2:	2000      	movs	r0, #0
     4c4:	e7be      	b.n	444 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     4c6:	4828      	ldr	r0, [pc, #160]	; (568 <_sercom_get_default_pad+0x140>)
     4c8:	e7bc      	b.n	444 <_sercom_get_default_pad+0x1c>
     4ca:	4828      	ldr	r0, [pc, #160]	; (56c <_sercom_get_default_pad+0x144>)
     4cc:	e7ba      	b.n	444 <_sercom_get_default_pad+0x1c>
     4ce:	4828      	ldr	r0, [pc, #160]	; (570 <_sercom_get_default_pad+0x148>)
     4d0:	e7b8      	b.n	444 <_sercom_get_default_pad+0x1c>
     4d2:	2901      	cmp	r1, #1
     4d4:	d007      	beq.n	4e6 <_sercom_get_default_pad+0xbe>
     4d6:	2900      	cmp	r1, #0
     4d8:	d023      	beq.n	522 <_sercom_get_default_pad+0xfa>
     4da:	2902      	cmp	r1, #2
     4dc:	d005      	beq.n	4ea <_sercom_get_default_pad+0xc2>
     4de:	2903      	cmp	r1, #3
     4e0:	d005      	beq.n	4ee <_sercom_get_default_pad+0xc6>
	return 0;
     4e2:	2000      	movs	r0, #0
     4e4:	e7ae      	b.n	444 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     4e6:	4823      	ldr	r0, [pc, #140]	; (574 <_sercom_get_default_pad+0x14c>)
     4e8:	e7ac      	b.n	444 <_sercom_get_default_pad+0x1c>
     4ea:	4823      	ldr	r0, [pc, #140]	; (578 <_sercom_get_default_pad+0x150>)
     4ec:	e7aa      	b.n	444 <_sercom_get_default_pad+0x1c>
     4ee:	4823      	ldr	r0, [pc, #140]	; (57c <_sercom_get_default_pad+0x154>)
     4f0:	e7a8      	b.n	444 <_sercom_get_default_pad+0x1c>
     4f2:	2901      	cmp	r1, #1
     4f4:	d007      	beq.n	506 <_sercom_get_default_pad+0xde>
     4f6:	2900      	cmp	r1, #0
     4f8:	d015      	beq.n	526 <_sercom_get_default_pad+0xfe>
     4fa:	2902      	cmp	r1, #2
     4fc:	d005      	beq.n	50a <_sercom_get_default_pad+0xe2>
     4fe:	2903      	cmp	r1, #3
     500:	d005      	beq.n	50e <_sercom_get_default_pad+0xe6>
	return 0;
     502:	2000      	movs	r0, #0
     504:	e79e      	b.n	444 <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     506:	481e      	ldr	r0, [pc, #120]	; (580 <_sercom_get_default_pad+0x158>)
     508:	e79c      	b.n	444 <_sercom_get_default_pad+0x1c>
     50a:	481e      	ldr	r0, [pc, #120]	; (584 <_sercom_get_default_pad+0x15c>)
     50c:	e79a      	b.n	444 <_sercom_get_default_pad+0x1c>
     50e:	481e      	ldr	r0, [pc, #120]	; (588 <_sercom_get_default_pad+0x160>)
     510:	e798      	b.n	444 <_sercom_get_default_pad+0x1c>
     512:	481e      	ldr	r0, [pc, #120]	; (58c <_sercom_get_default_pad+0x164>)
     514:	e796      	b.n	444 <_sercom_get_default_pad+0x1c>
     516:	2003      	movs	r0, #3
     518:	e794      	b.n	444 <_sercom_get_default_pad+0x1c>
     51a:	481d      	ldr	r0, [pc, #116]	; (590 <_sercom_get_default_pad+0x168>)
     51c:	e792      	b.n	444 <_sercom_get_default_pad+0x1c>
     51e:	481d      	ldr	r0, [pc, #116]	; (594 <_sercom_get_default_pad+0x16c>)
     520:	e790      	b.n	444 <_sercom_get_default_pad+0x1c>
     522:	481d      	ldr	r0, [pc, #116]	; (598 <_sercom_get_default_pad+0x170>)
     524:	e78e      	b.n	444 <_sercom_get_default_pad+0x1c>
     526:	481d      	ldr	r0, [pc, #116]	; (59c <_sercom_get_default_pad+0x174>)
     528:	e78c      	b.n	444 <_sercom_get_default_pad+0x1c>
     52a:	46c0      	nop			; (mov r8, r8)
     52c:	42001000 	.word	0x42001000
     530:	42001800 	.word	0x42001800
     534:	42001c00 	.word	0x42001c00
     538:	42001400 	.word	0x42001400
     53c:	42000800 	.word	0x42000800
     540:	42000c00 	.word	0x42000c00
     544:	00050003 	.word	0x00050003
     548:	00060003 	.word	0x00060003
     54c:	00070003 	.word	0x00070003
     550:	00010003 	.word	0x00010003
     554:	001e0003 	.word	0x001e0003
     558:	001f0003 	.word	0x001f0003
     55c:	00090003 	.word	0x00090003
     560:	000a0003 	.word	0x000a0003
     564:	000b0003 	.word	0x000b0003
     568:	00110003 	.word	0x00110003
     56c:	00120003 	.word	0x00120003
     570:	00130003 	.word	0x00130003
     574:	000d0003 	.word	0x000d0003
     578:	000e0003 	.word	0x000e0003
     57c:	000f0003 	.word	0x000f0003
     580:	00170003 	.word	0x00170003
     584:	00180003 	.word	0x00180003
     588:	00190003 	.word	0x00190003
     58c:	00040003 	.word	0x00040003
     590:	00080003 	.word	0x00080003
     594:	00100003 	.word	0x00100003
     598:	000c0003 	.word	0x000c0003
     59c:	00160003 	.word	0x00160003

000005a0 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     5a0:	b530      	push	{r4, r5, lr}
     5a2:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     5a4:	4b0b      	ldr	r3, [pc, #44]	; (5d4 <_sercom_get_sercom_inst_index+0x34>)
     5a6:	466a      	mov	r2, sp
     5a8:	cb32      	ldmia	r3!, {r1, r4, r5}
     5aa:	c232      	stmia	r2!, {r1, r4, r5}
     5ac:	cb32      	ldmia	r3!, {r1, r4, r5}
     5ae:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     5b0:	9b00      	ldr	r3, [sp, #0]
     5b2:	4283      	cmp	r3, r0
     5b4:	d00b      	beq.n	5ce <_sercom_get_sercom_inst_index+0x2e>
     5b6:	2301      	movs	r3, #1
     5b8:	009a      	lsls	r2, r3, #2
     5ba:	4669      	mov	r1, sp
     5bc:	5852      	ldr	r2, [r2, r1]
     5be:	4282      	cmp	r2, r0
     5c0:	d006      	beq.n	5d0 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     5c2:	3301      	adds	r3, #1
     5c4:	2b06      	cmp	r3, #6
     5c6:	d1f7      	bne.n	5b8 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     5c8:	2000      	movs	r0, #0
}
     5ca:	b007      	add	sp, #28
     5cc:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     5ce:	2300      	movs	r3, #0
			return i;
     5d0:	b2d8      	uxtb	r0, r3
     5d2:	e7fa      	b.n	5ca <_sercom_get_sercom_inst_index+0x2a>
     5d4:	00001768 	.word	0x00001768

000005d8 <usart_write_callback>:
 *
 * @note				- 
 ******************************************************************************************************/
void usart_write_callback(const struct usart_module *const usart_module)
{
	__ASM volatile ("nop");
     5d8:	46c0      	nop			; (mov r8, r8)
}
     5da:	4770      	bx	lr

000005dc <config_UART>:
{
     5dc:	b530      	push	{r4, r5, lr}
     5de:	b095      	sub	sp, #84	; 0x54
	uint8_t statusMsg[] = "Configuring Terminal UART....\r\n";
     5e0:	a80c      	add	r0, sp, #48	; 0x30
     5e2:	4b25      	ldr	r3, [pc, #148]	; (678 <config_UART+0x9c>)
     5e4:	0002      	movs	r2, r0
     5e6:	cb32      	ldmia	r3!, {r1, r4, r5}
     5e8:	c232      	stmia	r2!, {r1, r4, r5}
     5ea:	cb32      	ldmia	r3!, {r1, r4, r5}
     5ec:	c232      	stmia	r2!, {r1, r4, r5}
     5ee:	cb12      	ldmia	r3!, {r1, r4}
     5f0:	c212      	stmia	r2!, {r1, r4}
	writeStr(statusMsg, sizeof(statusMsg));			//uart debug statement
     5f2:	2120      	movs	r1, #32
     5f4:	4b21      	ldr	r3, [pc, #132]	; (67c <config_UART+0xa0>)
     5f6:	4798      	blx	r3
	config->data_order       = USART_DATAORDER_LSB;
     5f8:	2380      	movs	r3, #128	; 0x80
     5fa:	05db      	lsls	r3, r3, #23
     5fc:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
     5fe:	2300      	movs	r3, #0
     600:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
     602:	22ff      	movs	r2, #255	; 0xff
     604:	4669      	mov	r1, sp
     606:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
     608:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
     60a:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
     60c:	2296      	movs	r2, #150	; 0x96
     60e:	0192      	lsls	r2, r2, #6
     610:	9204      	str	r2, [sp, #16]
	config->receiver_enable  = true;
     612:	2201      	movs	r2, #1
     614:	750a      	strb	r2, [r1, #20]
	config->transmitter_enable = true;
     616:	754a      	strb	r2, [r1, #21]
	config->clock_polarity_inverted = false;
     618:	758b      	strb	r3, [r1, #22]
	config->use_external_clock = false;
     61a:	75cb      	strb	r3, [r1, #23]
	config->ext_clock_freq   = 0;
     61c:	9306      	str	r3, [sp, #24]
	config->run_in_standby   = false;
     61e:	770b      	strb	r3, [r1, #28]
	config->generator_source = GCLK_GENERATOR_0;
     620:	774b      	strb	r3, [r1, #29]
	config_usart.mux_setting = USART_RX_1_TX_0_XCK_1;
     622:	2380      	movs	r3, #128	; 0x80
     624:	035b      	lsls	r3, r3, #13
     626:	9303      	str	r3, [sp, #12]
	config_usart.pinmux_pad0 = PINMUX_PB08D_SERCOM4_PAD0;	// PB08 = TX
     628:	4b15      	ldr	r3, [pc, #84]	; (680 <config_UART+0xa4>)
     62a:	9308      	str	r3, [sp, #32]
	config_usart.pinmux_pad1 = PINMUX_PB09D_SERCOM4_PAD1;	// PB09 = RX
     62c:	4b15      	ldr	r3, [pc, #84]	; (684 <config_UART+0xa8>)
     62e:	9309      	str	r3, [sp, #36]	; 0x24
	config_usart.pinmux_pad2 = PINMUX_UNUSED;
     630:	2301      	movs	r3, #1
     632:	425b      	negs	r3, r3
     634:	930a      	str	r3, [sp, #40]	; 0x28
	config_usart.pinmux_pad3 = PINMUX_UNUSED;
     636:	930b      	str	r3, [sp, #44]	; 0x2c
	while (usart_init(&usart_instance, SERCOM4, &config_usart) != STATUS_OK)
     638:	4d13      	ldr	r5, [pc, #76]	; (688 <config_UART+0xac>)
     63a:	4c14      	ldr	r4, [pc, #80]	; (68c <config_UART+0xb0>)
     63c:	e000      	b.n	640 <config_UART+0x64>
		__ASM volatile ("nop");
     63e:	46c0      	nop			; (mov r8, r8)
	while (usart_init(&usart_instance, SERCOM4, &config_usart) != STATUS_OK)
     640:	466a      	mov	r2, sp
     642:	4913      	ldr	r1, [pc, #76]	; (690 <config_UART+0xb4>)
     644:	0028      	movs	r0, r5
     646:	47a0      	blx	r4
     648:	2800      	cmp	r0, #0
     64a:	d1f8      	bne.n	63e <config_UART+0x62>
	SercomUsart *const usart_hw = &(module->hw->USART);
     64c:	4d0e      	ldr	r5, [pc, #56]	; (688 <config_UART+0xac>)
     64e:	682c      	ldr	r4, [r5, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     650:	0020      	movs	r0, r4
     652:	4b10      	ldr	r3, [pc, #64]	; (694 <config_UART+0xb8>)
     654:	4798      	blx	r3
     656:	231f      	movs	r3, #31
     658:	4018      	ands	r0, r3
     65a:	3b1e      	subs	r3, #30
     65c:	4083      	lsls	r3, r0
     65e:	4a0e      	ldr	r2, [pc, #56]	; (698 <config_UART+0xbc>)
     660:	6013      	str	r3, [r2, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
     662:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
     664:	8a13      	ldrh	r3, [r2, #16]
	while (usart_is_syncing(module)) {
     666:	b21b      	sxth	r3, r3
     668:	2b00      	cmp	r3, #0
     66a:	dbfb      	blt.n	664 <config_UART+0x88>
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
     66c:	6823      	ldr	r3, [r4, #0]
     66e:	2202      	movs	r2, #2
     670:	4313      	orrs	r3, r2
     672:	6023      	str	r3, [r4, #0]
}
     674:	b015      	add	sp, #84	; 0x54
     676:	bd30      	pop	{r4, r5, pc}
     678:	00001780 	.word	0x00001780
     67c:	000014e1 	.word	0x000014e1
     680:	00280003 	.word	0x00280003
     684:	00290003 	.word	0x00290003
     688:	200000c0 	.word	0x200000c0
     68c:	00000755 	.word	0x00000755
     690:	42001800 	.word	0x42001800
     694:	00000c75 	.word	0x00000c75
     698:	e000e100 	.word	0xe000e100

0000069c <config_UART_Callback>:
{
     69c:	b530      	push	{r4, r5, lr}
     69e:	b08b      	sub	sp, #44	; 0x2c
	uint8_t statusMsg[] = "Configuring UART Callbacks....\r\n";
     6a0:	a801      	add	r0, sp, #4
     6a2:	4b0f      	ldr	r3, [pc, #60]	; (6e0 <config_UART_Callback+0x44>)
     6a4:	0002      	movs	r2, r0
     6a6:	cb32      	ldmia	r3!, {r1, r4, r5}
     6a8:	c232      	stmia	r2!, {r1, r4, r5}
     6aa:	cb32      	ldmia	r3!, {r1, r4, r5}
     6ac:	c232      	stmia	r2!, {r1, r4, r5}
     6ae:	cb12      	ldmia	r3!, {r1, r4}
     6b0:	c212      	stmia	r2!, {r1, r4}
     6b2:	781b      	ldrb	r3, [r3, #0]
     6b4:	7013      	strb	r3, [r2, #0]
	writeStr(statusMsg, sizeof(statusMsg));			//uart debug statement
     6b6:	2121      	movs	r1, #33	; 0x21
     6b8:	4b0a      	ldr	r3, [pc, #40]	; (6e4 <config_UART_Callback+0x48>)
     6ba:	4798      	blx	r3
	usart_register_callback(&usart_instance, (usart_callback_t) usart_write_callback, USART_CALLBACK_BUFFER_TRANSMITTED);
     6bc:	4c0a      	ldr	r4, [pc, #40]	; (6e8 <config_UART_Callback+0x4c>)
     6be:	2200      	movs	r2, #0
     6c0:	490a      	ldr	r1, [pc, #40]	; (6ec <config_UART_Callback+0x50>)
     6c2:	0020      	movs	r0, r4
     6c4:	4d0a      	ldr	r5, [pc, #40]	; (6f0 <config_UART_Callback+0x54>)
     6c6:	47a8      	blx	r5
	usart_register_callback(&usart_instance, (usart_callback_t) usart_read_callback, USART_CALLBACK_BUFFER_RECEIVED);
     6c8:	2201      	movs	r2, #1
     6ca:	490a      	ldr	r1, [pc, #40]	; (6f4 <config_UART_Callback+0x58>)
     6cc:	0020      	movs	r0, r4
     6ce:	47a8      	blx	r5
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
     6d0:	2221      	movs	r2, #33	; 0x21
     6d2:	5ca3      	ldrb	r3, [r4, r2]
     6d4:	2103      	movs	r1, #3
     6d6:	430b      	orrs	r3, r1
     6d8:	54a3      	strb	r3, [r4, r2]
}
     6da:	b00b      	add	sp, #44	; 0x2c
     6dc:	bd30      	pop	{r4, r5, pc}
     6de:	46c0      	nop			; (mov r8, r8)
     6e0:	000017a0 	.word	0x000017a0
     6e4:	000014e1 	.word	0x000014e1
     6e8:	200000c0 	.word	0x200000c0
     6ec:	000005d9 	.word	0x000005d9
     6f0:	00000ad9 	.word	0x00000ad9
     6f4:	00000715 	.word	0x00000715

000006f8 <UART_Continuous>:
 * @return				- void
 *
 * @note				- called from usart_read_callback
 ******************************************************************************************************/
void UART_Continuous(void)
{
     6f8:	b510      	push	{r4, lr}
	usart_read_buffer_job(&usart_instance, &ch_buffer, 1);
     6fa:	2201      	movs	r2, #1
     6fc:	4902      	ldr	r1, [pc, #8]	; (708 <UART_Continuous+0x10>)
     6fe:	4803      	ldr	r0, [pc, #12]	; (70c <UART_Continuous+0x14>)
     700:	4b03      	ldr	r3, [pc, #12]	; (710 <UART_Continuous+0x18>)
     702:	4798      	blx	r3
}
     704:	bd10      	pop	{r4, pc}
     706:	46c0      	nop			; (mov r8, r8)
     708:	200000bc 	.word	0x200000bc
     70c:	200000c0 	.word	0x200000c0
     710:	00000af1 	.word	0x00000af1

00000714 <usart_read_callback>:
{
     714:	b510      	push	{r4, lr}
	tx_rx_buffer[rx_index] = ch_buffer;
     716:	480a      	ldr	r0, [pc, #40]	; (740 <usart_read_callback+0x2c>)
     718:	8803      	ldrh	r3, [r0, #0]
     71a:	4a0a      	ldr	r2, [pc, #40]	; (744 <usart_read_callback+0x30>)
     71c:	7811      	ldrb	r1, [r2, #0]
     71e:	4a0a      	ldr	r2, [pc, #40]	; (748 <usart_read_callback+0x34>)
     720:	54d1      	strb	r1, [r2, r3]
	tx_rx_buffer[rx_index+1] = 0;		// clear future buffer
     722:	18d2      	adds	r2, r2, r3
     724:	2400      	movs	r4, #0
     726:	7054      	strb	r4, [r2, #1]
	tx_rx_buffer[rx_index+2] = 0;		// clear future buffer
     728:	7094      	strb	r4, [r2, #2]
	rx_index++;
     72a:	3301      	adds	r3, #1
     72c:	8003      	strh	r3, [r0, #0]
	if (ch_buffer == 0x0A)	// this is four because there are four chars plus a fifth "0x0A" at the end of every response from the encoder
     72e:	290a      	cmp	r1, #10
     730:	d002      	beq.n	738 <usart_read_callback+0x24>
	UART_Continuous();		// listen for next UART msg
     732:	4b06      	ldr	r3, [pc, #24]	; (74c <usart_read_callback+0x38>)
     734:	4798      	blx	r3
}
     736:	bd10      	pop	{r4, pc}
		USART_data_available = TRUE;
     738:	2201      	movs	r2, #1
     73a:	4b05      	ldr	r3, [pc, #20]	; (750 <usart_read_callback+0x3c>)
     73c:	701a      	strb	r2, [r3, #0]
     73e:	e7f8      	b.n	732 <usart_read_callback+0x1e>
     740:	20000396 	.word	0x20000396
     744:	200000bc 	.word	0x200000bc
     748:	200000e8 	.word	0x200000e8
     74c:	000006f9 	.word	0x000006f9
     750:	20000394 	.word	0x20000394

00000754 <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
     754:	b5f0      	push	{r4, r5, r6, r7, lr}
     756:	46de      	mov	lr, fp
     758:	4657      	mov	r7, sl
     75a:	464e      	mov	r6, r9
     75c:	4645      	mov	r5, r8
     75e:	b5e0      	push	{r5, r6, r7, lr}
     760:	b08d      	sub	sp, #52	; 0x34
     762:	0005      	movs	r5, r0
     764:	000c      	movs	r4, r1
     766:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
     768:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     76a:	0008      	movs	r0, r1
     76c:	4b80      	ldr	r3, [pc, #512]	; (970 <usart_init+0x21c>)
     76e:	4798      	blx	r3
     770:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     772:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
     774:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     776:	07db      	lsls	r3, r3, #31
     778:	d506      	bpl.n	788 <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
     77a:	b00d      	add	sp, #52	; 0x34
     77c:	bc3c      	pop	{r2, r3, r4, r5}
     77e:	4690      	mov	r8, r2
     780:	4699      	mov	r9, r3
     782:	46a2      	mov	sl, r4
     784:	46ab      	mov	fp, r5
     786:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     788:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
     78a:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     78c:	079b      	lsls	r3, r3, #30
     78e:	d4f4      	bmi.n	77a <usart_init+0x26>
     790:	4978      	ldr	r1, [pc, #480]	; (974 <usart_init+0x220>)
     792:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     794:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     796:	2301      	movs	r3, #1
     798:	40bb      	lsls	r3, r7
     79a:	4303      	orrs	r3, r0
     79c:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
     79e:	a90b      	add	r1, sp, #44	; 0x2c
     7a0:	7f73      	ldrb	r3, [r6, #29]
     7a2:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     7a4:	320d      	adds	r2, #13
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     7a6:	b2d7      	uxtb	r7, r2
     7a8:	0038      	movs	r0, r7
     7aa:	4b73      	ldr	r3, [pc, #460]	; (978 <usart_init+0x224>)
     7ac:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     7ae:	0038      	movs	r0, r7
     7b0:	4b72      	ldr	r3, [pc, #456]	; (97c <usart_init+0x228>)
     7b2:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     7b4:	7f70      	ldrb	r0, [r6, #29]
     7b6:	2100      	movs	r1, #0
     7b8:	4b71      	ldr	r3, [pc, #452]	; (980 <usart_init+0x22c>)
     7ba:	4798      	blx	r3
	module->character_size = config->character_size;
     7bc:	7af3      	ldrb	r3, [r6, #11]
     7be:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
     7c0:	7d33      	ldrb	r3, [r6, #20]
     7c2:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
     7c4:	7d73      	ldrb	r3, [r6, #21]
     7c6:	71eb      	strb	r3, [r5, #7]
	SercomUsart *const usart_hw = &(module->hw->USART);
     7c8:	682b      	ldr	r3, [r5, #0]
     7ca:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     7cc:	0018      	movs	r0, r3
     7ce:	4b68      	ldr	r3, [pc, #416]	; (970 <usart_init+0x21c>)
     7d0:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     7d2:	300d      	adds	r0, #13
	uint16_t baud  = 0;
     7d4:	2200      	movs	r2, #0
     7d6:	230e      	movs	r3, #14
     7d8:	a902      	add	r1, sp, #8
     7da:	468c      	mov	ip, r1
     7dc:	4463      	add	r3, ip
     7de:	801a      	strh	r2, [r3, #0]
	ctrla = (uint32_t)config->data_order |
     7e0:	6833      	ldr	r3, [r6, #0]
     7e2:	9303      	str	r3, [sp, #12]
		(uint32_t)config->mux_setting |
     7e4:	68f3      	ldr	r3, [r6, #12]
     7e6:	469a      	mov	sl, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     7e8:	7db3      	ldrb	r3, [r6, #22]
     7ea:	469b      	mov	fp, r3
	transfer_mode = (uint32_t)config->transfer_mode;
     7ec:	6873      	ldr	r3, [r6, #4]
     7ee:	4699      	mov	r9, r3
	switch (transfer_mode)
     7f0:	2b00      	cmp	r3, #0
     7f2:	d014      	beq.n	81e <usart_init+0xca>
     7f4:	2380      	movs	r3, #128	; 0x80
     7f6:	055b      	lsls	r3, r3, #21
     7f8:	4599      	cmp	r9, r3
     7fa:	d130      	bne.n	85e <usart_init+0x10a>
			if (!config->use_external_clock) {
     7fc:	7df3      	ldrb	r3, [r6, #23]
     7fe:	2b00      	cmp	r3, #0
     800:	d131      	bne.n	866 <usart_init+0x112>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
     802:	6933      	ldr	r3, [r6, #16]
     804:	001f      	movs	r7, r3
     806:	b2c0      	uxtb	r0, r0
     808:	4b5e      	ldr	r3, [pc, #376]	; (984 <usart_init+0x230>)
     80a:	4798      	blx	r3
     80c:	0001      	movs	r1, r0
     80e:	220e      	movs	r2, #14
     810:	ab02      	add	r3, sp, #8
     812:	469c      	mov	ip, r3
     814:	4462      	add	r2, ip
     816:	0038      	movs	r0, r7
     818:	4b5b      	ldr	r3, [pc, #364]	; (988 <usart_init+0x234>)
     81a:	4798      	blx	r3
     81c:	e020      	b.n	860 <usart_init+0x10c>
			if (config->use_external_clock) {
     81e:	7df3      	ldrb	r3, [r6, #23]
     820:	2b00      	cmp	r3, #0
     822:	d00b      	beq.n	83c <usart_init+0xe8>
				status_code =
     824:	2310      	movs	r3, #16
     826:	9300      	str	r3, [sp, #0]
     828:	2300      	movs	r3, #0
     82a:	220e      	movs	r2, #14
     82c:	a902      	add	r1, sp, #8
     82e:	468c      	mov	ip, r1
     830:	4462      	add	r2, ip
     832:	69b1      	ldr	r1, [r6, #24]
     834:	6930      	ldr	r0, [r6, #16]
     836:	4f55      	ldr	r7, [pc, #340]	; (98c <usart_init+0x238>)
     838:	47b8      	blx	r7
     83a:	e011      	b.n	860 <usart_init+0x10c>
						_sercom_get_async_baud_val(config->baudrate,
     83c:	6933      	ldr	r3, [r6, #16]
     83e:	001f      	movs	r7, r3
     840:	b2c0      	uxtb	r0, r0
     842:	4b50      	ldr	r3, [pc, #320]	; (984 <usart_init+0x230>)
     844:	4798      	blx	r3
     846:	0001      	movs	r1, r0
				status_code =
     848:	2310      	movs	r3, #16
     84a:	9300      	str	r3, [sp, #0]
     84c:	2300      	movs	r3, #0
     84e:	220e      	movs	r2, #14
     850:	a802      	add	r0, sp, #8
     852:	4684      	mov	ip, r0
     854:	4462      	add	r2, ip
     856:	0038      	movs	r0, r7
     858:	4f4c      	ldr	r7, [pc, #304]	; (98c <usart_init+0x238>)
     85a:	47b8      	blx	r7
     85c:	e000      	b.n	860 <usart_init+0x10c>
	enum status_code status_code = STATUS_OK;
     85e:	2000      	movs	r0, #0
	if (status_code != STATUS_OK) {
     860:	2800      	cmp	r0, #0
     862:	d000      	beq.n	866 <usart_init+0x112>
     864:	e789      	b.n	77a <usart_init+0x26>
	SercomUsart *const usart_hw = &(module->hw->USART);
     866:	682a      	ldr	r2, [r5, #0]
     868:	9f03      	ldr	r7, [sp, #12]
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
     86a:	8a13      	ldrh	r3, [r2, #16]
	while (usart_is_syncing(module)) {
     86c:	b21b      	sxth	r3, r3
     86e:	2b00      	cmp	r3, #0
     870:	dbfb      	blt.n	86a <usart_init+0x116>
	usart_hw->BAUD.reg = baud;
     872:	230e      	movs	r3, #14
     874:	aa02      	add	r2, sp, #8
     876:	4694      	mov	ip, r2
     878:	4463      	add	r3, ip
     87a:	881b      	ldrh	r3, [r3, #0]
     87c:	4642      	mov	r2, r8
     87e:	8153      	strh	r3, [r2, #10]
	ctrla |= transfer_mode;
     880:	4653      	mov	r3, sl
     882:	431f      	orrs	r7, r3
     884:	464b      	mov	r3, r9
     886:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     888:	465b      	mov	r3, fp
     88a:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
     88c:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
     88e:	7df3      	ldrb	r3, [r6, #23]
     890:	2b00      	cmp	r3, #0
     892:	d101      	bne.n	898 <usart_init+0x144>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
     894:	3304      	adds	r3, #4
     896:	431f      	orrs	r7, r3
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     898:	7d31      	ldrb	r1, [r6, #20]
     89a:	0449      	lsls	r1, r1, #17
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
     89c:	7d73      	ldrb	r3, [r6, #21]
     89e:	041b      	lsls	r3, r3, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     8a0:	430b      	orrs	r3, r1
	ctrlb |= (uint32_t)config->character_size;
     8a2:	7ab1      	ldrb	r1, [r6, #10]
     8a4:	7af2      	ldrb	r2, [r6, #11]
     8a6:	4311      	orrs	r1, r2
     8a8:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
     8aa:	8933      	ldrh	r3, [r6, #8]
     8ac:	2bff      	cmp	r3, #255	; 0xff
     8ae:	d003      	beq.n	8b8 <usart_init+0x164>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
     8b0:	2280      	movs	r2, #128	; 0x80
     8b2:	0452      	lsls	r2, r2, #17
     8b4:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
     8b6:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
     8b8:	7f33      	ldrb	r3, [r6, #28]
     8ba:	2b00      	cmp	r3, #0
     8bc:	d103      	bne.n	8c6 <usart_init+0x172>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     8be:	4b34      	ldr	r3, [pc, #208]	; (990 <usart_init+0x23c>)
     8c0:	789b      	ldrb	r3, [r3, #2]
     8c2:	079b      	lsls	r3, r3, #30
     8c4:	d501      	bpl.n	8ca <usart_init+0x176>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
     8c6:	2380      	movs	r3, #128	; 0x80
     8c8:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
     8ca:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
     8cc:	8a13      	ldrh	r3, [r2, #16]
	while (usart_is_syncing(module)) {
     8ce:	b21b      	sxth	r3, r3
     8d0:	2b00      	cmp	r3, #0
     8d2:	dbfb      	blt.n	8cc <usart_init+0x178>
	usart_hw->CTRLB.reg = ctrlb;
     8d4:	4643      	mov	r3, r8
     8d6:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
     8d8:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
     8da:	8a13      	ldrh	r3, [r2, #16]
	while (usart_is_syncing(module)) {
     8dc:	b21b      	sxth	r3, r3
     8de:	2b00      	cmp	r3, #0
     8e0:	dbfb      	blt.n	8da <usart_init+0x186>
	usart_hw->CTRLA.reg = ctrla;
     8e2:	4643      	mov	r3, r8
     8e4:	601f      	str	r7, [r3, #0]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     8e6:	ab0a      	add	r3, sp, #40	; 0x28
     8e8:	2280      	movs	r2, #128	; 0x80
     8ea:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     8ec:	2200      	movs	r2, #0
     8ee:	705a      	strb	r2, [r3, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
	config->powersave    = false;
     8f0:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     8f2:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
     8f4:	6a33      	ldr	r3, [r6, #32]
     8f6:	9306      	str	r3, [sp, #24]
     8f8:	6a73      	ldr	r3, [r6, #36]	; 0x24
     8fa:	9307      	str	r3, [sp, #28]
     8fc:	6ab3      	ldr	r3, [r6, #40]	; 0x28
     8fe:	9308      	str	r3, [sp, #32]
     900:	6af3      	ldr	r3, [r6, #44]	; 0x2c
     902:	9303      	str	r3, [sp, #12]
     904:	9309      	str	r3, [sp, #36]	; 0x24
     906:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
     908:	ae06      	add	r6, sp, #24
     90a:	e006      	b.n	91a <usart_init+0x1c6>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     90c:	0020      	movs	r0, r4
     90e:	4b21      	ldr	r3, [pc, #132]	; (994 <usart_init+0x240>)
     910:	4798      	blx	r3
     912:	e007      	b.n	924 <usart_init+0x1d0>
     914:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
     916:	2f04      	cmp	r7, #4
     918:	d00d      	beq.n	936 <usart_init+0x1e2>
     91a:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
     91c:	00bb      	lsls	r3, r7, #2
     91e:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
     920:	2800      	cmp	r0, #0
     922:	d0f3      	beq.n	90c <usart_init+0x1b8>
		if (current_pinmux != PINMUX_UNUSED) {
     924:	1c43      	adds	r3, r0, #1
     926:	d0f5      	beq.n	914 <usart_init+0x1c0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     928:	a90a      	add	r1, sp, #40	; 0x28
     92a:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     92c:	0c00      	lsrs	r0, r0, #16
     92e:	b2c0      	uxtb	r0, r0
     930:	4b19      	ldr	r3, [pc, #100]	; (998 <usart_init+0x244>)
     932:	4798      	blx	r3
     934:	e7ee      	b.n	914 <usart_init+0x1c0>
		module->callback[i]            = NULL;
     936:	2300      	movs	r3, #0
     938:	60ab      	str	r3, [r5, #8]
     93a:	60eb      	str	r3, [r5, #12]
     93c:	612b      	str	r3, [r5, #16]
	module->tx_buffer_ptr              = NULL;
     93e:	61ab      	str	r3, [r5, #24]
	module->rx_buffer_ptr              = NULL;
     940:	616b      	str	r3, [r5, #20]
	module->remaining_tx_buffer_length = 0x0000;
     942:	2200      	movs	r2, #0
     944:	83eb      	strh	r3, [r5, #30]
	module->remaining_rx_buffer_length = 0x0000;
     946:	83ab      	strh	r3, [r5, #28]
	module->callback_reg_mask          = 0x00;
     948:	3320      	adds	r3, #32
     94a:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
     94c:	3301      	adds	r3, #1
     94e:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
     950:	3301      	adds	r3, #1
     952:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
     954:	3301      	adds	r3, #1
     956:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
     958:	6828      	ldr	r0, [r5, #0]
     95a:	4b05      	ldr	r3, [pc, #20]	; (970 <usart_init+0x21c>)
     95c:	4798      	blx	r3
     95e:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
     960:	490e      	ldr	r1, [pc, #56]	; (99c <usart_init+0x248>)
     962:	4b0f      	ldr	r3, [pc, #60]	; (9a0 <usart_init+0x24c>)
     964:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     966:	00a4      	lsls	r4, r4, #2
     968:	4b0e      	ldr	r3, [pc, #56]	; (9a4 <usart_init+0x250>)
     96a:	50e5      	str	r5, [r4, r3]
	return status_code;
     96c:	2000      	movs	r0, #0
     96e:	e704      	b.n	77a <usart_init+0x26>
     970:	000005a1 	.word	0x000005a1
     974:	40000400 	.word	0x40000400
     978:	000012ed 	.word	0x000012ed
     97c:	00001261 	.word	0x00001261
     980:	000003dd 	.word	0x000003dd
     984:	00001309 	.word	0x00001309
     988:	0000031f 	.word	0x0000031f
     98c:	00000349 	.word	0x00000349
     990:	41002000 	.word	0x41002000
     994:	00000429 	.word	0x00000429
     998:	000013e5 	.word	0x000013e5
     99c:	00000b11 	.word	0x00000b11
     9a0:	00000c39 	.word	0x00000c39
     9a4:	20000398 	.word	0x20000398

000009a8 <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
     9a8:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
     9aa:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
     9ac:	2a00      	cmp	r2, #0
     9ae:	d101      	bne.n	9b4 <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
     9b0:	0018      	movs	r0, r3
     9b2:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
     9b4:	8bc2      	ldrh	r2, [r0, #30]
     9b6:	b292      	uxth	r2, r2
		return STATUS_BUSY;
     9b8:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
     9ba:	2a00      	cmp	r2, #0
     9bc:	d1f8      	bne.n	9b0 <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
     9be:	6802      	ldr	r2, [r0, #0]
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
     9c0:	8a13      	ldrh	r3, [r2, #16]
	while (usart_is_syncing(module)) {
     9c2:	b21b      	sxth	r3, r3
     9c4:	2b00      	cmp	r3, #0
     9c6:	dbfb      	blt.n	9c0 <usart_write_wait+0x18>
	usart_hw->DATA.reg = tx_data;
     9c8:	8311      	strh	r1, [r2, #24]
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
     9ca:	2102      	movs	r1, #2
     9cc:	7b93      	ldrb	r3, [r2, #14]
     9ce:	420b      	tst	r3, r1
     9d0:	d0fc      	beq.n	9cc <usart_write_wait+0x24>
	return STATUS_OK;
     9d2:	2300      	movs	r3, #0
     9d4:	e7ec      	b.n	9b0 <usart_write_wait+0x8>
	...

000009d8 <usart_write_buffer_wait>:
 */
enum status_code usart_write_buffer_wait(
		struct usart_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
     9d8:	b5f0      	push	{r4, r5, r6, r7, lr}
     9da:	46ce      	mov	lr, r9
     9dc:	4647      	mov	r7, r8
     9de:	b580      	push	{r7, lr}
     9e0:	b083      	sub	sp, #12
     9e2:	0005      	movs	r5, r0
     9e4:	9101      	str	r1, [sp, #4]
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
     9e6:	2017      	movs	r0, #23
	if (length == 0) {
     9e8:	2a00      	cmp	r2, #0
     9ea:	d104      	bne.n	9f6 <usart_write_buffer_wait+0x1e>
			return STATUS_ERR_TIMEOUT;
		}
	}

	return STATUS_OK;
}
     9ec:	b003      	add	sp, #12
     9ee:	bc0c      	pop	{r2, r3}
     9f0:	4690      	mov	r8, r2
     9f2:	4699      	mov	r9, r3
     9f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!(module->transmitter_enabled)) {
     9f6:	79eb      	ldrb	r3, [r5, #7]
		return STATUS_ERR_DENIED;
     9f8:	3005      	adds	r0, #5
	if (!(module->transmitter_enabled)) {
     9fa:	2b00      	cmp	r3, #0
     9fc:	d0f6      	beq.n	9ec <usart_write_buffer_wait+0x14>
	SercomUsart *const usart_hw = &(module->hw->USART);
     9fe:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
     a00:	8a23      	ldrh	r3, [r4, #16]
	while (usart_is_syncing(module)) {
     a02:	b21b      	sxth	r3, r3
     a04:	2b00      	cmp	r3, #0
     a06:	dbfb      	blt.n	a00 <usart_write_buffer_wait+0x28>
	while (length--) {
     a08:	3a01      	subs	r2, #1
     a0a:	b293      	uxth	r3, r2
     a0c:	4699      	mov	r9, r3
     a0e:	2600      	movs	r6, #0
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
     a10:	2701      	movs	r7, #1
	while (length--) {
     a12:	4b20      	ldr	r3, [pc, #128]	; (a94 <usart_write_buffer_wait+0xbc>)
     a14:	4698      	mov	r8, r3
     a16:	e011      	b.n	a3c <usart_write_buffer_wait+0x64>
		uint16_t data_to_send = tx_data[tx_pos++];
     a18:	1c73      	adds	r3, r6, #1
     a1a:	b29b      	uxth	r3, r3
     a1c:	9a01      	ldr	r2, [sp, #4]
     a1e:	5d91      	ldrb	r1, [r2, r6]
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     a20:	796a      	ldrb	r2, [r5, #5]
     a22:	2a01      	cmp	r2, #1
     a24:	d017      	beq.n	a56 <usart_write_buffer_wait+0x7e>
		uint16_t data_to_send = tx_data[tx_pos++];
     a26:	b289      	uxth	r1, r1
     a28:	001e      	movs	r6, r3
		usart_write_wait(module, data_to_send);
     a2a:	0028      	movs	r0, r5
     a2c:	4b1a      	ldr	r3, [pc, #104]	; (a98 <usart_write_buffer_wait+0xc0>)
     a2e:	4798      	blx	r3
	while (length--) {
     a30:	464b      	mov	r3, r9
     a32:	3b01      	subs	r3, #1
     a34:	b29b      	uxth	r3, r3
     a36:	4699      	mov	r9, r3
     a38:	4543      	cmp	r3, r8
     a3a:	d013      	beq.n	a64 <usart_write_buffer_wait+0x8c>
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
     a3c:	7ba3      	ldrb	r3, [r4, #14]
     a3e:	423b      	tst	r3, r7
     a40:	d1ea      	bne.n	a18 <usart_write_buffer_wait+0x40>
     a42:	4b14      	ldr	r3, [pc, #80]	; (a94 <usart_write_buffer_wait+0xbc>)
     a44:	7ba2      	ldrb	r2, [r4, #14]
     a46:	423a      	tst	r2, r7
     a48:	d1e6      	bne.n	a18 <usart_write_buffer_wait+0x40>
			} else if (i == USART_TIMEOUT) {
     a4a:	2b01      	cmp	r3, #1
     a4c:	d019      	beq.n	a82 <usart_write_buffer_wait+0xaa>
     a4e:	3b01      	subs	r3, #1
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
     a50:	2b00      	cmp	r3, #0
     a52:	d1f7      	bne.n	a44 <usart_write_buffer_wait+0x6c>
     a54:	e7e0      	b.n	a18 <usart_write_buffer_wait+0x40>
			data_to_send |= (tx_data[tx_pos++] << 8);
     a56:	3602      	adds	r6, #2
     a58:	b2b6      	uxth	r6, r6
     a5a:	9a01      	ldr	r2, [sp, #4]
     a5c:	5cd3      	ldrb	r3, [r2, r3]
     a5e:	021b      	lsls	r3, r3, #8
     a60:	4319      	orrs	r1, r3
     a62:	e7e2      	b.n	a2a <usart_write_buffer_wait+0x52>
		if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) {
     a64:	7ba3      	ldrb	r3, [r4, #14]
     a66:	079b      	lsls	r3, r3, #30
     a68:	d40d      	bmi.n	a86 <usart_write_buffer_wait+0xae>
     a6a:	4b0a      	ldr	r3, [pc, #40]	; (a94 <usart_write_buffer_wait+0xbc>)
     a6c:	2102      	movs	r1, #2
     a6e:	7ba2      	ldrb	r2, [r4, #14]
     a70:	420a      	tst	r2, r1
     a72:	d10a      	bne.n	a8a <usart_write_buffer_wait+0xb2>
		} else if (i == USART_TIMEOUT) {
     a74:	2b01      	cmp	r3, #1
     a76:	d00a      	beq.n	a8e <usart_write_buffer_wait+0xb6>
     a78:	3b01      	subs	r3, #1
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
     a7a:	2b00      	cmp	r3, #0
     a7c:	d1f7      	bne.n	a6e <usart_write_buffer_wait+0x96>
	return STATUS_OK;
     a7e:	2000      	movs	r0, #0
     a80:	e7b4      	b.n	9ec <usart_write_buffer_wait+0x14>
				return STATUS_ERR_TIMEOUT;
     a82:	2012      	movs	r0, #18
     a84:	e7b2      	b.n	9ec <usart_write_buffer_wait+0x14>
	return STATUS_OK;
     a86:	2000      	movs	r0, #0
     a88:	e7b0      	b.n	9ec <usart_write_buffer_wait+0x14>
     a8a:	2000      	movs	r0, #0
     a8c:	e7ae      	b.n	9ec <usart_write_buffer_wait+0x14>
			return STATUS_ERR_TIMEOUT;
     a8e:	2012      	movs	r0, #18
     a90:	e7ac      	b.n	9ec <usart_write_buffer_wait+0x14>
     a92:	46c0      	nop			; (mov r8, r8)
     a94:	0000ffff 	.word	0x0000ffff
     a98:	000009a9 	.word	0x000009a9

00000a9c <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
     a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     a9e:	0006      	movs	r6, r0
     aa0:	000c      	movs	r4, r1
     aa2:	0015      	movs	r5, r2
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
     aa4:	6807      	ldr	r7, [r0, #0]
	cpu_irq_enter_critical();
     aa6:	4b0a      	ldr	r3, [pc, #40]	; (ad0 <_usart_read_buffer+0x34>)
     aa8:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
     aaa:	8bb3      	ldrh	r3, [r6, #28]
     aac:	b29b      	uxth	r3, r3
     aae:	2b00      	cmp	r3, #0
     ab0:	d003      	beq.n	aba <_usart_read_buffer+0x1e>
	cpu_irq_leave_critical();
     ab2:	4b08      	ldr	r3, [pc, #32]	; (ad4 <_usart_read_buffer+0x38>)
     ab4:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
     ab6:	2005      	movs	r0, #5
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
	}
#endif

	return STATUS_OK;
}
     ab8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	module->remaining_rx_buffer_length = length;
     aba:	83b5      	strh	r5, [r6, #28]
     abc:	4b05      	ldr	r3, [pc, #20]	; (ad4 <_usart_read_buffer+0x38>)
     abe:	4798      	blx	r3
	module->rx_buffer_ptr              = rx_data;
     ac0:	6174      	str	r4, [r6, #20]
	module->rx_status                  = STATUS_BUSY;
     ac2:	2205      	movs	r2, #5
     ac4:	2322      	movs	r3, #34	; 0x22
     ac6:	54f2      	strb	r2, [r6, r3]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
     ac8:	3b1e      	subs	r3, #30
     aca:	737b      	strb	r3, [r7, #13]
	return STATUS_OK;
     acc:	2000      	movs	r0, #0
     ace:	e7f3      	b.n	ab8 <_usart_read_buffer+0x1c>
     ad0:	00000e65 	.word	0x00000e65
     ad4:	00000ea5 	.word	0x00000ea5

00000ad8 <usart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
     ad8:	1c93      	adds	r3, r2, #2
     ada:	009b      	lsls	r3, r3, #2
     adc:	5019      	str	r1, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
     ade:	2120      	movs	r1, #32
     ae0:	2301      	movs	r3, #1
     ae2:	4093      	lsls	r3, r2
     ae4:	001a      	movs	r2, r3
     ae6:	5c43      	ldrb	r3, [r0, r1]
     ae8:	4313      	orrs	r3, r2
     aea:	5443      	strb	r3, [r0, r1]
}
     aec:	4770      	bx	lr
	...

00000af0 <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
     af0:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
     af2:	2317      	movs	r3, #23
	if (length == 0) {
     af4:	2a00      	cmp	r2, #0
     af6:	d101      	bne.n	afc <usart_read_buffer_job+0xc>
		return STATUS_ERR_DENIED;
	}

	/* Issue internal asynchronous read */
	return _usart_read_buffer(module, rx_data, length);
}
     af8:	0018      	movs	r0, r3
     afa:	bd10      	pop	{r4, pc}
	if (!(module->receiver_enabled)) {
     afc:	7984      	ldrb	r4, [r0, #6]
		return STATUS_ERR_DENIED;
     afe:	3305      	adds	r3, #5
	if (!(module->receiver_enabled)) {
     b00:	2c00      	cmp	r4, #0
     b02:	d0f9      	beq.n	af8 <usart_read_buffer_job+0x8>
	return _usart_read_buffer(module, rx_data, length);
     b04:	4b01      	ldr	r3, [pc, #4]	; (b0c <usart_read_buffer_job+0x1c>)
     b06:	4798      	blx	r3
     b08:	0003      	movs	r3, r0
     b0a:	e7f5      	b.n	af8 <usart_read_buffer_job+0x8>
     b0c:	00000a9d 	.word	0x00000a9d

00000b10 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
     b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
     b12:	0080      	lsls	r0, r0, #2
     b14:	4b46      	ldr	r3, [pc, #280]	; (c30 <_usart_interrupt_handler+0x120>)
     b16:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
     b18:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
     b1a:	8a23      	ldrh	r3, [r4, #16]
	while (usart_is_syncing(module)) {
     b1c:	b21b      	sxth	r3, r3
     b1e:	2b00      	cmp	r3, #0
     b20:	dbfb      	blt.n	b1a <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
     b22:	7ba3      	ldrb	r3, [r4, #14]
	interrupt_status &= usart_hw->INTENSET.reg;
     b24:	7b66      	ldrb	r6, [r4, #13]
     b26:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
     b28:	2320      	movs	r3, #32
     b2a:	5ceb      	ldrb	r3, [r5, r3]
     b2c:	2221      	movs	r2, #33	; 0x21
     b2e:	5caf      	ldrb	r7, [r5, r2]
     b30:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
     b32:	07f3      	lsls	r3, r6, #31
     b34:	d522      	bpl.n	b7c <_usart_interrupt_handler+0x6c>
		if (module->remaining_tx_buffer_length) {
     b36:	8beb      	ldrh	r3, [r5, #30]
     b38:	b29b      	uxth	r3, r3
     b3a:	2b00      	cmp	r3, #0
     b3c:	d01c      	beq.n	b78 <_usart_interrupt_handler+0x68>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
     b3e:	69aa      	ldr	r2, [r5, #24]
     b40:	7813      	ldrb	r3, [r2, #0]
     b42:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
     b44:	1c51      	adds	r1, r2, #1
     b46:	61a9      	str	r1, [r5, #24]

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     b48:	7969      	ldrb	r1, [r5, #5]
     b4a:	2901      	cmp	r1, #1
     b4c:	d00e      	beq.n	b6c <_usart_interrupt_handler+0x5c>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
     b4e:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
     b50:	05db      	lsls	r3, r3, #23
     b52:	0ddb      	lsrs	r3, r3, #23
     b54:	8323      	strh	r3, [r4, #24]

			if (--(module->remaining_tx_buffer_length) == 0) {
     b56:	8beb      	ldrh	r3, [r5, #30]
     b58:	3b01      	subs	r3, #1
     b5a:	b29b      	uxth	r3, r3
     b5c:	83eb      	strh	r3, [r5, #30]
     b5e:	2b00      	cmp	r3, #0
     b60:	d10c      	bne.n	b7c <_usart_interrupt_handler+0x6c>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
     b62:	3301      	adds	r3, #1
     b64:	7323      	strb	r3, [r4, #12]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
     b66:	3301      	adds	r3, #1
     b68:	7363      	strb	r3, [r4, #13]
     b6a:	e007      	b.n	b7c <_usart_interrupt_handler+0x6c>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
     b6c:	7851      	ldrb	r1, [r2, #1]
     b6e:	0209      	lsls	r1, r1, #8
     b70:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
     b72:	3202      	adds	r2, #2
     b74:	61aa      	str	r2, [r5, #24]
     b76:	e7eb      	b.n	b50 <_usart_interrupt_handler+0x40>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
     b78:	2301      	movs	r3, #1
     b7a:	7323      	strb	r3, [r4, #12]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
     b7c:	07b3      	lsls	r3, r6, #30
     b7e:	d506      	bpl.n	b8e <_usart_interrupt_handler+0x7e>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
     b80:	2302      	movs	r3, #2
     b82:	7323      	strb	r3, [r4, #12]
		module->tx_status = STATUS_OK;
     b84:	2200      	movs	r2, #0
     b86:	3321      	adds	r3, #33	; 0x21
     b88:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
     b8a:	07fb      	lsls	r3, r7, #31
     b8c:	d416      	bmi.n	bbc <_usart_interrupt_handler+0xac>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
     b8e:	0773      	lsls	r3, r6, #29
     b90:	d54d      	bpl.n	c2e <_usart_interrupt_handler+0x11e>

		if (module->remaining_rx_buffer_length) {
     b92:	8bab      	ldrh	r3, [r5, #28]
     b94:	b29b      	uxth	r3, r3
     b96:	2b00      	cmp	r3, #0
     b98:	d047      	beq.n	c2a <_usart_interrupt_handler+0x11a>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
     b9a:	8a23      	ldrh	r3, [r4, #16]
     b9c:	b2db      	uxtb	r3, r3
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
     b9e:	075a      	lsls	r2, r3, #29
     ba0:	d020      	beq.n	be4 <_usart_interrupt_handler+0xd4>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
     ba2:	079a      	lsls	r2, r3, #30
     ba4:	d50e      	bpl.n	bc4 <_usart_interrupt_handler+0xb4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
     ba6:	221a      	movs	r2, #26
     ba8:	2322      	movs	r3, #34	; 0x22
     baa:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
     bac:	3b20      	subs	r3, #32
     bae:	8223      	strh	r3, [r4, #16]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
     bb0:	077b      	lsls	r3, r7, #29
     bb2:	d53c      	bpl.n	c2e <_usart_interrupt_handler+0x11e>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
     bb4:	692b      	ldr	r3, [r5, #16]
     bb6:	0028      	movs	r0, r5
     bb8:	4798      	blx	r3
     bba:	e038      	b.n	c2e <_usart_interrupt_handler+0x11e>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
     bbc:	0028      	movs	r0, r5
     bbe:	68ab      	ldr	r3, [r5, #8]
     bc0:	4798      	blx	r3
     bc2:	e7e4      	b.n	b8e <_usart_interrupt_handler+0x7e>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
     bc4:	075a      	lsls	r2, r3, #29
     bc6:	d505      	bpl.n	bd4 <_usart_interrupt_handler+0xc4>
					module->rx_status = STATUS_ERR_OVERFLOW;
     bc8:	221e      	movs	r2, #30
     bca:	2322      	movs	r3, #34	; 0x22
     bcc:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
     bce:	3b1e      	subs	r3, #30
     bd0:	8223      	strh	r3, [r4, #16]
     bd2:	e7ed      	b.n	bb0 <_usart_interrupt_handler+0xa0>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
     bd4:	07db      	lsls	r3, r3, #31
     bd6:	d5eb      	bpl.n	bb0 <_usart_interrupt_handler+0xa0>
					module->rx_status = STATUS_ERR_BAD_DATA;
     bd8:	2213      	movs	r2, #19
     bda:	2322      	movs	r3, #34	; 0x22
     bdc:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
     bde:	3b21      	subs	r3, #33	; 0x21
     be0:	8223      	strh	r3, [r4, #16]
     be2:	e7e5      	b.n	bb0 <_usart_interrupt_handler+0xa0>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
     be4:	8b23      	ldrh	r3, [r4, #24]
     be6:	05db      	lsls	r3, r3, #23
     be8:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
     bea:	b2da      	uxtb	r2, r3
     bec:	6969      	ldr	r1, [r5, #20]
     bee:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
     bf0:	696a      	ldr	r2, [r5, #20]
     bf2:	1c51      	adds	r1, r2, #1
     bf4:	6169      	str	r1, [r5, #20]

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     bf6:	7969      	ldrb	r1, [r5, #5]
     bf8:	2901      	cmp	r1, #1
     bfa:	d010      	beq.n	c1e <_usart_interrupt_handler+0x10e>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
     bfc:	8bab      	ldrh	r3, [r5, #28]
     bfe:	3b01      	subs	r3, #1
     c00:	b29b      	uxth	r3, r3
     c02:	83ab      	strh	r3, [r5, #28]
     c04:	2b00      	cmp	r3, #0
     c06:	d112      	bne.n	c2e <_usart_interrupt_handler+0x11e>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
     c08:	3304      	adds	r3, #4
     c0a:	7323      	strb	r3, [r4, #12]
					module->rx_status = STATUS_OK;
     c0c:	2200      	movs	r2, #0
     c0e:	331e      	adds	r3, #30
     c10:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
     c12:	07bb      	lsls	r3, r7, #30
     c14:	d50b      	bpl.n	c2e <_usart_interrupt_handler+0x11e>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
     c16:	68eb      	ldr	r3, [r5, #12]
     c18:	0028      	movs	r0, r5
     c1a:	4798      	blx	r3
     c1c:	e007      	b.n	c2e <_usart_interrupt_handler+0x11e>
					*(module->rx_buffer_ptr) = (received_data >> 8);
     c1e:	0a1b      	lsrs	r3, r3, #8
     c20:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
     c22:	696b      	ldr	r3, [r5, #20]
     c24:	3301      	adds	r3, #1
     c26:	616b      	str	r3, [r5, #20]
     c28:	e7e8      	b.n	bfc <_usart_interrupt_handler+0xec>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
     c2a:	2304      	movs	r3, #4
     c2c:	7323      	strb	r3, [r4, #12]
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
     c2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     c30:	20000398 	.word	0x20000398

00000c34 <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
     c34:	4770      	bx	lr
	...

00000c38 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
     c38:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
     c3a:	4b0a      	ldr	r3, [pc, #40]	; (c64 <_sercom_set_handler+0x2c>)
     c3c:	781b      	ldrb	r3, [r3, #0]
     c3e:	2b00      	cmp	r3, #0
     c40:	d10c      	bne.n	c5c <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     c42:	4f09      	ldr	r7, [pc, #36]	; (c68 <_sercom_set_handler+0x30>)
     c44:	4e09      	ldr	r6, [pc, #36]	; (c6c <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
     c46:	4d0a      	ldr	r5, [pc, #40]	; (c70 <_sercom_set_handler+0x38>)
     c48:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
     c4a:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
     c4c:	195a      	adds	r2, r3, r5
     c4e:	6014      	str	r4, [r2, #0]
     c50:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     c52:	2b18      	cmp	r3, #24
     c54:	d1f9      	bne.n	c4a <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
     c56:	2201      	movs	r2, #1
     c58:	4b02      	ldr	r3, [pc, #8]	; (c64 <_sercom_set_handler+0x2c>)
     c5a:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
     c5c:	0080      	lsls	r0, r0, #2
     c5e:	4b02      	ldr	r3, [pc, #8]	; (c68 <_sercom_set_handler+0x30>)
     c60:	50c1      	str	r1, [r0, r3]
}
     c62:	bdf0      	pop	{r4, r5, r6, r7, pc}
     c64:	20000062 	.word	0x20000062
     c68:	20000064 	.word	0x20000064
     c6c:	00000c35 	.word	0x00000c35
     c70:	20000398 	.word	0x20000398

00000c74 <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
     c74:	b500      	push	{lr}
     c76:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
     c78:	2307      	movs	r3, #7
     c7a:	466a      	mov	r2, sp
     c7c:	7013      	strb	r3, [r2, #0]
     c7e:	3301      	adds	r3, #1
     c80:	7053      	strb	r3, [r2, #1]
     c82:	3301      	adds	r3, #1
     c84:	7093      	strb	r3, [r2, #2]
     c86:	3301      	adds	r3, #1
     c88:	70d3      	strb	r3, [r2, #3]
     c8a:	3301      	adds	r3, #1
     c8c:	7113      	strb	r3, [r2, #4]
     c8e:	3301      	adds	r3, #1
     c90:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
     c92:	4b03      	ldr	r3, [pc, #12]	; (ca0 <_sercom_get_interrupt_vector+0x2c>)
     c94:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
     c96:	466b      	mov	r3, sp
     c98:	5618      	ldrsb	r0, [r3, r0]
}
     c9a:	b003      	add	sp, #12
     c9c:	bd00      	pop	{pc}
     c9e:	46c0      	nop			; (mov r8, r8)
     ca0:	000005a1 	.word	0x000005a1

00000ca4 <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
     ca4:	b510      	push	{r4, lr}
     ca6:	4b02      	ldr	r3, [pc, #8]	; (cb0 <SERCOM0_Handler+0xc>)
     ca8:	681b      	ldr	r3, [r3, #0]
     caa:	2000      	movs	r0, #0
     cac:	4798      	blx	r3
     cae:	bd10      	pop	{r4, pc}
     cb0:	20000064 	.word	0x20000064

00000cb4 <SERCOM1_Handler>:
     cb4:	b510      	push	{r4, lr}
     cb6:	4b02      	ldr	r3, [pc, #8]	; (cc0 <SERCOM1_Handler+0xc>)
     cb8:	685b      	ldr	r3, [r3, #4]
     cba:	2001      	movs	r0, #1
     cbc:	4798      	blx	r3
     cbe:	bd10      	pop	{r4, pc}
     cc0:	20000064 	.word	0x20000064

00000cc4 <SERCOM2_Handler>:
     cc4:	b510      	push	{r4, lr}
     cc6:	4b02      	ldr	r3, [pc, #8]	; (cd0 <SERCOM2_Handler+0xc>)
     cc8:	689b      	ldr	r3, [r3, #8]
     cca:	2002      	movs	r0, #2
     ccc:	4798      	blx	r3
     cce:	bd10      	pop	{r4, pc}
     cd0:	20000064 	.word	0x20000064

00000cd4 <SERCOM3_Handler>:
     cd4:	b510      	push	{r4, lr}
     cd6:	4b02      	ldr	r3, [pc, #8]	; (ce0 <SERCOM3_Handler+0xc>)
     cd8:	68db      	ldr	r3, [r3, #12]
     cda:	2003      	movs	r0, #3
     cdc:	4798      	blx	r3
     cde:	bd10      	pop	{r4, pc}
     ce0:	20000064 	.word	0x20000064

00000ce4 <SERCOM4_Handler>:
     ce4:	b510      	push	{r4, lr}
     ce6:	4b02      	ldr	r3, [pc, #8]	; (cf0 <SERCOM4_Handler+0xc>)
     ce8:	691b      	ldr	r3, [r3, #16]
     cea:	2004      	movs	r0, #4
     cec:	4798      	blx	r3
     cee:	bd10      	pop	{r4, pc}
     cf0:	20000064 	.word	0x20000064

00000cf4 <SERCOM5_Handler>:
     cf4:	b510      	push	{r4, lr}
     cf6:	4b02      	ldr	r3, [pc, #8]	; (d00 <SERCOM5_Handler+0xc>)
     cf8:	695b      	ldr	r3, [r3, #20]
     cfa:	2005      	movs	r0, #5
     cfc:	4798      	blx	r3
     cfe:	bd10      	pop	{r4, pc}
     d00:	20000064 	.word	0x20000064

00000d04 <SysTick_Handler>:
 * @note				- 
 ******************************************************************************************************/
void SysTick_Handler(void)
{
	// Your code goes here
}
     d04:	4770      	bx	lr
	...

00000d08 <config_GPIO>:
* @return				- void
*
* @note				- 
******************************************************************************************************/
void config_GPIO(void)
{
     d08:	b5f0      	push	{r4, r5, r6, r7, lr}
     d0a:	b089      	sub	sp, #36	; 0x24
		uint8_t statusMsg[] = "Configuring GPIO....\r\n";
     d0c:	a802      	add	r0, sp, #8
     d0e:	4b11      	ldr	r3, [pc, #68]	; (d54 <config_GPIO+0x4c>)
     d10:	0002      	movs	r2, r0
     d12:	cb32      	ldmia	r3!, {r1, r4, r5}
     d14:	c232      	stmia	r2!, {r1, r4, r5}
     d16:	cb12      	ldmia	r3!, {r1, r4}
     d18:	c212      	stmia	r2!, {r1, r4}
     d1a:	8819      	ldrh	r1, [r3, #0]
     d1c:	8011      	strh	r1, [r2, #0]
     d1e:	789b      	ldrb	r3, [r3, #2]
     d20:	7093      	strb	r3, [r2, #2]
		writeStr(statusMsg, sizeof(statusMsg));			//uart debug statement
     d22:	2117      	movs	r1, #23
     d24:	4b0c      	ldr	r3, [pc, #48]	; (d58 <config_GPIO+0x50>)
     d26:	4798      	blx	r3
	Assert(config);

	/* Default configuration values */
	config->direction  = PORT_PIN_DIR_INPUT;
	config->input_pull = PORT_PIN_PULL_UP;
	config->powersave  = false;
     d28:	ac01      	add	r4, sp, #4
     d2a:	2700      	movs	r7, #0
     d2c:	70a7      	strb	r7, [r4, #2]
		
		struct port_config pin_conf;
		port_get_config_defaults(&pin_conf);

		pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
     d2e:	2301      	movs	r3, #1
     d30:	7023      	strb	r3, [r4, #0]
		pin_conf.input_pull = PORT_PIN_PULL_DOWN;
     d32:	2602      	movs	r6, #2
     d34:	7066      	strb	r6, [r4, #1]
		port_pin_set_config(STATUSLED_GREEN, &pin_conf);
     d36:	0021      	movs	r1, r4
     d38:	2013      	movs	r0, #19
     d3a:	4d08      	ldr	r5, [pc, #32]	; (d5c <config_GPIO+0x54>)
     d3c:	47a8      	blx	r5
		port_pin_set_config(STATUSLED_ORANGE, &pin_conf);
     d3e:	0021      	movs	r1, r4
     d40:	2012      	movs	r0, #18
     d42:	47a8      	blx	r5

		pin_conf.direction  = PORT_PIN_DIR_INPUT;
     d44:	7027      	strb	r7, [r4, #0]
		pin_conf.input_pull = PORT_PIN_PULL_DOWN;
     d46:	7066      	strb	r6, [r4, #1]
		port_pin_set_config(LIMIT_SW_PIN, &pin_conf);
     d48:	0021      	movs	r1, r4
     d4a:	2029      	movs	r0, #41	; 0x29
     d4c:	47a8      	blx	r5
}
     d4e:	b009      	add	sp, #36	; 0x24
     d50:	bdf0      	pop	{r4, r5, r6, r7, pc}
     d52:	46c0      	nop			; (mov r8, r8)
     d54:	000017c4 	.word	0x000017c4
     d58:	000014e1 	.word	0x000014e1
     d5c:	00000e3d 	.word	0x00000e3d

00000d60 <sys_config>:
 * @return				- void
 *
 * @note				- 
 ******************************************************************************************************/
void sys_config(void)
{
     d60:	b510      	push	{r4, lr}
 	/*Configure system tick to generate periodic interrupts */
 	SysTick_Config(system_gclk_gen_get_hz(GCLK_GENERATOR_0));
     d62:	2000      	movs	r0, #0
     d64:	4b11      	ldr	r3, [pc, #68]	; (dac <sys_config+0x4c>)
     d66:	4798      	blx	r3
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
     d68:	3801      	subs	r0, #1
     d6a:	4b11      	ldr	r3, [pc, #68]	; (db0 <sys_config+0x50>)
     d6c:	4298      	cmp	r0, r3
     d6e:	d80d      	bhi.n	d8c <sys_config+0x2c>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
     d70:	4a10      	ldr	r2, [pc, #64]	; (db4 <sys_config+0x54>)
     d72:	6050      	str	r0, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
     d74:	4810      	ldr	r0, [pc, #64]	; (db8 <sys_config+0x58>)
     d76:	6a03      	ldr	r3, [r0, #32]
     d78:	021b      	lsls	r3, r3, #8
     d7a:	0a1b      	lsrs	r3, r3, #8
     d7c:	21c0      	movs	r1, #192	; 0xc0
     d7e:	0609      	lsls	r1, r1, #24
     d80:	430b      	orrs	r3, r1
     d82:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
     d84:	2300      	movs	r3, #0
     d86:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
     d88:	3307      	adds	r3, #7
     d8a:	6013      	str	r3, [r2, #0]

	// Initialize UART - Terminal Debug (Debug On/Off in user_board.h)
	#ifdef DEBUG_WITH_UART
		config_UART();
     d8c:	4b0b      	ldr	r3, [pc, #44]	; (dbc <sys_config+0x5c>)
     d8e:	4798      	blx	r3
	#endif

	// Config / Initialize Modules
	config_GPIO();
     d90:	4b0b      	ldr	r3, [pc, #44]	; (dc0 <sys_config+0x60>)
     d92:	4798      	blx	r3
	//config_encUART();
	//config_encoder();
	//config_Motors();

	config_UART_Callback();		//Terminal UART, Encoder UART
     d94:	4b0b      	ldr	r3, [pc, #44]	; (dc4 <sys_config+0x64>)
     d96:	4798      	blx	r3

	delay_init();
     d98:	4b0b      	ldr	r3, [pc, #44]	; (dc8 <sys_config+0x68>)
     d9a:	4798      	blx	r3
	cpu_irq_enable();
     d9c:	2201      	movs	r2, #1
     d9e:	4b0b      	ldr	r3, [pc, #44]	; (dcc <sys_config+0x6c>)
     da0:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
     da2:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
     da6:	b662      	cpsie	i

	//Clear_Sleep_Timer();

	system_interrupt_enable_global();
	
}
     da8:	bd10      	pop	{r4, pc}
     daa:	46c0      	nop			; (mov r8, r8)
     dac:	000011d5 	.word	0x000011d5
     db0:	00ffffff 	.word	0x00ffffff
     db4:	e000e010 	.word	0xe000e010
     db8:	e000ed00 	.word	0xe000ed00
     dbc:	000005dd 	.word	0x000005dd
     dc0:	00000d09 	.word	0x00000d09
     dc4:	0000069d 	.word	0x0000069d
     dc8:	00000dd1 	.word	0x00000dd1
     dcc:	2000001c 	.word	0x2000001c

00000dd0 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
     dd0:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
     dd2:	2000      	movs	r0, #0
     dd4:	4b08      	ldr	r3, [pc, #32]	; (df8 <delay_init+0x28>)
     dd6:	4798      	blx	r3
     dd8:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
     dda:	4c08      	ldr	r4, [pc, #32]	; (dfc <delay_init+0x2c>)
     ddc:	21fa      	movs	r1, #250	; 0xfa
     dde:	0089      	lsls	r1, r1, #2
     de0:	47a0      	blx	r4
     de2:	4b07      	ldr	r3, [pc, #28]	; (e00 <delay_init+0x30>)
     de4:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
     de6:	4907      	ldr	r1, [pc, #28]	; (e04 <delay_init+0x34>)
     de8:	0028      	movs	r0, r5
     dea:	47a0      	blx	r4
     dec:	4b06      	ldr	r3, [pc, #24]	; (e08 <delay_init+0x38>)
     dee:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
     df0:	2205      	movs	r2, #5
     df2:	4b06      	ldr	r3, [pc, #24]	; (e0c <delay_init+0x3c>)
     df4:	601a      	str	r2, [r3, #0]
}
     df6:	bd70      	pop	{r4, r5, r6, pc}
     df8:	000011d5 	.word	0x000011d5
     dfc:	000015b5 	.word	0x000015b5
     e00:	20000014 	.word	0x20000014
     e04:	000f4240 	.word	0x000f4240
     e08:	20000018 	.word	0x20000018
     e0c:	e000e010 	.word	0xe000e010

00000e10 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
     e10:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
     e12:	4b08      	ldr	r3, [pc, #32]	; (e34 <delay_cycles_ms+0x24>)
     e14:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
     e16:	4a08      	ldr	r2, [pc, #32]	; (e38 <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
     e18:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     e1a:	2180      	movs	r1, #128	; 0x80
     e1c:	0249      	lsls	r1, r1, #9
	while (n--) {
     e1e:	3801      	subs	r0, #1
     e20:	d307      	bcc.n	e32 <delay_cycles_ms+0x22>
	if (n > 0) {
     e22:	2c00      	cmp	r4, #0
     e24:	d0fb      	beq.n	e1e <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
     e26:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
     e28:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
     e2a:	6813      	ldr	r3, [r2, #0]
     e2c:	420b      	tst	r3, r1
     e2e:	d0fc      	beq.n	e2a <delay_cycles_ms+0x1a>
     e30:	e7f5      	b.n	e1e <delay_cycles_ms+0xe>
	}
}
     e32:	bd30      	pop	{r4, r5, pc}
     e34:	20000014 	.word	0x20000014
     e38:	e000e010 	.word	0xe000e010

00000e3c <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
     e3c:	b500      	push	{lr}
     e3e:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
     e40:	ab01      	add	r3, sp, #4
     e42:	2280      	movs	r2, #128	; 0x80
     e44:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
     e46:	780a      	ldrb	r2, [r1, #0]
     e48:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
     e4a:	784a      	ldrb	r2, [r1, #1]
     e4c:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
     e4e:	788a      	ldrb	r2, [r1, #2]
     e50:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
     e52:	0019      	movs	r1, r3
     e54:	4b01      	ldr	r3, [pc, #4]	; (e5c <port_pin_set_config+0x20>)
     e56:	4798      	blx	r3
}
     e58:	b003      	add	sp, #12
     e5a:	bd00      	pop	{pc}
     e5c:	000013e5 	.word	0x000013e5

00000e60 <system_board_init>:
{
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
     e60:	4770      	bx	lr
	...

00000e64 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
     e64:	4b0c      	ldr	r3, [pc, #48]	; (e98 <cpu_irq_enter_critical+0x34>)
     e66:	681b      	ldr	r3, [r3, #0]
     e68:	2b00      	cmp	r3, #0
     e6a:	d106      	bne.n	e7a <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
     e6c:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
     e70:	2b00      	cmp	r3, #0
     e72:	d007      	beq.n	e84 <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
     e74:	2200      	movs	r2, #0
     e76:	4b09      	ldr	r3, [pc, #36]	; (e9c <cpu_irq_enter_critical+0x38>)
     e78:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
     e7a:	4a07      	ldr	r2, [pc, #28]	; (e98 <cpu_irq_enter_critical+0x34>)
     e7c:	6813      	ldr	r3, [r2, #0]
     e7e:	3301      	adds	r3, #1
     e80:	6013      	str	r3, [r2, #0]
}
     e82:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
     e84:	b672      	cpsid	i
     e86:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
     e8a:	2200      	movs	r2, #0
     e8c:	4b04      	ldr	r3, [pc, #16]	; (ea0 <cpu_irq_enter_critical+0x3c>)
     e8e:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
     e90:	3201      	adds	r2, #1
     e92:	4b02      	ldr	r3, [pc, #8]	; (e9c <cpu_irq_enter_critical+0x38>)
     e94:	701a      	strb	r2, [r3, #0]
     e96:	e7f0      	b.n	e7a <cpu_irq_enter_critical+0x16>
     e98:	2000007c 	.word	0x2000007c
     e9c:	20000080 	.word	0x20000080
     ea0:	2000001c 	.word	0x2000001c

00000ea4 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
     ea4:	4b08      	ldr	r3, [pc, #32]	; (ec8 <cpu_irq_leave_critical+0x24>)
     ea6:	681a      	ldr	r2, [r3, #0]
     ea8:	3a01      	subs	r2, #1
     eaa:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
     eac:	681b      	ldr	r3, [r3, #0]
     eae:	2b00      	cmp	r3, #0
     eb0:	d109      	bne.n	ec6 <cpu_irq_leave_critical+0x22>
     eb2:	4b06      	ldr	r3, [pc, #24]	; (ecc <cpu_irq_leave_critical+0x28>)
     eb4:	781b      	ldrb	r3, [r3, #0]
     eb6:	2b00      	cmp	r3, #0
     eb8:	d005      	beq.n	ec6 <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
     eba:	2201      	movs	r2, #1
     ebc:	4b04      	ldr	r3, [pc, #16]	; (ed0 <cpu_irq_leave_critical+0x2c>)
     ebe:	701a      	strb	r2, [r3, #0]
     ec0:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
     ec4:	b662      	cpsie	i
	}
}
     ec6:	4770      	bx	lr
     ec8:	2000007c 	.word	0x2000007c
     ecc:	20000080 	.word	0x20000080
     ed0:	2000001c 	.word	0x2000001c

00000ed4 <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
     ed4:	b510      	push	{r4, lr}
	switch (clock_source) {
     ed6:	2807      	cmp	r0, #7
     ed8:	d803      	bhi.n	ee2 <system_clock_source_get_hz+0xe>
     eda:	0080      	lsls	r0, r0, #2
     edc:	4b16      	ldr	r3, [pc, #88]	; (f38 <system_clock_source_get_hz+0x64>)
     ede:	581b      	ldr	r3, [r3, r0]
     ee0:	469f      	mov	pc, r3
		}

		return 48000000UL;

	default:
		return 0;
     ee2:	2000      	movs	r0, #0
     ee4:	e027      	b.n	f36 <system_clock_source_get_hz+0x62>
		return _system_clock_inst.xosc.frequency;
     ee6:	4b15      	ldr	r3, [pc, #84]	; (f3c <system_clock_source_get_hz+0x68>)
     ee8:	68d8      	ldr	r0, [r3, #12]
     eea:	e024      	b.n	f36 <system_clock_source_get_hz+0x62>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
     eec:	4b14      	ldr	r3, [pc, #80]	; (f40 <system_clock_source_get_hz+0x6c>)
     eee:	6a1b      	ldr	r3, [r3, #32]
     ef0:	059b      	lsls	r3, r3, #22
     ef2:	0f9b      	lsrs	r3, r3, #30
     ef4:	4813      	ldr	r0, [pc, #76]	; (f44 <system_clock_source_get_hz+0x70>)
     ef6:	40d8      	lsrs	r0, r3
     ef8:	e01d      	b.n	f36 <system_clock_source_get_hz+0x62>
		return _system_clock_inst.xosc32k.frequency;
     efa:	4b10      	ldr	r3, [pc, #64]	; (f3c <system_clock_source_get_hz+0x68>)
     efc:	6918      	ldr	r0, [r3, #16]
     efe:	e01a      	b.n	f36 <system_clock_source_get_hz+0x62>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
     f00:	4b0e      	ldr	r3, [pc, #56]	; (f3c <system_clock_source_get_hz+0x68>)
     f02:	681b      	ldr	r3, [r3, #0]
			return 0;
     f04:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
     f06:	079b      	lsls	r3, r3, #30
     f08:	d515      	bpl.n	f36 <system_clock_source_get_hz+0x62>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
     f0a:	490d      	ldr	r1, [pc, #52]	; (f40 <system_clock_source_get_hz+0x6c>)
     f0c:	2210      	movs	r2, #16
     f0e:	68cb      	ldr	r3, [r1, #12]
     f10:	421a      	tst	r2, r3
     f12:	d0fc      	beq.n	f0e <system_clock_source_get_hz+0x3a>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
     f14:	4b09      	ldr	r3, [pc, #36]	; (f3c <system_clock_source_get_hz+0x68>)
     f16:	681b      	ldr	r3, [r3, #0]
     f18:	075b      	lsls	r3, r3, #29
     f1a:	d401      	bmi.n	f20 <system_clock_source_get_hz+0x4c>
		return 48000000UL;
     f1c:	480a      	ldr	r0, [pc, #40]	; (f48 <system_clock_source_get_hz+0x74>)
     f1e:	e00a      	b.n	f36 <system_clock_source_get_hz+0x62>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
     f20:	2000      	movs	r0, #0
     f22:	4b0a      	ldr	r3, [pc, #40]	; (f4c <system_clock_source_get_hz+0x78>)
     f24:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
     f26:	4b05      	ldr	r3, [pc, #20]	; (f3c <system_clock_source_get_hz+0x68>)
     f28:	689b      	ldr	r3, [r3, #8]
     f2a:	041b      	lsls	r3, r3, #16
     f2c:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
     f2e:	4358      	muls	r0, r3
     f30:	e001      	b.n	f36 <system_clock_source_get_hz+0x62>
		return 32768UL;
     f32:	2080      	movs	r0, #128	; 0x80
     f34:	0200      	lsls	r0, r0, #8
	}
}
     f36:	bd10      	pop	{r4, pc}
     f38:	000017dc 	.word	0x000017dc
     f3c:	20000084 	.word	0x20000084
     f40:	40000800 	.word	0x40000800
     f44:	007a1200 	.word	0x007a1200
     f48:	02dc6c00 	.word	0x02dc6c00
     f4c:	00001309 	.word	0x00001309

00000f50 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
     f50:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
     f52:	490c      	ldr	r1, [pc, #48]	; (f84 <system_clock_source_osc8m_set_config+0x34>)
     f54:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
     f56:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
     f58:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
     f5a:	7840      	ldrb	r0, [r0, #1]
     f5c:	2201      	movs	r2, #1
     f5e:	4010      	ands	r0, r2
     f60:	0180      	lsls	r0, r0, #6
     f62:	2640      	movs	r6, #64	; 0x40
     f64:	43b3      	bics	r3, r6
     f66:	4303      	orrs	r3, r0
     f68:	402a      	ands	r2, r5
     f6a:	01d2      	lsls	r2, r2, #7
     f6c:	2080      	movs	r0, #128	; 0x80
     f6e:	4383      	bics	r3, r0
     f70:	4313      	orrs	r3, r2
     f72:	2203      	movs	r2, #3
     f74:	4022      	ands	r2, r4
     f76:	0212      	lsls	r2, r2, #8
     f78:	4803      	ldr	r0, [pc, #12]	; (f88 <system_clock_source_osc8m_set_config+0x38>)
     f7a:	4003      	ands	r3, r0
     f7c:	4313      	orrs	r3, r2
     f7e:	620b      	str	r3, [r1, #32]
}
     f80:	bd70      	pop	{r4, r5, r6, pc}
     f82:	46c0      	nop			; (mov r8, r8)
     f84:	40000800 	.word	0x40000800
     f88:	fffffcff 	.word	0xfffffcff

00000f8c <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
     f8c:	2807      	cmp	r0, #7
     f8e:	d803      	bhi.n	f98 <system_clock_source_enable+0xc>
     f90:	0080      	lsls	r0, r0, #2
     f92:	4b1e      	ldr	r3, [pc, #120]	; (100c <system_clock_source_enable+0x80>)
     f94:	581b      	ldr	r3, [r3, r0]
     f96:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
     f98:	2017      	movs	r0, #23
     f9a:	e036      	b.n	100a <system_clock_source_enable+0x7e>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
     f9c:	4a1c      	ldr	r2, [pc, #112]	; (1010 <system_clock_source_enable+0x84>)
     f9e:	6a13      	ldr	r3, [r2, #32]
     fa0:	2102      	movs	r1, #2
     fa2:	430b      	orrs	r3, r1
     fa4:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
     fa6:	2000      	movs	r0, #0
     fa8:	e02f      	b.n	100a <system_clock_source_enable+0x7e>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
     faa:	4a19      	ldr	r2, [pc, #100]	; (1010 <system_clock_source_enable+0x84>)
     fac:	6993      	ldr	r3, [r2, #24]
     fae:	2102      	movs	r1, #2
     fb0:	430b      	orrs	r3, r1
     fb2:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
     fb4:	2000      	movs	r0, #0
		break;
     fb6:	e028      	b.n	100a <system_clock_source_enable+0x7e>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
     fb8:	4a15      	ldr	r2, [pc, #84]	; (1010 <system_clock_source_enable+0x84>)
     fba:	8a13      	ldrh	r3, [r2, #16]
     fbc:	2102      	movs	r1, #2
     fbe:	430b      	orrs	r3, r1
     fc0:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
     fc2:	2000      	movs	r0, #0
		break;
     fc4:	e021      	b.n	100a <system_clock_source_enable+0x7e>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
     fc6:	4a12      	ldr	r2, [pc, #72]	; (1010 <system_clock_source_enable+0x84>)
     fc8:	8a93      	ldrh	r3, [r2, #20]
     fca:	2102      	movs	r1, #2
     fcc:	430b      	orrs	r3, r1
     fce:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
     fd0:	2000      	movs	r0, #0
		break;
     fd2:	e01a      	b.n	100a <system_clock_source_enable+0x7e>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
     fd4:	4b0f      	ldr	r3, [pc, #60]	; (1014 <system_clock_source_enable+0x88>)
     fd6:	681a      	ldr	r2, [r3, #0]
     fd8:	2102      	movs	r1, #2
     fda:	430a      	orrs	r2, r1
     fdc:	601a      	str	r2, [r3, #0]
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control & ~SYSCTRL_DFLLCTRL_ONDEMAND;
     fde:	681b      	ldr	r3, [r3, #0]
     fe0:	4a0d      	ldr	r2, [pc, #52]	; (1018 <system_clock_source_enable+0x8c>)
     fe2:	4013      	ands	r3, r2
     fe4:	4a0a      	ldr	r2, [pc, #40]	; (1010 <system_clock_source_enable+0x84>)
     fe6:	8493      	strh	r3, [r2, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
     fe8:	0011      	movs	r1, r2
     fea:	2210      	movs	r2, #16
     fec:	68cb      	ldr	r3, [r1, #12]
     fee:	421a      	tst	r2, r3
     ff0:	d0fc      	beq.n	fec <system_clock_source_enable+0x60>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
     ff2:	4a08      	ldr	r2, [pc, #32]	; (1014 <system_clock_source_enable+0x88>)
     ff4:	6891      	ldr	r1, [r2, #8]
     ff6:	4b06      	ldr	r3, [pc, #24]	; (1010 <system_clock_source_enable+0x84>)
     ff8:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
     ffa:	6851      	ldr	r1, [r2, #4]
     ffc:	6299      	str	r1, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
     ffe:	6812      	ldr	r2, [r2, #0]
    1000:	b292      	uxth	r2, r2
    1002:	849a      	strh	r2, [r3, #36]	; 0x24
	return STATUS_OK;
    1004:	2000      	movs	r0, #0
    1006:	e000      	b.n	100a <system_clock_source_enable+0x7e>
		return STATUS_OK;
    1008:	2000      	movs	r0, #0
}
    100a:	4770      	bx	lr
    100c:	000017fc 	.word	0x000017fc
    1010:	40000800 	.word	0x40000800
    1014:	20000084 	.word	0x20000084
    1018:	0000ff7f 	.word	0x0000ff7f

0000101c <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    101c:	b530      	push	{r4, r5, lr}
    101e:	b085      	sub	sp, #20
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    1020:	22c2      	movs	r2, #194	; 0xc2
    1022:	00d2      	lsls	r2, r2, #3
    1024:	4b1a      	ldr	r3, [pc, #104]	; (1090 <system_clock_init+0x74>)
    1026:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    1028:	4a1a      	ldr	r2, [pc, #104]	; (1094 <system_clock_init+0x78>)
    102a:	6853      	ldr	r3, [r2, #4]
    102c:	211e      	movs	r1, #30
    102e:	438b      	bics	r3, r1
    1030:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_1;
    1032:	2301      	movs	r3, #1
    1034:	466a      	mov	r2, sp
    1036:	7013      	strb	r3, [r2, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1038:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    103a:	4d17      	ldr	r5, [pc, #92]	; (1098 <system_clock_init+0x7c>)
    103c:	b2e0      	uxtb	r0, r4
    103e:	4669      	mov	r1, sp
    1040:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    1042:	3401      	adds	r4, #1
    1044:	2c1c      	cmp	r4, #28
    1046:	d1f9      	bne.n	103c <system_clock_init+0x20>
	config->run_in_standby  = false;
    1048:	a803      	add	r0, sp, #12
    104a:	2400      	movs	r4, #0
    104c:	7044      	strb	r4, [r0, #1]
	config->on_demand       = true;
    104e:	2501      	movs	r5, #1
    1050:	7085      	strb	r5, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    1052:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    1054:	4b11      	ldr	r3, [pc, #68]	; (109c <system_clock_init+0x80>)
    1056:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    1058:	2006      	movs	r0, #6
    105a:	4b11      	ldr	r3, [pc, #68]	; (10a0 <system_clock_init+0x84>)
    105c:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    105e:	4b11      	ldr	r3, [pc, #68]	; (10a4 <system_clock_init+0x88>)
    1060:	4798      	blx	r3
	PM->CPUSEL.reg = (uint32_t)divider;
    1062:	4b11      	ldr	r3, [pc, #68]	; (10a8 <system_clock_init+0x8c>)
    1064:	721c      	strb	r4, [r3, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    1066:	725c      	strb	r4, [r3, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    1068:	729c      	strb	r4, [r3, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    106a:	72dc      	strb	r4, [r3, #11]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    106c:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
    106e:	466b      	mov	r3, sp
    1070:	705c      	strb	r4, [r3, #1]
#if SAML21 || SAML22  || SAMR30
	config->source_clock       = GCLK_SOURCE_OSC16M;
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
    1072:	2306      	movs	r3, #6
    1074:	466a      	mov	r2, sp
    1076:	7013      	strb	r3, [r2, #0]
#endif
	config->run_in_standby     = false;
    1078:	7214      	strb	r4, [r2, #8]
	config->output_enable      = false;
    107a:	7254      	strb	r4, [r2, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    107c:	4669      	mov	r1, sp
    107e:	2000      	movs	r0, #0
    1080:	4b0a      	ldr	r3, [pc, #40]	; (10ac <system_clock_init+0x90>)
    1082:	4798      	blx	r3
    1084:	2000      	movs	r0, #0
    1086:	4b0a      	ldr	r3, [pc, #40]	; (10b0 <system_clock_init+0x94>)
    1088:	4798      	blx	r3
#endif
}
    108a:	b005      	add	sp, #20
    108c:	bd30      	pop	{r4, r5, pc}
    108e:	46c0      	nop			; (mov r8, r8)
    1090:	40000800 	.word	0x40000800
    1094:	41004000 	.word	0x41004000
    1098:	000012ed 	.word	0x000012ed
    109c:	00000f51 	.word	0x00000f51
    10a0:	00000f8d 	.word	0x00000f8d
    10a4:	000010b5 	.word	0x000010b5
    10a8:	40000400 	.word	0x40000400
    10ac:	000010d9 	.word	0x000010d9
    10b0:	00001191 	.word	0x00001191

000010b4 <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    10b4:	4a06      	ldr	r2, [pc, #24]	; (10d0 <system_gclk_init+0x1c>)
    10b6:	6993      	ldr	r3, [r2, #24]
    10b8:	2108      	movs	r1, #8
    10ba:	430b      	orrs	r3, r1
    10bc:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    10be:	2201      	movs	r2, #1
    10c0:	4b04      	ldr	r3, [pc, #16]	; (10d4 <system_gclk_init+0x20>)
    10c2:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    10c4:	0019      	movs	r1, r3
    10c6:	780b      	ldrb	r3, [r1, #0]
    10c8:	4213      	tst	r3, r2
    10ca:	d1fc      	bne.n	10c6 <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    10cc:	4770      	bx	lr
    10ce:	46c0      	nop			; (mov r8, r8)
    10d0:	40000400 	.word	0x40000400
    10d4:	40000c00 	.word	0x40000c00

000010d8 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    10d8:	b570      	push	{r4, r5, r6, lr}
    10da:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    10dc:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    10de:	780d      	ldrb	r5, [r1, #0]
    10e0:	022d      	lsls	r5, r5, #8
    10e2:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    10e4:	784b      	ldrb	r3, [r1, #1]
    10e6:	2b00      	cmp	r3, #0
    10e8:	d002      	beq.n	10f0 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    10ea:	2380      	movs	r3, #128	; 0x80
    10ec:	02db      	lsls	r3, r3, #11
    10ee:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    10f0:	7a4b      	ldrb	r3, [r1, #9]
    10f2:	2b00      	cmp	r3, #0
    10f4:	d002      	beq.n	10fc <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    10f6:	2380      	movs	r3, #128	; 0x80
    10f8:	031b      	lsls	r3, r3, #12
    10fa:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    10fc:	6848      	ldr	r0, [r1, #4]
    10fe:	2801      	cmp	r0, #1
    1100:	d910      	bls.n	1124 <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    1102:	1e43      	subs	r3, r0, #1
    1104:	4218      	tst	r0, r3
    1106:	d134      	bne.n	1172 <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    1108:	2802      	cmp	r0, #2
    110a:	d930      	bls.n	116e <system_gclk_gen_set_config+0x96>
    110c:	2302      	movs	r3, #2
    110e:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    1110:	3201      	adds	r2, #1
						mask <<= 1) {
    1112:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    1114:	4298      	cmp	r0, r3
    1116:	d8fb      	bhi.n	1110 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    1118:	0212      	lsls	r2, r2, #8
    111a:	4332      	orrs	r2, r6
    111c:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    111e:	2380      	movs	r3, #128	; 0x80
    1120:	035b      	lsls	r3, r3, #13
    1122:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    1124:	7a0b      	ldrb	r3, [r1, #8]
    1126:	2b00      	cmp	r3, #0
    1128:	d002      	beq.n	1130 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    112a:	2380      	movs	r3, #128	; 0x80
    112c:	039b      	lsls	r3, r3, #14
    112e:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1130:	4a13      	ldr	r2, [pc, #76]	; (1180 <system_gclk_gen_set_config+0xa8>)
    1132:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    1134:	b25b      	sxtb	r3, r3
    1136:	2b00      	cmp	r3, #0
    1138:	dbfb      	blt.n	1132 <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    113a:	4b12      	ldr	r3, [pc, #72]	; (1184 <system_gclk_gen_set_config+0xac>)
    113c:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    113e:	4b12      	ldr	r3, [pc, #72]	; (1188 <system_gclk_gen_set_config+0xb0>)
    1140:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1142:	4a0f      	ldr	r2, [pc, #60]	; (1180 <system_gclk_gen_set_config+0xa8>)
    1144:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    1146:	b25b      	sxtb	r3, r3
    1148:	2b00      	cmp	r3, #0
    114a:	dbfb      	blt.n	1144 <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    114c:	4b0c      	ldr	r3, [pc, #48]	; (1180 <system_gclk_gen_set_config+0xa8>)
    114e:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1150:	001a      	movs	r2, r3
    1152:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    1154:	b25b      	sxtb	r3, r3
    1156:	2b00      	cmp	r3, #0
    1158:	dbfb      	blt.n	1152 <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    115a:	4a09      	ldr	r2, [pc, #36]	; (1180 <system_gclk_gen_set_config+0xa8>)
    115c:	6853      	ldr	r3, [r2, #4]
    115e:	2180      	movs	r1, #128	; 0x80
    1160:	0249      	lsls	r1, r1, #9
    1162:	400b      	ands	r3, r1
    1164:	431d      	orrs	r5, r3
    1166:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    1168:	4b08      	ldr	r3, [pc, #32]	; (118c <system_gclk_gen_set_config+0xb4>)
    116a:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    116c:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    116e:	2200      	movs	r2, #0
    1170:	e7d2      	b.n	1118 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    1172:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    1174:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    1176:	2380      	movs	r3, #128	; 0x80
    1178:	029b      	lsls	r3, r3, #10
    117a:	431d      	orrs	r5, r3
    117c:	e7d2      	b.n	1124 <system_gclk_gen_set_config+0x4c>
    117e:	46c0      	nop			; (mov r8, r8)
    1180:	40000c00 	.word	0x40000c00
    1184:	00000e65 	.word	0x00000e65
    1188:	40000c08 	.word	0x40000c08
    118c:	00000ea5 	.word	0x00000ea5

00001190 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    1190:	b510      	push	{r4, lr}
    1192:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1194:	4a0b      	ldr	r2, [pc, #44]	; (11c4 <system_gclk_gen_enable+0x34>)
    1196:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1198:	b25b      	sxtb	r3, r3
    119a:	2b00      	cmp	r3, #0
    119c:	dbfb      	blt.n	1196 <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    119e:	4b0a      	ldr	r3, [pc, #40]	; (11c8 <system_gclk_gen_enable+0x38>)
    11a0:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    11a2:	4b0a      	ldr	r3, [pc, #40]	; (11cc <system_gclk_gen_enable+0x3c>)
    11a4:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    11a6:	4a07      	ldr	r2, [pc, #28]	; (11c4 <system_gclk_gen_enable+0x34>)
    11a8:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    11aa:	b25b      	sxtb	r3, r3
    11ac:	2b00      	cmp	r3, #0
    11ae:	dbfb      	blt.n	11a8 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    11b0:	4a04      	ldr	r2, [pc, #16]	; (11c4 <system_gclk_gen_enable+0x34>)
    11b2:	6851      	ldr	r1, [r2, #4]
    11b4:	2380      	movs	r3, #128	; 0x80
    11b6:	025b      	lsls	r3, r3, #9
    11b8:	430b      	orrs	r3, r1
    11ba:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    11bc:	4b04      	ldr	r3, [pc, #16]	; (11d0 <system_gclk_gen_enable+0x40>)
    11be:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    11c0:	bd10      	pop	{r4, pc}
    11c2:	46c0      	nop			; (mov r8, r8)
    11c4:	40000c00 	.word	0x40000c00
    11c8:	00000e65 	.word	0x00000e65
    11cc:	40000c04 	.word	0x40000c04
    11d0:	00000ea5 	.word	0x00000ea5

000011d4 <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    11d4:	b570      	push	{r4, r5, r6, lr}
    11d6:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    11d8:	4a1a      	ldr	r2, [pc, #104]	; (1244 <system_gclk_gen_get_hz+0x70>)
    11da:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    11dc:	b25b      	sxtb	r3, r3
    11de:	2b00      	cmp	r3, #0
    11e0:	dbfb      	blt.n	11da <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    11e2:	4b19      	ldr	r3, [pc, #100]	; (1248 <system_gclk_gen_get_hz+0x74>)
    11e4:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    11e6:	4b19      	ldr	r3, [pc, #100]	; (124c <system_gclk_gen_get_hz+0x78>)
    11e8:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    11ea:	4a16      	ldr	r2, [pc, #88]	; (1244 <system_gclk_gen_get_hz+0x70>)
    11ec:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    11ee:	b25b      	sxtb	r3, r3
    11f0:	2b00      	cmp	r3, #0
    11f2:	dbfb      	blt.n	11ec <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    11f4:	4e13      	ldr	r6, [pc, #76]	; (1244 <system_gclk_gen_get_hz+0x70>)
    11f6:	6870      	ldr	r0, [r6, #4]
    11f8:	04c0      	lsls	r0, r0, #19
    11fa:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    11fc:	4b14      	ldr	r3, [pc, #80]	; (1250 <system_gclk_gen_get_hz+0x7c>)
    11fe:	4798      	blx	r3
    1200:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    1202:	4b12      	ldr	r3, [pc, #72]	; (124c <system_gclk_gen_get_hz+0x78>)
    1204:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    1206:	6876      	ldr	r6, [r6, #4]
    1208:	02f6      	lsls	r6, r6, #11
    120a:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    120c:	4b11      	ldr	r3, [pc, #68]	; (1254 <system_gclk_gen_get_hz+0x80>)
    120e:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1210:	4a0c      	ldr	r2, [pc, #48]	; (1244 <system_gclk_gen_get_hz+0x70>)
    1212:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1214:	b25b      	sxtb	r3, r3
    1216:	2b00      	cmp	r3, #0
    1218:	dbfb      	blt.n	1212 <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    121a:	4b0a      	ldr	r3, [pc, #40]	; (1244 <system_gclk_gen_get_hz+0x70>)
    121c:	689c      	ldr	r4, [r3, #8]
    121e:	0224      	lsls	r4, r4, #8
    1220:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    1222:	4b0d      	ldr	r3, [pc, #52]	; (1258 <system_gclk_gen_get_hz+0x84>)
    1224:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    1226:	2e00      	cmp	r6, #0
    1228:	d107      	bne.n	123a <system_gclk_gen_get_hz+0x66>
    122a:	2c01      	cmp	r4, #1
    122c:	d907      	bls.n	123e <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    122e:	0021      	movs	r1, r4
    1230:	0028      	movs	r0, r5
    1232:	4b0a      	ldr	r3, [pc, #40]	; (125c <system_gclk_gen_get_hz+0x88>)
    1234:	4798      	blx	r3
    1236:	0005      	movs	r5, r0
    1238:	e001      	b.n	123e <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    123a:	3401      	adds	r4, #1
    123c:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    123e:	0028      	movs	r0, r5
    1240:	bd70      	pop	{r4, r5, r6, pc}
    1242:	46c0      	nop			; (mov r8, r8)
    1244:	40000c00 	.word	0x40000c00
    1248:	00000e65 	.word	0x00000e65
    124c:	40000c04 	.word	0x40000c04
    1250:	00000ed5 	.word	0x00000ed5
    1254:	40000c08 	.word	0x40000c08
    1258:	00000ea5 	.word	0x00000ea5
    125c:	000015b5 	.word	0x000015b5

00001260 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    1260:	b510      	push	{r4, lr}
    1262:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1264:	4b06      	ldr	r3, [pc, #24]	; (1280 <system_gclk_chan_enable+0x20>)
    1266:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1268:	4b06      	ldr	r3, [pc, #24]	; (1284 <system_gclk_chan_enable+0x24>)
    126a:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    126c:	4a06      	ldr	r2, [pc, #24]	; (1288 <system_gclk_chan_enable+0x28>)
    126e:	8853      	ldrh	r3, [r2, #2]
    1270:	2180      	movs	r1, #128	; 0x80
    1272:	01c9      	lsls	r1, r1, #7
    1274:	430b      	orrs	r3, r1
    1276:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    1278:	4b04      	ldr	r3, [pc, #16]	; (128c <system_gclk_chan_enable+0x2c>)
    127a:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    127c:	bd10      	pop	{r4, pc}
    127e:	46c0      	nop			; (mov r8, r8)
    1280:	00000e65 	.word	0x00000e65
    1284:	40000c02 	.word	0x40000c02
    1288:	40000c00 	.word	0x40000c00
    128c:	00000ea5 	.word	0x00000ea5

00001290 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    1290:	b510      	push	{r4, lr}
    1292:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    1294:	4b0f      	ldr	r3, [pc, #60]	; (12d4 <system_gclk_chan_disable+0x44>)
    1296:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1298:	4b0f      	ldr	r3, [pc, #60]	; (12d8 <system_gclk_chan_disable+0x48>)
    129a:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    129c:	4a0f      	ldr	r2, [pc, #60]	; (12dc <system_gclk_chan_disable+0x4c>)
    129e:	8853      	ldrh	r3, [r2, #2]
    12a0:	051b      	lsls	r3, r3, #20
    12a2:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    12a4:	8853      	ldrh	r3, [r2, #2]
    12a6:	490e      	ldr	r1, [pc, #56]	; (12e0 <system_gclk_chan_disable+0x50>)
    12a8:	400b      	ands	r3, r1
    12aa:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    12ac:	8853      	ldrh	r3, [r2, #2]
    12ae:	490d      	ldr	r1, [pc, #52]	; (12e4 <system_gclk_chan_disable+0x54>)
    12b0:	400b      	ands	r3, r1
    12b2:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    12b4:	0011      	movs	r1, r2
    12b6:	2280      	movs	r2, #128	; 0x80
    12b8:	01d2      	lsls	r2, r2, #7
    12ba:	884b      	ldrh	r3, [r1, #2]
    12bc:	4213      	tst	r3, r2
    12be:	d1fc      	bne.n	12ba <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    12c0:	4906      	ldr	r1, [pc, #24]	; (12dc <system_gclk_chan_disable+0x4c>)
    12c2:	884a      	ldrh	r2, [r1, #2]
    12c4:	0203      	lsls	r3, r0, #8
    12c6:	4806      	ldr	r0, [pc, #24]	; (12e0 <system_gclk_chan_disable+0x50>)
    12c8:	4002      	ands	r2, r0
    12ca:	4313      	orrs	r3, r2
    12cc:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    12ce:	4b06      	ldr	r3, [pc, #24]	; (12e8 <system_gclk_chan_disable+0x58>)
    12d0:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    12d2:	bd10      	pop	{r4, pc}
    12d4:	00000e65 	.word	0x00000e65
    12d8:	40000c02 	.word	0x40000c02
    12dc:	40000c00 	.word	0x40000c00
    12e0:	fffff0ff 	.word	0xfffff0ff
    12e4:	ffffbfff 	.word	0xffffbfff
    12e8:	00000ea5 	.word	0x00000ea5

000012ec <system_gclk_chan_set_config>:
{
    12ec:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    12ee:	780c      	ldrb	r4, [r1, #0]
    12f0:	0224      	lsls	r4, r4, #8
    12f2:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    12f4:	4b02      	ldr	r3, [pc, #8]	; (1300 <system_gclk_chan_set_config+0x14>)
    12f6:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    12f8:	b2a4      	uxth	r4, r4
    12fa:	4b02      	ldr	r3, [pc, #8]	; (1304 <system_gclk_chan_set_config+0x18>)
    12fc:	805c      	strh	r4, [r3, #2]
}
    12fe:	bd10      	pop	{r4, pc}
    1300:	00001291 	.word	0x00001291
    1304:	40000c00 	.word	0x40000c00

00001308 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    1308:	b510      	push	{r4, lr}
    130a:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    130c:	4b06      	ldr	r3, [pc, #24]	; (1328 <system_gclk_chan_get_hz+0x20>)
    130e:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1310:	4b06      	ldr	r3, [pc, #24]	; (132c <system_gclk_chan_get_hz+0x24>)
    1312:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    1314:	4b06      	ldr	r3, [pc, #24]	; (1330 <system_gclk_chan_get_hz+0x28>)
    1316:	885c      	ldrh	r4, [r3, #2]
    1318:	0524      	lsls	r4, r4, #20
    131a:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    131c:	4b05      	ldr	r3, [pc, #20]	; (1334 <system_gclk_chan_get_hz+0x2c>)
    131e:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    1320:	0020      	movs	r0, r4
    1322:	4b05      	ldr	r3, [pc, #20]	; (1338 <system_gclk_chan_get_hz+0x30>)
    1324:	4798      	blx	r3
}
    1326:	bd10      	pop	{r4, pc}
    1328:	00000e65 	.word	0x00000e65
    132c:	40000c02 	.word	0x40000c02
    1330:	40000c00 	.word	0x40000c00
    1334:	00000ea5 	.word	0x00000ea5
    1338:	000011d5 	.word	0x000011d5

0000133c <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    133c:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    133e:	78d3      	ldrb	r3, [r2, #3]
    1340:	2b00      	cmp	r3, #0
    1342:	d135      	bne.n	13b0 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    1344:	7813      	ldrb	r3, [r2, #0]
    1346:	2b80      	cmp	r3, #128	; 0x80
    1348:	d029      	beq.n	139e <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    134a:	061b      	lsls	r3, r3, #24
    134c:	2480      	movs	r4, #128	; 0x80
    134e:	0264      	lsls	r4, r4, #9
    1350:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    1352:	7854      	ldrb	r4, [r2, #1]
    1354:	2502      	movs	r5, #2
    1356:	43ac      	bics	r4, r5
    1358:	d106      	bne.n	1368 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    135a:	7894      	ldrb	r4, [r2, #2]
    135c:	2c00      	cmp	r4, #0
    135e:	d120      	bne.n	13a2 <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    1360:	2480      	movs	r4, #128	; 0x80
    1362:	02a4      	lsls	r4, r4, #10
    1364:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    1366:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1368:	7854      	ldrb	r4, [r2, #1]
    136a:	3c01      	subs	r4, #1
    136c:	2c01      	cmp	r4, #1
    136e:	d91c      	bls.n	13aa <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1370:	040d      	lsls	r5, r1, #16
    1372:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    1374:	24a0      	movs	r4, #160	; 0xa0
    1376:	05e4      	lsls	r4, r4, #23
    1378:	432c      	orrs	r4, r5
    137a:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    137c:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    137e:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1380:	24d0      	movs	r4, #208	; 0xd0
    1382:	0624      	lsls	r4, r4, #24
    1384:	432c      	orrs	r4, r5
    1386:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1388:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    138a:	78d4      	ldrb	r4, [r2, #3]
    138c:	2c00      	cmp	r4, #0
    138e:	d122      	bne.n	13d6 <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    1390:	035b      	lsls	r3, r3, #13
    1392:	d51c      	bpl.n	13ce <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    1394:	7893      	ldrb	r3, [r2, #2]
    1396:	2b01      	cmp	r3, #1
    1398:	d01e      	beq.n	13d8 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    139a:	6141      	str	r1, [r0, #20]
    139c:	e017      	b.n	13ce <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    139e:	2300      	movs	r3, #0
    13a0:	e7d7      	b.n	1352 <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    13a2:	24c0      	movs	r4, #192	; 0xc0
    13a4:	02e4      	lsls	r4, r4, #11
    13a6:	4323      	orrs	r3, r4
    13a8:	e7dd      	b.n	1366 <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    13aa:	4c0d      	ldr	r4, [pc, #52]	; (13e0 <_system_pinmux_config+0xa4>)
    13ac:	4023      	ands	r3, r4
    13ae:	e7df      	b.n	1370 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    13b0:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    13b2:	040c      	lsls	r4, r1, #16
    13b4:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    13b6:	23a0      	movs	r3, #160	; 0xa0
    13b8:	05db      	lsls	r3, r3, #23
    13ba:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    13bc:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    13be:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    13c0:	23d0      	movs	r3, #208	; 0xd0
    13c2:	061b      	lsls	r3, r3, #24
    13c4:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    13c6:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    13c8:	78d3      	ldrb	r3, [r2, #3]
    13ca:	2b00      	cmp	r3, #0
    13cc:	d103      	bne.n	13d6 <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    13ce:	7853      	ldrb	r3, [r2, #1]
    13d0:	3b01      	subs	r3, #1
    13d2:	2b01      	cmp	r3, #1
    13d4:	d902      	bls.n	13dc <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    13d6:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    13d8:	6181      	str	r1, [r0, #24]
    13da:	e7f8      	b.n	13ce <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    13dc:	6081      	str	r1, [r0, #8]
}
    13de:	e7fa      	b.n	13d6 <_system_pinmux_config+0x9a>
    13e0:	fffbffff 	.word	0xfffbffff

000013e4 <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    13e4:	b510      	push	{r4, lr}
    13e6:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    13e8:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    13ea:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    13ec:	2900      	cmp	r1, #0
    13ee:	d104      	bne.n	13fa <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    13f0:	0943      	lsrs	r3, r0, #5
    13f2:	01db      	lsls	r3, r3, #7
    13f4:	4905      	ldr	r1, [pc, #20]	; (140c <system_pinmux_pin_set_config+0x28>)
    13f6:	468c      	mov	ip, r1
    13f8:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    13fa:	241f      	movs	r4, #31
    13fc:	4020      	ands	r0, r4
    13fe:	2101      	movs	r1, #1
    1400:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    1402:	0018      	movs	r0, r3
    1404:	4b02      	ldr	r3, [pc, #8]	; (1410 <system_pinmux_pin_set_config+0x2c>)
    1406:	4798      	blx	r3
}
    1408:	bd10      	pop	{r4, pc}
    140a:	46c0      	nop			; (mov r8, r8)
    140c:	41004400 	.word	0x41004400
    1410:	0000133d 	.word	0x0000133d

00001414 <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    1414:	4770      	bx	lr
	...

00001418 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    1418:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    141a:	4b05      	ldr	r3, [pc, #20]	; (1430 <system_init+0x18>)
    141c:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    141e:	4b05      	ldr	r3, [pc, #20]	; (1434 <system_init+0x1c>)
    1420:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    1422:	4b05      	ldr	r3, [pc, #20]	; (1438 <system_init+0x20>)
    1424:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    1426:	4b05      	ldr	r3, [pc, #20]	; (143c <system_init+0x24>)
    1428:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    142a:	4b05      	ldr	r3, [pc, #20]	; (1440 <system_init+0x28>)
    142c:	4798      	blx	r3


}
    142e:	bd10      	pop	{r4, pc}
    1430:	0000101d 	.word	0x0000101d
    1434:	00000e61 	.word	0x00000e61
    1438:	00000241 	.word	0x00000241
    143c:	00001415 	.word	0x00001415
    1440:	00001415 	.word	0x00001415

00001444 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    1444:	e7fe      	b.n	1444 <Dummy_Handler>
	...

00001448 <Reset_Handler>:
{
    1448:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
    144a:	4a1a      	ldr	r2, [pc, #104]	; (14b4 <Reset_Handler+0x6c>)
    144c:	4b1a      	ldr	r3, [pc, #104]	; (14b8 <Reset_Handler+0x70>)
    144e:	429a      	cmp	r2, r3
    1450:	d011      	beq.n	1476 <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    1452:	001a      	movs	r2, r3
    1454:	4b19      	ldr	r3, [pc, #100]	; (14bc <Reset_Handler+0x74>)
    1456:	429a      	cmp	r2, r3
    1458:	d20d      	bcs.n	1476 <Reset_Handler+0x2e>
    145a:	4a19      	ldr	r2, [pc, #100]	; (14c0 <Reset_Handler+0x78>)
    145c:	3303      	adds	r3, #3
    145e:	1a9b      	subs	r3, r3, r2
    1460:	089b      	lsrs	r3, r3, #2
    1462:	3301      	adds	r3, #1
    1464:	009b      	lsls	r3, r3, #2
    1466:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    1468:	4813      	ldr	r0, [pc, #76]	; (14b8 <Reset_Handler+0x70>)
    146a:	4912      	ldr	r1, [pc, #72]	; (14b4 <Reset_Handler+0x6c>)
    146c:	588c      	ldr	r4, [r1, r2]
    146e:	5084      	str	r4, [r0, r2]
    1470:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    1472:	429a      	cmp	r2, r3
    1474:	d1fa      	bne.n	146c <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    1476:	4a13      	ldr	r2, [pc, #76]	; (14c4 <Reset_Handler+0x7c>)
    1478:	4b13      	ldr	r3, [pc, #76]	; (14c8 <Reset_Handler+0x80>)
    147a:	429a      	cmp	r2, r3
    147c:	d20a      	bcs.n	1494 <Reset_Handler+0x4c>
    147e:	43d3      	mvns	r3, r2
    1480:	4911      	ldr	r1, [pc, #68]	; (14c8 <Reset_Handler+0x80>)
    1482:	185b      	adds	r3, r3, r1
    1484:	2103      	movs	r1, #3
    1486:	438b      	bics	r3, r1
    1488:	3304      	adds	r3, #4
    148a:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    148c:	2100      	movs	r1, #0
    148e:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    1490:	4293      	cmp	r3, r2
    1492:	d1fc      	bne.n	148e <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    1494:	4a0d      	ldr	r2, [pc, #52]	; (14cc <Reset_Handler+0x84>)
    1496:	21ff      	movs	r1, #255	; 0xff
    1498:	4b0d      	ldr	r3, [pc, #52]	; (14d0 <Reset_Handler+0x88>)
    149a:	438b      	bics	r3, r1
    149c:	6093      	str	r3, [r2, #8]
        NVMCTRL->CTRLB.bit.MANW = 1;
    149e:	4a0d      	ldr	r2, [pc, #52]	; (14d4 <Reset_Handler+0x8c>)
    14a0:	6853      	ldr	r3, [r2, #4]
    14a2:	397f      	subs	r1, #127	; 0x7f
    14a4:	430b      	orrs	r3, r1
    14a6:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    14a8:	4b0b      	ldr	r3, [pc, #44]	; (14d8 <Reset_Handler+0x90>)
    14aa:	4798      	blx	r3
        main();
    14ac:	4b0b      	ldr	r3, [pc, #44]	; (14dc <Reset_Handler+0x94>)
    14ae:	4798      	blx	r3
    14b0:	e7fe      	b.n	14b0 <Reset_Handler+0x68>
    14b2:	46c0      	nop			; (mov r8, r8)
    14b4:	0000184c 	.word	0x0000184c
    14b8:	20000000 	.word	0x20000000
    14bc:	20000044 	.word	0x20000044
    14c0:	20000004 	.word	0x20000004
    14c4:	20000044 	.word	0x20000044
    14c8:	200003b0 	.word	0x200003b0
    14cc:	e000ed00 	.word	0xe000ed00
    14d0:	00000000 	.word	0x00000000
    14d4:	41004000 	.word	0x41004000
    14d8:	00001721 	.word	0x00001721
    14dc:	000014f9 	.word	0x000014f9

000014e0 <writeStr>:
 * @return				- void
 *
 * @note				- If Debug with uart is defined (user_hoard.h)
 ******************************************************************************************************/
 void writeStr(uint8_t *ptr, uint8_t len)
 {
    14e0:	b510      	push	{r4, lr}
	#ifdef DEBUG_WITH_UART
		usart_write_buffer_wait(&usart_instance, ptr, len);
    14e2:	b28a      	uxth	r2, r1
    14e4:	0001      	movs	r1, r0
    14e6:	4802      	ldr	r0, [pc, #8]	; (14f0 <writeStr+0x10>)
    14e8:	4b02      	ldr	r3, [pc, #8]	; (14f4 <writeStr+0x14>)
    14ea:	4798      	blx	r3
	#endif
 }
    14ec:	bd10      	pop	{r4, pc}
    14ee:	46c0      	nop			; (mov r8, r8)
    14f0:	200000c0 	.word	0x200000c0
    14f4:	000009d9 	.word	0x000009d9

000014f8 <main>:
// Debug Status Messages 

uint8_t statusCheck[] = "Hello World!\r\n";
uint8_t init[] = "Initializing...\r\n";
int main (void)
{
    14f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    14fa:	46c6      	mov	lr, r8
    14fc:	b500      	push	{lr}
    14fe:	b086      	sub	sp, #24
	system_init();
    1500:	4b23      	ldr	r3, [pc, #140]	; (1590 <main+0x98>)
    1502:	4798      	blx	r3
	sys_config();
    1504:	4b23      	ldr	r3, [pc, #140]	; (1594 <main+0x9c>)
    1506:	4798      	blx	r3
	writeStr(init, sizeof(init));			//uart debug statement
    1508:	2112      	movs	r1, #18
    150a:	4823      	ldr	r0, [pc, #140]	; (1598 <main+0xa0>)
    150c:	4c23      	ldr	r4, [pc, #140]	; (159c <main+0xa4>)
    150e:	47a0      	blx	r4
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Set the pin to high or low atomically based on the requested level */
	if (level) {
		port_base->OUTSET.reg = pin_mask;
    1510:	4b23      	ldr	r3, [pc, #140]	; (15a0 <main+0xa8>)
    1512:	2280      	movs	r2, #128	; 0x80
    1514:	0312      	lsls	r2, r2, #12
    1516:	619a      	str	r2, [r3, #24]
	} else {
		port_base->OUTCLR.reg = pin_mask;
    1518:	615a      	str	r2, [r3, #20]
		port_base->OUTSET.reg = pin_mask;
    151a:	2280      	movs	r2, #128	; 0x80
    151c:	02d2      	lsls	r2, r2, #11
    151e:	619a      	str	r2, [r3, #24]

	port_pin_set_output_level(STATUSLED_GREEN, TRUE);
	port_pin_set_output_level(STATUSLED_GREEN, FALSE);
	port_pin_set_output_level(STATUSLED_ORANGE, TRUE);

	writeStr(statusCheck, sizeof(init));
    1520:	2112      	movs	r1, #18
    1522:	4820      	ldr	r0, [pc, #128]	; (15a4 <main+0xac>)
    1524:	47a0      	blx	r4
	
	__vo int i = 0;
    1526:	2300      	movs	r3, #0
    1528:	9305      	str	r3, [sp, #20]
	uint8_t loopCnt[] = "1\r\n";
    152a:	4b1f      	ldr	r3, [pc, #124]	; (15a8 <main+0xb0>)
    152c:	9304      	str	r3, [sp, #16]
	//uint8_t statusMsg[] = "OK\r\n";
	uint8_t statusReset[] = "Reset Counter\r\n";
    152e:	466a      	mov	r2, sp
    1530:	4b1e      	ldr	r3, [pc, #120]	; (15ac <main+0xb4>)
    1532:	cb13      	ldmia	r3!, {r0, r1, r4}
    1534:	c213      	stmia	r2!, {r0, r1, r4}
    1536:	681b      	ldr	r3, [r3, #0]
    1538:	6013      	str	r3, [r2, #0]
    153a:	2780      	movs	r7, #128	; 0x80
    153c:	02ff      	lsls	r7, r7, #11
    153e:	46b8      	mov	r8, r7
	//uint8_t statusLoop[] = "Finished loop\r\n";

	while(1)
	{
		port_pin_set_output_level(STATUSLED_ORANGE, TRUE);
		delay_ms(500);
    1540:	4e1b      	ldr	r6, [pc, #108]	; (15b0 <main+0xb8>)
    1542:	4c17      	ldr	r4, [pc, #92]	; (15a0 <main+0xa8>)
    1544:	4643      	mov	r3, r8
    1546:	61a3      	str	r3, [r4, #24]
    1548:	20fa      	movs	r0, #250	; 0xfa
    154a:	0040      	lsls	r0, r0, #1
    154c:	47b0      	blx	r6
		port_base->OUTCLR.reg = pin_mask;
    154e:	6167      	str	r7, [r4, #20]
		port_base->OUTSET.reg = pin_mask;
    1550:	2580      	movs	r5, #128	; 0x80
    1552:	032d      	lsls	r5, r5, #12
    1554:	61a5      	str	r5, [r4, #24]
		port_pin_set_output_level(STATUSLED_ORANGE, FALSE);
		port_pin_set_output_level(STATUSLED_GREEN, TRUE);

		delay_ms(500);		// problem child
    1556:	20fa      	movs	r0, #250	; 0xfa
    1558:	0040      	lsls	r0, r0, #1
    155a:	47b0      	blx	r6
		port_base->OUTCLR.reg = pin_mask;
    155c:	6165      	str	r5, [r4, #20]
		port_pin_set_output_level(STATUSLED_GREEN, FALSE);
		
		// Count Loops
		loopCnt[0] = i + '0';
    155e:	9b05      	ldr	r3, [sp, #20]
    1560:	a804      	add	r0, sp, #16
    1562:	3330      	adds	r3, #48	; 0x30
    1564:	7003      	strb	r3, [r0, #0]

		writeStr(loopCnt, sizeof(loopCnt));		
    1566:	2104      	movs	r1, #4
    1568:	4b0c      	ldr	r3, [pc, #48]	; (159c <main+0xa4>)
    156a:	4798      	blx	r3
		i++;
    156c:	9b05      	ldr	r3, [sp, #20]
    156e:	3301      	adds	r3, #1
    1570:	9305      	str	r3, [sp, #20]
		if (i > 150) 
    1572:	9b05      	ldr	r3, [sp, #20]
    1574:	2b96      	cmp	r3, #150	; 0x96
    1576:	dde5      	ble.n	1544 <main+0x4c>
		{
			i = 0;
    1578:	2300      	movs	r3, #0
    157a:	9305      	str	r3, [sp, #20]
			for (int x = 0; x < 4; x++)
			{
				loopCnt[x] = 0;
    157c:	aa04      	add	r2, sp, #16
    157e:	7013      	strb	r3, [r2, #0]
    1580:	7053      	strb	r3, [r2, #1]
    1582:	7093      	strb	r3, [r2, #2]
    1584:	70d3      	strb	r3, [r2, #3]
			}
			writeStr(statusReset, sizeof(statusReset));
    1586:	2110      	movs	r1, #16
    1588:	4668      	mov	r0, sp
    158a:	4b04      	ldr	r3, [pc, #16]	; (159c <main+0xa4>)
    158c:	4798      	blx	r3
    158e:	e7d8      	b.n	1542 <main+0x4a>
    1590:	00001419 	.word	0x00001419
    1594:	00000d61 	.word	0x00000d61
    1598:	20000020 	.word	0x20000020
    159c:	000014e1 	.word	0x000014e1
    15a0:	41004400 	.word	0x41004400
    15a4:	20000034 	.word	0x20000034
    15a8:	000a0d31 	.word	0x000a0d31
    15ac:	0000181c 	.word	0x0000181c
    15b0:	00000e11 	.word	0x00000e11

000015b4 <__udivsi3>:
    15b4:	2200      	movs	r2, #0
    15b6:	0843      	lsrs	r3, r0, #1
    15b8:	428b      	cmp	r3, r1
    15ba:	d374      	bcc.n	16a6 <__udivsi3+0xf2>
    15bc:	0903      	lsrs	r3, r0, #4
    15be:	428b      	cmp	r3, r1
    15c0:	d35f      	bcc.n	1682 <__udivsi3+0xce>
    15c2:	0a03      	lsrs	r3, r0, #8
    15c4:	428b      	cmp	r3, r1
    15c6:	d344      	bcc.n	1652 <__udivsi3+0x9e>
    15c8:	0b03      	lsrs	r3, r0, #12
    15ca:	428b      	cmp	r3, r1
    15cc:	d328      	bcc.n	1620 <__udivsi3+0x6c>
    15ce:	0c03      	lsrs	r3, r0, #16
    15d0:	428b      	cmp	r3, r1
    15d2:	d30d      	bcc.n	15f0 <__udivsi3+0x3c>
    15d4:	22ff      	movs	r2, #255	; 0xff
    15d6:	0209      	lsls	r1, r1, #8
    15d8:	ba12      	rev	r2, r2
    15da:	0c03      	lsrs	r3, r0, #16
    15dc:	428b      	cmp	r3, r1
    15de:	d302      	bcc.n	15e6 <__udivsi3+0x32>
    15e0:	1212      	asrs	r2, r2, #8
    15e2:	0209      	lsls	r1, r1, #8
    15e4:	d065      	beq.n	16b2 <__udivsi3+0xfe>
    15e6:	0b03      	lsrs	r3, r0, #12
    15e8:	428b      	cmp	r3, r1
    15ea:	d319      	bcc.n	1620 <__udivsi3+0x6c>
    15ec:	e000      	b.n	15f0 <__udivsi3+0x3c>
    15ee:	0a09      	lsrs	r1, r1, #8
    15f0:	0bc3      	lsrs	r3, r0, #15
    15f2:	428b      	cmp	r3, r1
    15f4:	d301      	bcc.n	15fa <__udivsi3+0x46>
    15f6:	03cb      	lsls	r3, r1, #15
    15f8:	1ac0      	subs	r0, r0, r3
    15fa:	4152      	adcs	r2, r2
    15fc:	0b83      	lsrs	r3, r0, #14
    15fe:	428b      	cmp	r3, r1
    1600:	d301      	bcc.n	1606 <__udivsi3+0x52>
    1602:	038b      	lsls	r3, r1, #14
    1604:	1ac0      	subs	r0, r0, r3
    1606:	4152      	adcs	r2, r2
    1608:	0b43      	lsrs	r3, r0, #13
    160a:	428b      	cmp	r3, r1
    160c:	d301      	bcc.n	1612 <__udivsi3+0x5e>
    160e:	034b      	lsls	r3, r1, #13
    1610:	1ac0      	subs	r0, r0, r3
    1612:	4152      	adcs	r2, r2
    1614:	0b03      	lsrs	r3, r0, #12
    1616:	428b      	cmp	r3, r1
    1618:	d301      	bcc.n	161e <__udivsi3+0x6a>
    161a:	030b      	lsls	r3, r1, #12
    161c:	1ac0      	subs	r0, r0, r3
    161e:	4152      	adcs	r2, r2
    1620:	0ac3      	lsrs	r3, r0, #11
    1622:	428b      	cmp	r3, r1
    1624:	d301      	bcc.n	162a <__udivsi3+0x76>
    1626:	02cb      	lsls	r3, r1, #11
    1628:	1ac0      	subs	r0, r0, r3
    162a:	4152      	adcs	r2, r2
    162c:	0a83      	lsrs	r3, r0, #10
    162e:	428b      	cmp	r3, r1
    1630:	d301      	bcc.n	1636 <__udivsi3+0x82>
    1632:	028b      	lsls	r3, r1, #10
    1634:	1ac0      	subs	r0, r0, r3
    1636:	4152      	adcs	r2, r2
    1638:	0a43      	lsrs	r3, r0, #9
    163a:	428b      	cmp	r3, r1
    163c:	d301      	bcc.n	1642 <__udivsi3+0x8e>
    163e:	024b      	lsls	r3, r1, #9
    1640:	1ac0      	subs	r0, r0, r3
    1642:	4152      	adcs	r2, r2
    1644:	0a03      	lsrs	r3, r0, #8
    1646:	428b      	cmp	r3, r1
    1648:	d301      	bcc.n	164e <__udivsi3+0x9a>
    164a:	020b      	lsls	r3, r1, #8
    164c:	1ac0      	subs	r0, r0, r3
    164e:	4152      	adcs	r2, r2
    1650:	d2cd      	bcs.n	15ee <__udivsi3+0x3a>
    1652:	09c3      	lsrs	r3, r0, #7
    1654:	428b      	cmp	r3, r1
    1656:	d301      	bcc.n	165c <__udivsi3+0xa8>
    1658:	01cb      	lsls	r3, r1, #7
    165a:	1ac0      	subs	r0, r0, r3
    165c:	4152      	adcs	r2, r2
    165e:	0983      	lsrs	r3, r0, #6
    1660:	428b      	cmp	r3, r1
    1662:	d301      	bcc.n	1668 <__udivsi3+0xb4>
    1664:	018b      	lsls	r3, r1, #6
    1666:	1ac0      	subs	r0, r0, r3
    1668:	4152      	adcs	r2, r2
    166a:	0943      	lsrs	r3, r0, #5
    166c:	428b      	cmp	r3, r1
    166e:	d301      	bcc.n	1674 <__udivsi3+0xc0>
    1670:	014b      	lsls	r3, r1, #5
    1672:	1ac0      	subs	r0, r0, r3
    1674:	4152      	adcs	r2, r2
    1676:	0903      	lsrs	r3, r0, #4
    1678:	428b      	cmp	r3, r1
    167a:	d301      	bcc.n	1680 <__udivsi3+0xcc>
    167c:	010b      	lsls	r3, r1, #4
    167e:	1ac0      	subs	r0, r0, r3
    1680:	4152      	adcs	r2, r2
    1682:	08c3      	lsrs	r3, r0, #3
    1684:	428b      	cmp	r3, r1
    1686:	d301      	bcc.n	168c <__udivsi3+0xd8>
    1688:	00cb      	lsls	r3, r1, #3
    168a:	1ac0      	subs	r0, r0, r3
    168c:	4152      	adcs	r2, r2
    168e:	0883      	lsrs	r3, r0, #2
    1690:	428b      	cmp	r3, r1
    1692:	d301      	bcc.n	1698 <__udivsi3+0xe4>
    1694:	008b      	lsls	r3, r1, #2
    1696:	1ac0      	subs	r0, r0, r3
    1698:	4152      	adcs	r2, r2
    169a:	0843      	lsrs	r3, r0, #1
    169c:	428b      	cmp	r3, r1
    169e:	d301      	bcc.n	16a4 <__udivsi3+0xf0>
    16a0:	004b      	lsls	r3, r1, #1
    16a2:	1ac0      	subs	r0, r0, r3
    16a4:	4152      	adcs	r2, r2
    16a6:	1a41      	subs	r1, r0, r1
    16a8:	d200      	bcs.n	16ac <__udivsi3+0xf8>
    16aa:	4601      	mov	r1, r0
    16ac:	4152      	adcs	r2, r2
    16ae:	4610      	mov	r0, r2
    16b0:	4770      	bx	lr
    16b2:	e7ff      	b.n	16b4 <__udivsi3+0x100>
    16b4:	b501      	push	{r0, lr}
    16b6:	2000      	movs	r0, #0
    16b8:	f000 f806 	bl	16c8 <__aeabi_idiv0>
    16bc:	bd02      	pop	{r1, pc}
    16be:	46c0      	nop			; (mov r8, r8)

000016c0 <__aeabi_uidivmod>:
    16c0:	2900      	cmp	r1, #0
    16c2:	d0f7      	beq.n	16b4 <__udivsi3+0x100>
    16c4:	e776      	b.n	15b4 <__udivsi3>
    16c6:	4770      	bx	lr

000016c8 <__aeabi_idiv0>:
    16c8:	4770      	bx	lr
    16ca:	46c0      	nop			; (mov r8, r8)

000016cc <__aeabi_lmul>:
    16cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    16ce:	46ce      	mov	lr, r9
    16d0:	4647      	mov	r7, r8
    16d2:	0415      	lsls	r5, r2, #16
    16d4:	0c2d      	lsrs	r5, r5, #16
    16d6:	002e      	movs	r6, r5
    16d8:	b580      	push	{r7, lr}
    16da:	0407      	lsls	r7, r0, #16
    16dc:	0c14      	lsrs	r4, r2, #16
    16de:	0c3f      	lsrs	r7, r7, #16
    16e0:	4699      	mov	r9, r3
    16e2:	0c03      	lsrs	r3, r0, #16
    16e4:	437e      	muls	r6, r7
    16e6:	435d      	muls	r5, r3
    16e8:	4367      	muls	r7, r4
    16ea:	4363      	muls	r3, r4
    16ec:	197f      	adds	r7, r7, r5
    16ee:	0c34      	lsrs	r4, r6, #16
    16f0:	19e4      	adds	r4, r4, r7
    16f2:	469c      	mov	ip, r3
    16f4:	42a5      	cmp	r5, r4
    16f6:	d903      	bls.n	1700 <__aeabi_lmul+0x34>
    16f8:	2380      	movs	r3, #128	; 0x80
    16fa:	025b      	lsls	r3, r3, #9
    16fc:	4698      	mov	r8, r3
    16fe:	44c4      	add	ip, r8
    1700:	464b      	mov	r3, r9
    1702:	4351      	muls	r1, r2
    1704:	4343      	muls	r3, r0
    1706:	0436      	lsls	r6, r6, #16
    1708:	0c36      	lsrs	r6, r6, #16
    170a:	0c25      	lsrs	r5, r4, #16
    170c:	0424      	lsls	r4, r4, #16
    170e:	4465      	add	r5, ip
    1710:	19a4      	adds	r4, r4, r6
    1712:	1859      	adds	r1, r3, r1
    1714:	1949      	adds	r1, r1, r5
    1716:	0020      	movs	r0, r4
    1718:	bc0c      	pop	{r2, r3}
    171a:	4690      	mov	r8, r2
    171c:	4699      	mov	r9, r3
    171e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00001720 <__libc_init_array>:
    1720:	b570      	push	{r4, r5, r6, lr}
    1722:	2600      	movs	r6, #0
    1724:	4d0c      	ldr	r5, [pc, #48]	; (1758 <__libc_init_array+0x38>)
    1726:	4c0d      	ldr	r4, [pc, #52]	; (175c <__libc_init_array+0x3c>)
    1728:	1b64      	subs	r4, r4, r5
    172a:	10a4      	asrs	r4, r4, #2
    172c:	42a6      	cmp	r6, r4
    172e:	d109      	bne.n	1744 <__libc_init_array+0x24>
    1730:	2600      	movs	r6, #0
    1732:	f000 f87b 	bl	182c <_init>
    1736:	4d0a      	ldr	r5, [pc, #40]	; (1760 <__libc_init_array+0x40>)
    1738:	4c0a      	ldr	r4, [pc, #40]	; (1764 <__libc_init_array+0x44>)
    173a:	1b64      	subs	r4, r4, r5
    173c:	10a4      	asrs	r4, r4, #2
    173e:	42a6      	cmp	r6, r4
    1740:	d105      	bne.n	174e <__libc_init_array+0x2e>
    1742:	bd70      	pop	{r4, r5, r6, pc}
    1744:	00b3      	lsls	r3, r6, #2
    1746:	58eb      	ldr	r3, [r5, r3]
    1748:	4798      	blx	r3
    174a:	3601      	adds	r6, #1
    174c:	e7ee      	b.n	172c <__libc_init_array+0xc>
    174e:	00b3      	lsls	r3, r6, #2
    1750:	58eb      	ldr	r3, [r5, r3]
    1752:	4798      	blx	r3
    1754:	3601      	adds	r6, #1
    1756:	e7f2      	b.n	173e <__libc_init_array+0x1e>
    1758:	00001838 	.word	0x00001838
    175c:	00001838 	.word	0x00001838
    1760:	00001838 	.word	0x00001838
    1764:	0000183c 	.word	0x0000183c
    1768:	42000800 	.word	0x42000800
    176c:	42000c00 	.word	0x42000c00
    1770:	42001000 	.word	0x42001000
    1774:	42001400 	.word	0x42001400
    1778:	42001800 	.word	0x42001800
    177c:	42001c00 	.word	0x42001c00
    1780:	666e6f43 	.word	0x666e6f43
    1784:	72756769 	.word	0x72756769
    1788:	20676e69 	.word	0x20676e69
    178c:	6d726554 	.word	0x6d726554
    1790:	6c616e69 	.word	0x6c616e69
    1794:	52415520 	.word	0x52415520
    1798:	2e2e2e54 	.word	0x2e2e2e54
    179c:	000a0d2e 	.word	0x000a0d2e
    17a0:	666e6f43 	.word	0x666e6f43
    17a4:	72756769 	.word	0x72756769
    17a8:	20676e69 	.word	0x20676e69
    17ac:	54524155 	.word	0x54524155
    17b0:	6c614320 	.word	0x6c614320
    17b4:	6361626c 	.word	0x6361626c
    17b8:	2e2e736b 	.word	0x2e2e736b
    17bc:	0a0d2e2e 	.word	0x0a0d2e2e
    17c0:	00000000 	.word	0x00000000
    17c4:	666e6f43 	.word	0x666e6f43
    17c8:	72756769 	.word	0x72756769
    17cc:	20676e69 	.word	0x20676e69
    17d0:	4f495047 	.word	0x4f495047
    17d4:	2e2e2e2e 	.word	0x2e2e2e2e
    17d8:	00000a0d 	.word	0x00000a0d
    17dc:	00000ee6 	.word	0x00000ee6
    17e0:	00000ee2 	.word	0x00000ee2
    17e4:	00000ee2 	.word	0x00000ee2
    17e8:	00000f32 	.word	0x00000f32
    17ec:	00000f32 	.word	0x00000f32
    17f0:	00000efa 	.word	0x00000efa
    17f4:	00000eec 	.word	0x00000eec
    17f8:	00000f00 	.word	0x00000f00
    17fc:	00000fb8 	.word	0x00000fb8
    1800:	00000f98 	.word	0x00000f98
    1804:	00000f98 	.word	0x00000f98
    1808:	00001008 	.word	0x00001008
    180c:	00000faa 	.word	0x00000faa
    1810:	00000fc6 	.word	0x00000fc6
    1814:	00000f9c 	.word	0x00000f9c
    1818:	00000fd4 	.word	0x00000fd4
    181c:	65736552 	.word	0x65736552
    1820:	6f432074 	.word	0x6f432074
    1824:	65746e75 	.word	0x65746e75
    1828:	000a0d72 	.word	0x000a0d72

0000182c <_init>:
    182c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    182e:	46c0      	nop			; (mov r8, r8)
    1830:	bcf8      	pop	{r3, r4, r5, r6, r7}
    1832:	bc08      	pop	{r3}
    1834:	469e      	mov	lr, r3
    1836:	4770      	bx	lr

00001838 <__init_array_start>:
    1838:	000000cd 	.word	0x000000cd

0000183c <_fini>:
    183c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    183e:	46c0      	nop			; (mov r8, r8)
    1840:	bcf8      	pop	{r3, r4, r5, r6, r7}
    1842:	bc08      	pop	{r3}
    1844:	469e      	mov	lr, r3
    1846:	4770      	bx	lr

00001848 <__fini_array_start>:
    1848:	000000a5 	.word	0x000000a5
