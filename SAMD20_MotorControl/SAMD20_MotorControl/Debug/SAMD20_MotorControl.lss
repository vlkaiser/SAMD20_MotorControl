
SAMD20_MotorControl.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001df4  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000044  20000000  00001df4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000003f4  20000044  00001e38  00020044  2**2
                  ALLOC
  3 .stack        00002000  20000438  0000222c  00020044  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
  6 .debug_info   000377f5  00000000  00000000  000200c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000527d  00000000  00000000  000578ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00005e9d  00000000  00000000  0005cb37  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000710  00000000  00000000  000629d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000738  00000000  00000000  000630e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00015b8b  00000000  00000000  0006381c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000118cc  00000000  00000000  000793a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000614fa  00000000  00000000  0008ac73  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001070  00000000  00000000  000ec170  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
 * @return				- void
 *
 * @note				- ToDo: Is SERCOM3  OK for this, or will it interfere with i2c?
 ******************************************************************************************************/
void config_encUART(void)
{
       0:	38 24 00 20 f1 19 00 00 ed 19 00 00 ed 19 00 00     8$. ............
	...
	/* Sanity check arguments */
	Assert(config);

	/* Set default config in the config struct */
	config->data_order       = USART_DATAORDER_LSB;
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
      2c:	ed 19 00 00 00 00 00 00 00 00 00 00 ed 19 00 00     ................
	config->parity           = USART_PARITY_NONE;
	config->stopbits         = USART_STOPBITS_1;
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
	config->baudrate         = 9600;
	config->receiver_enable  = true;
	config->transmitter_enable = true;
      3c:	9d 12 00 00 ed 19 00 00 ed 19 00 00 4d 05 00 00     ............M...
	writeStr(statusMsg, sizeof(statusMsg));			//uart debug statement
	
	struct usart_config config_usart;
	usart_get_config_defaults(&config_usart);

	config_usart.baudrate    = 115200;						// boosted this above 115200 to overcome a ~10% latency issue
      4c:	ed 19 00 00 ed 19 00 00 ed 19 00 00 4d 06 00 00     ............M...
	config_usart.mux_setting = USART_RX_3_TX_2_XCK_3;
	config_usart.pinmux_pad0 = PINMUX_UNUSED;
	config_usart.pinmux_pad1 = PINMUX_UNUSED;
	config_usart.pinmux_pad2 = PINMUX_PA24C_SERCOM3_PAD2;	// PA24 = TX ENC_B
      5c:	3d 12 00 00 4d 12 00 00 5d 12 00 00 6d 12 00 00     =...M...]...m...
	config_usart.pinmux_pad3 = PINMUX_PA25C_SERCOM3_PAD3;	// PA25 = RX ENC_A
	
	while (usart_init(&usart_instance, SERCOM3, &config_usart) != STATUS_OK)
      6c:	7d 12 00 00 8d 12 00 00 cd 05 00 00 dd 05 00 00     }...............
	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

#if USART_CALLBACK_MODE == true
	/* Enable Global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
      7c:	ed 05 00 00 fd 05 00 00 0d 06 00 00 1d 06 00 00     ................
 * \param[in] vector Interrupt vector to enable
 */
static inline void system_interrupt_enable(
		const enum system_interrupt_vector vector)
{
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
      8c:	2d 06 00 00 3d 06 00 00 ed 19 00 00 ed 19 00 00     -...=...........

	/* Wait until synchronization is complete */
	_usart_wait_for_sync(module);

	/* Enable USART module */
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
      9c:	ed 19 00 00 ed 19 00 00                             ........

000000a4 <__do_global_dtors_aux>:
	{
		__ASM volatile ("nop");
	}

	usart_enable(&usart_instance);
}
      a4:	b510      	push	{r4, lr}
      a6:	4c06      	ldr	r4, [pc, #24]	; (c0 <__do_global_dtors_aux+0x1c>)
      a8:	7823      	ldrb	r3, [r4, #0]
      aa:	2b00      	cmp	r3, #0
      ac:	d107      	bne.n	be <__do_global_dtors_aux+0x1a>
      ae:	4b05      	ldr	r3, [pc, #20]	; (c4 <__do_global_dtors_aux+0x20>)
      b0:	2b00      	cmp	r3, #0
      b2:	d002      	beq.n	ba <__do_global_dtors_aux+0x16>
      b4:	4804      	ldr	r0, [pc, #16]	; (c8 <__do_global_dtors_aux+0x24>)
      b6:	e000      	b.n	ba <__do_global_dtors_aux+0x16>
      b8:	bf00      	nop
      ba:	2301      	movs	r3, #1
      bc:	7023      	strb	r3, [r4, #0]
      be:	bd10      	pop	{r4, pc}
      c0:	20000044 	.word	0x20000044
      c4:	00000000 	.word	0x00000000
      c8:	00001df4 	.word	0x00001df4

000000cc <frame_dummy>:
      cc:	4b08      	ldr	r3, [pc, #32]	; (f0 <frame_dummy+0x24>)
      ce:	b510      	push	{r4, lr}
      d0:	2b00      	cmp	r3, #0
      d2:	d003      	beq.n	dc <frame_dummy+0x10>
      d4:	4907      	ldr	r1, [pc, #28]	; (f4 <frame_dummy+0x28>)
      d6:	4808      	ldr	r0, [pc, #32]	; (f8 <frame_dummy+0x2c>)
      d8:	e000      	b.n	dc <frame_dummy+0x10>
      da:	bf00      	nop
      dc:	4807      	ldr	r0, [pc, #28]	; (fc <frame_dummy+0x30>)
      de:	6803      	ldr	r3, [r0, #0]
      e0:	2b00      	cmp	r3, #0
      e2:	d100      	bne.n	e6 <frame_dummy+0x1a>
      e4:	bd10      	pop	{r4, pc}
      e6:	4b06      	ldr	r3, [pc, #24]	; (100 <frame_dummy+0x34>)
      e8:	2b00      	cmp	r3, #0
      ea:	d0fb      	beq.n	e4 <frame_dummy+0x18>
      ec:	4798      	blx	r3
      ee:	e7f9      	b.n	e4 <frame_dummy+0x18>
      f0:	00000000 	.word	0x00000000
      f4:	20000048 	.word	0x20000048
      f8:	00001df4 	.word	0x00001df4
      fc:	00001df4 	.word	0x00001df4
     100:	00000000 	.word	0x00000000

00000104 <i2c_slave_init>:
		_i2c_slave_set_ctrlb_ackact(module, false);
		i2c_hw->CTRLB.reg |= SERCOM_I2CS_CTRLB_CMD(0x2);
	}
	if (i2c_hw->INTFLAG.reg & SERCOM_I2CS_INTFLAG_PREC) {
		/* Clear stop flag */
		i2c_hw->INTFLAG.reg = SERCOM_I2CS_INTFLAG_PREC;
     104:	b5f0      	push	{r4, r5, r6, r7, lr}
			i2c_hw->INTFLAG.reg = SERCOM_I2CS_INTFLAG_PREC;
     106:	46ce      	mov	lr, r9
     108:	4647      	mov	r7, r8
     10a:	b580      	push	{r7, lr}
			return STATUS_ABORTED;
     10c:	b083      	sub	sp, #12
     10e:	0005      	movs	r5, r0
		bool send_ack)
{
	Assert(module);
	Assert(module->hw);

	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
     110:	000c      	movs	r4, r1
	cpu_irq_enter_critical();
     112:	0016      	movs	r6, r2
     114:	6029      	str	r1, [r5, #0]

#if (SAMD20 || SAMD21 || SAMD09 || SAMD10 || SAMD11 || SAML21 || SAMDA1 ||  \
		SAML22 || SAMC20 || SAMC21 || SAMHA1 || (SAMHA0) || SAMR30)
	/* Workaround, Following two write are atomic */
	system_interrupt_enter_critical_section();
	i2c_hw->STATUS.reg = 0;
     116:	680b      	ldr	r3, [r1, #0]
     118:	201c      	movs	r0, #28

	if (send_ack == true) {
		i2c_hw->CTRLB.reg = 0;
	}
	else {
		i2c_hw->CTRLB.reg = SERCOM_I2CS_CTRLB_ACKACT;
     11a:	079b      	lsls	r3, r3, #30
     11c:	d504      	bpl.n	128 <i2c_slave_init+0x24>
     11e:	b003      	add	sp, #12
	cpu_irq_leave_critical();
     120:	bc0c      	pop	{r2, r3}
     122:	4690      	mov	r8, r2
		i2c_hw->CTRLB.reg |= SERCOM_I2CS_CTRLB_CMD(0x2);
     124:	4699      	mov	r9, r3
     126:	bdf0      	pop	{r4, r5, r6, r7, pc}
     128:	680b      	ldr	r3, [r1, #0]
     12a:	3817      	subs	r0, #23
     12c:	07db      	lsls	r3, r3, #31
     12e:	d4f6      	bmi.n	11e <i2c_slave_init+0x1a>
     130:	0008      	movs	r0, r1
     132:	4b41      	ldr	r3, [pc, #260]	; (238 <i2c_slave_init+0x134>)
     134:	4699      	mov	r9, r3
     136:	4798      	blx	r3
     138:	4a40      	ldr	r2, [pc, #256]	; (23c <i2c_slave_init+0x138>)
     13a:	6a11      	ldr	r1, [r2, #32]
     13c:	1c83      	adds	r3, r0, #2
     13e:	2701      	movs	r7, #1
     140:	46b8      	mov	r8, r7
     142:	409f      	lsls	r7, r3
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     144:	003b      	movs	r3, r7
		case SYSTEM_CLOCK_APB_APBB:
			PM->APBBMASK.reg |= mask;
			break;

		case SYSTEM_CLOCK_APB_APBC:
			PM->APBCMASK.reg |= mask;
     146:	430b      	orrs	r3, r1
     148:	6213      	str	r3, [r2, #32]
	gclk_chan_conf.source_generator = config->generator_source;
     14a:	a901      	add	r1, sp, #4
     14c:	7cb3      	ldrb	r3, [r6, #18]
     14e:	700b      	strb	r3, [r1, #0]
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     150:	300d      	adds	r0, #13
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     152:	b2c3      	uxtb	r3, r0
     154:	001f      	movs	r7, r3
     156:	0018      	movs	r0, r3
     158:	4b39      	ldr	r3, [pc, #228]	; (240 <i2c_slave_init+0x13c>)
     15a:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     15c:	0038      	movs	r0, r7
     15e:	4b39      	ldr	r3, [pc, #228]	; (244 <i2c_slave_init+0x140>)
     160:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     162:	7cb0      	ldrb	r0, [r6, #18]
     164:	2100      	movs	r1, #0
     166:	4b38      	ldr	r3, [pc, #224]	; (248 <i2c_slave_init+0x144>)
     168:	4798      	blx	r3
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
     16a:	6828      	ldr	r0, [r5, #0]
     16c:	47c8      	blx	r9
     16e:	0007      	movs	r7, r0
	_sercom_set_handler(instance_index, _i2c_slave_interrupt_handler);
     170:	4936      	ldr	r1, [pc, #216]	; (24c <i2c_slave_init+0x148>)
     172:	4b37      	ldr	r3, [pc, #220]	; (250 <i2c_slave_init+0x14c>)
     174:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     176:	00bf      	lsls	r7, r7, #2
     178:	4b36      	ldr	r3, [pc, #216]	; (254 <i2c_slave_init+0x150>)
     17a:	50fd      	str	r5, [r7, r3]
	module->registered_callback = 0;
     17c:	2300      	movs	r3, #0
     17e:	2224      	movs	r2, #36	; 0x24
     180:	54ab      	strb	r3, [r5, r2]
	module->enabled_callback = 0;
     182:	3201      	adds	r2, #1
     184:	54ab      	strb	r3, [r5, r2]
	module->buffer_length = 0;
     186:	84eb      	strh	r3, [r5, #38]	; 0x26
	module->nack_on_address = config->enable_nack_on_address;
     188:	7c73      	ldrb	r3, [r6, #17]
     18a:	722b      	strb	r3, [r5, #8]
	i2c_hw->CTRLA.reg = SERCOM_I2CS_CTRLA_MODE_I2C_SLAVE;
     18c:	2310      	movs	r3, #16
     18e:	6023      	str	r3, [r4, #0]
	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
     190:	682c      	ldr	r4, [r5, #0]
	module->buffer_timeout = config->buffer_timeout;
     192:	8933      	ldrh	r3, [r6, #8]
     194:	80eb      	strh	r3, [r5, #6]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->mux_position = SYSTEM_PINMUX_GPIO;
     196:	2380      	movs	r3, #128	; 0x80
     198:	466a      	mov	r2, sp
     19a:	7013      	strb	r3, [r2, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     19c:	2300      	movs	r3, #0
     19e:	7053      	strb	r3, [r2, #1]
	config->input_pull   = SYSTEM_PINMUX_PIN_PULL_UP;
     1a0:	466b      	mov	r3, sp
     1a2:	4642      	mov	r2, r8
     1a4:	709a      	strb	r2, [r3, #2]
	config->powersave    = false;
     1a6:	2300      	movs	r3, #0
     1a8:	466a      	mov	r2, sp
     1aa:	70d3      	strb	r3, [r2, #3]
	uint32_t pad0 = config->pinmux_pad0;
     1ac:	6970      	ldr	r0, [r6, #20]
	uint32_t pad1 = config->pinmux_pad1;
     1ae:	69b5      	ldr	r5, [r6, #24]
	if (pad0 == PINMUX_DEFAULT) {
     1b0:	2800      	cmp	r0, #0
     1b2:	d035      	beq.n	220 <i2c_slave_init+0x11c>
	pin_conf.mux_position = pad0 & 0xFFFF;
     1b4:	466b      	mov	r3, sp
     1b6:	7018      	strb	r0, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     1b8:	2302      	movs	r3, #2
     1ba:	466a      	mov	r2, sp
     1bc:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad0 >> 16, &pin_conf);
     1be:	0c00      	lsrs	r0, r0, #16
     1c0:	b2c0      	uxtb	r0, r0
     1c2:	4669      	mov	r1, sp
     1c4:	4b24      	ldr	r3, [pc, #144]	; (258 <i2c_slave_init+0x154>)
     1c6:	4798      	blx	r3
	if (pad1 == PINMUX_DEFAULT) {
     1c8:	2d00      	cmp	r5, #0
     1ca:	d02e      	beq.n	22a <i2c_slave_init+0x126>
	pin_conf.mux_position = pad1 & 0xFFFF;
     1cc:	466b      	mov	r3, sp
     1ce:	701d      	strb	r5, [r3, #0]
	pin_conf.direction    = SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK;
     1d0:	2302      	movs	r3, #2
     1d2:	466a      	mov	r2, sp
     1d4:	7053      	strb	r3, [r2, #1]
	system_pinmux_pin_set_config(pad1 >> 16, &pin_conf);
     1d6:	0c2d      	lsrs	r5, r5, #16
     1d8:	b2e8      	uxtb	r0, r5
     1da:	4669      	mov	r1, sp
     1dc:	4b1e      	ldr	r3, [pc, #120]	; (258 <i2c_slave_init+0x154>)
     1de:	4798      	blx	r3
	if (config->run_in_standby || system_is_debugger_present()) {
     1e0:	7cf3      	ldrb	r3, [r6, #19]
		tmp_ctrla = SERCOM_I2CS_CTRLA_RUNSTDBY;
     1e2:	2280      	movs	r2, #128	; 0x80
	if (config->run_in_standby || system_is_debugger_present()) {
     1e4:	2b00      	cmp	r3, #0
     1e6:	d104      	bne.n	1f2 <i2c_slave_init+0xee>
 * \retval false Debugger is not connected to the system
 *
 */
static inline bool system_is_debugger_present(void)
{
	return DSU->STATUSB.reg & DSU_STATUSB_DBGPRES;
     1e8:	4b1c      	ldr	r3, [pc, #112]	; (25c <i2c_slave_init+0x158>)
     1ea:	789b      	ldrb	r3, [r3, #2]
     1ec:	079b      	lsls	r3, r3, #30
		tmp_ctrla = SERCOM_I2CS_CTRLA_RUNSTDBY;
     1ee:	0fdb      	lsrs	r3, r3, #31
     1f0:	01da      	lsls	r2, r3, #7
	i2c_hw->CTRLA.reg |= tmp_ctrla;
     1f2:	6821      	ldr	r1, [r4, #0]
			(config->scl_low_timeout << SERCOM_I2CS_CTRLA_LOWTOUT_Pos);
     1f4:	7f33      	ldrb	r3, [r6, #28]
     1f6:	079b      	lsls	r3, r3, #30
	i2c_hw->CTRLA.reg |= tmp_ctrla;
     1f8:	430b      	orrs	r3, r1
     1fa:	6871      	ldr	r1, [r6, #4]
     1fc:	430b      	orrs	r3, r1
     1fe:	4313      	orrs	r3, r2
     200:	6023      	str	r3, [r4, #0]
	i2c_hw->CTRLB.reg = SERCOM_I2CS_CTRLB_SMEN | config->address_mode;
     202:	8972      	ldrh	r2, [r6, #10]
     204:	2380      	movs	r3, #128	; 0x80
     206:	005b      	lsls	r3, r3, #1
     208:	4313      	orrs	r3, r2
     20a:	6063      	str	r3, [r4, #4]
	i2c_hw->ADDR.reg = config->address << SERCOM_I2CS_ADDR_ADDR_Pos |
     20c:	89b3      	ldrh	r3, [r6, #12]
     20e:	005b      	lsls	r3, r3, #1
			config->address_mask << SERCOM_I2CS_ADDR_ADDRMASK_Pos |
     210:	89f2      	ldrh	r2, [r6, #14]
     212:	0452      	lsls	r2, r2, #17
	i2c_hw->ADDR.reg = config->address << SERCOM_I2CS_ADDR_ADDR_Pos |
     214:	4313      	orrs	r3, r2
			config->enable_general_call_address << SERCOM_I2CS_ADDR_GENCEN_Pos;
     216:	7c32      	ldrb	r2, [r6, #16]
			config->address_mask << SERCOM_I2CS_ADDR_ADDRMASK_Pos |
     218:	4313      	orrs	r3, r2
	i2c_hw->ADDR.reg = config->address << SERCOM_I2CS_ADDR_ADDR_Pos |
     21a:	6163      	str	r3, [r4, #20]
	return _i2c_slave_set_config(module, config);
     21c:	2000      	movs	r0, #0
     21e:	e77e      	b.n	11e <i2c_slave_init+0x1a>
		pad0 = _sercom_get_default_pad(sercom_hw, 0);
     220:	2100      	movs	r1, #0
     222:	0020      	movs	r0, r4
     224:	4b0e      	ldr	r3, [pc, #56]	; (260 <i2c_slave_init+0x15c>)
     226:	4798      	blx	r3
     228:	e7c4      	b.n	1b4 <i2c_slave_init+0xb0>
		pad1 = _sercom_get_default_pad(sercom_hw, 1);
     22a:	2101      	movs	r1, #1
     22c:	0020      	movs	r0, r4
     22e:	4b0c      	ldr	r3, [pc, #48]	; (260 <i2c_slave_init+0x15c>)
     230:	4798      	blx	r3
     232:	0005      	movs	r5, r0
     234:	e7ca      	b.n	1cc <i2c_slave_init+0xc8>
     236:	46c0      	nop			; (mov r8, r8)
     238:	000009e9 	.word	0x000009e9
     23c:	40000400 	.word	0x40000400
     240:	00001895 	.word	0x00001895
     244:	00001809 	.word	0x00001809
     248:	00000825 	.word	0x00000825
     24c:	000002d1 	.word	0x000002d1
     250:	000011d1 	.word	0x000011d1
     254:	20000420 	.word	0x20000420
     258:	0000198d 	.word	0x0000198d
     25c:	41002000 	.word	0x41002000
     260:	00000871 	.word	0x00000871

00000264 <i2c_slave_register_callback>:
 */
void i2c_slave_register_callback(
		struct i2c_slave_module *const module,
		i2c_slave_callback_t callback,
		enum i2c_slave_callback callback_type)
{
     264:	b510      	push	{r4, lr}
	Assert(module);
	Assert(module->hw);
	Assert(callback);

	/* Register callback. */
	module->callbacks[callback_type] = callback;
     266:	1c93      	adds	r3, r2, #2
     268:	009b      	lsls	r3, r3, #2
     26a:	18c3      	adds	r3, r0, r3
     26c:	6059      	str	r1, [r3, #4]

	/* Set corresponding bit to set callback as initiated. */
	module->registered_callback |= (1 << callback_type);
     26e:	2424      	movs	r4, #36	; 0x24
     270:	5d03      	ldrb	r3, [r0, r4]
     272:	2101      	movs	r1, #1
     274:	4091      	lsls	r1, r2
     276:	430b      	orrs	r3, r1
     278:	b2db      	uxtb	r3, r3
     27a:	5503      	strb	r3, [r0, r4]
}
     27c:	bd10      	pop	{r4, pc}

0000027e <i2c_slave_read_packet_job>:
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	/* Check if the I2C module is busy doing async operation. */
	if (module->buffer_remaining > 0) {
     27e:	8d02      	ldrh	r2, [r0, #40]	; 0x28
		return STATUS_BUSY;
     280:	2305      	movs	r3, #5
	if (module->buffer_remaining > 0) {
     282:	2a00      	cmp	r2, #0
     284:	d001      	beq.n	28a <i2c_slave_read_packet_job+0xc>
	i2c_hw->INTENSET.reg = SERCOM_I2CS_INTFLAG_AMATCH |
			SERCOM_I2CS_INTFLAG_DRDY | SERCOM_I2CS_INTFLAG_PREC;

	/* Read will begin when master initiates the transfer */
	return STATUS_OK;
}
     286:	0018      	movs	r0, r3
     288:	4770      	bx	lr
	module->buffer           = packet->data;
     28a:	684b      	ldr	r3, [r1, #4]
     28c:	62c3      	str	r3, [r0, #44]	; 0x2c
	module->buffer_remaining = packet->data_length;
     28e:	880b      	ldrh	r3, [r1, #0]
     290:	8503      	strh	r3, [r0, #40]	; 0x28
	module->buffer_length    = packet->data_length;
     292:	880b      	ldrh	r3, [r1, #0]
     294:	84c3      	strh	r3, [r0, #38]	; 0x26
	module->status           = STATUS_BUSY;
     296:	3205      	adds	r2, #5
     298:	2331      	movs	r3, #49	; 0x31
     29a:	54c2      	strb	r2, [r0, r3]
	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
     29c:	6803      	ldr	r3, [r0, #0]
	i2c_hw->INTENSET.reg = SERCOM_I2CS_INTFLAG_AMATCH |
     29e:	3202      	adds	r2, #2
     2a0:	735a      	strb	r2, [r3, #13]
	return STATUS_OK;
     2a2:	2300      	movs	r3, #0
     2a4:	e7ef      	b.n	286 <i2c_slave_read_packet_job+0x8>

000002a6 <i2c_slave_write_packet_job>:
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	/* Check if the I2C module is busy doing async operation. */
	if (module->buffer_remaining > 0) {
     2a6:	8d02      	ldrh	r2, [r0, #40]	; 0x28
		return STATUS_BUSY;
     2a8:	2305      	movs	r3, #5
	if (module->buffer_remaining > 0) {
     2aa:	2a00      	cmp	r2, #0
     2ac:	d001      	beq.n	2b2 <i2c_slave_write_packet_job+0xc>
	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
	i2c_hw->INTENSET.reg = SERCOM_I2CS_INTFLAG_AMATCH |
			SERCOM_I2CS_INTFLAG_DRDY | SERCOM_I2CS_INTFLAG_PREC;

	return STATUS_OK;
}
     2ae:	0018      	movs	r0, r3
     2b0:	4770      	bx	lr
	module->buffer           = packet->data;
     2b2:	684b      	ldr	r3, [r1, #4]
     2b4:	62c3      	str	r3, [r0, #44]	; 0x2c
	module->buffer_remaining = packet->data_length;
     2b6:	880b      	ldrh	r3, [r1, #0]
     2b8:	8503      	strh	r3, [r0, #40]	; 0x28
	module->buffer_length    = packet->data_length;
     2ba:	880b      	ldrh	r3, [r1, #0]
     2bc:	84c3      	strh	r3, [r0, #38]	; 0x26
	module->status           = STATUS_BUSY;
     2be:	3205      	adds	r2, #5
     2c0:	2331      	movs	r3, #49	; 0x31
     2c2:	54c2      	strb	r2, [r0, r3]
	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
     2c4:	6803      	ldr	r3, [r0, #0]
	i2c_hw->INTENSET.reg = SERCOM_I2CS_INTFLAG_AMATCH |
     2c6:	3202      	adds	r2, #2
     2c8:	735a      	strb	r2, [r3, #13]
	return STATUS_OK;
     2ca:	2300      	movs	r3, #0
     2cc:	e7ef      	b.n	2ae <i2c_slave_write_packet_job+0x8>
	...

000002d0 <_i2c_slave_interrupt_handler>:
 *
 * \param[in] instance Sercom instance that triggered the interrupt
 */
void _i2c_slave_interrupt_handler(
		uint8_t instance)
{
     2d0:	b570      	push	{r4, r5, r6, lr}
	/* Get software module for callback handling. */
	struct i2c_slave_module *module =
     2d2:	0080      	lsls	r0, r0, #2
     2d4:	4b9a      	ldr	r3, [pc, #616]	; (540 <_i2c_slave_interrupt_handler+0x270>)
     2d6:	58c4      	ldr	r4, [r0, r3]
			(struct i2c_slave_module*)_sercom_instances[instance];

	Assert(module);

	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
     2d8:	6825      	ldr	r5, [r4, #0]

	/* Combine callback registered and enabled masks. */
	uint8_t callback_mask =
			module->enabled_callback & module->registered_callback;
     2da:	2325      	movs	r3, #37	; 0x25
     2dc:	5ce3      	ldrb	r3, [r4, r3]
     2de:	2224      	movs	r2, #36	; 0x24
     2e0:	5ca6      	ldrb	r6, [r4, r2]
	uint8_t callback_mask =
     2e2:	401e      	ands	r6, r3


	if (i2c_hw->INTFLAG.reg & SERCOM_I2CS_INTFLAG_AMATCH) {
     2e4:	7bab      	ldrb	r3, [r5, #14]
     2e6:	079b      	lsls	r3, r3, #30
     2e8:	d400      	bmi.n	2ec <_i2c_slave_interrupt_handler+0x1c>
     2ea:	e095      	b.n	418 <_i2c_slave_interrupt_handler+0x148>
	/* Address match */
		/* Check if last transfer is done - repeated start */
		if (module->buffer_length != module->buffer_remaining &&
     2ec:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
     2ee:	b29b      	uxth	r3, r3
     2f0:	8d22      	ldrh	r2, [r4, #40]	; 0x28
     2f2:	4293      	cmp	r3, r2
     2f4:	d00d      	beq.n	312 <_i2c_slave_interrupt_handler+0x42>
				module->transfer_direction == I2C_TRANSFER_WRITE) {
     2f6:	2330      	movs	r3, #48	; 0x30
     2f8:	5ce3      	ldrb	r3, [r4, r3]
		if (module->buffer_length != module->buffer_remaining &&
     2fa:	2b00      	cmp	r3, #0
     2fc:	d109      	bne.n	312 <_i2c_slave_interrupt_handler+0x42>

			module->status = STATUS_OK;
     2fe:	2231      	movs	r2, #49	; 0x31
     300:	54a3      	strb	r3, [r4, r2]
			module->buffer_length = 0;
     302:	84e3      	strh	r3, [r4, #38]	; 0x26
			module->buffer_remaining = 0;
     304:	8523      	strh	r3, [r4, #40]	; 0x28

			if ((callback_mask & (1 << I2C_SLAVE_CALLBACK_READ_COMPLETE))) {
     306:	07b3      	lsls	r3, r6, #30
     308:	d50b      	bpl.n	322 <_i2c_slave_interrupt_handler+0x52>
				module->callbacks[I2C_SLAVE_CALLBACK_READ_COMPLETE](module);
     30a:	6923      	ldr	r3, [r4, #16]
     30c:	0020      	movs	r0, r4
     30e:	4798      	blx	r3
     310:	e007      	b.n	322 <_i2c_slave_interrupt_handler+0x52>
			}
		} else if (module->buffer_length != module->buffer_remaining &&
     312:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
     314:	b29b      	uxth	r3, r3
     316:	429a      	cmp	r2, r3
     318:	d003      	beq.n	322 <_i2c_slave_interrupt_handler+0x52>
				module->transfer_direction == I2C_TRANSFER_READ) {
     31a:	2330      	movs	r3, #48	; 0x30
     31c:	5ce3      	ldrb	r3, [r4, r3]
		} else if (module->buffer_length != module->buffer_remaining &&
     31e:	2b01      	cmp	r3, #1
     320:	d022      	beq.n	368 <_i2c_slave_interrupt_handler+0x98>
			if ((callback_mask & (1 << I2C_SLAVE_CALLBACK_WRITE_COMPLETE))) {
				module->callbacks[I2C_SLAVE_CALLBACK_WRITE_COMPLETE](module);
			}
		}

		if (i2c_hw->STATUS.reg & (SERCOM_I2CS_STATUS_BUSERR |
     322:	8a2a      	ldrh	r2, [r5, #16]
     324:	2343      	movs	r3, #67	; 0x43
     326:	421a      	tst	r2, r3
     328:	d004      	beq.n	334 <_i2c_slave_interrupt_handler+0x64>
				SERCOM_I2CS_STATUS_COLL | SERCOM_I2CS_STATUS_LOWTOUT)) {
			/* An error occurred in last packet transfer */
			module->status = STATUS_ERR_IO;
     32a:	2210      	movs	r2, #16
     32c:	3b12      	subs	r3, #18
     32e:	54e2      	strb	r2, [r4, r3]

			if ((callback_mask & (1 << I2C_SLAVE_CALLBACK_ERROR_LAST_TRANSFER))) {
     330:	06b3      	lsls	r3, r6, #26
     332:	d424      	bmi.n	37e <_i2c_slave_interrupt_handler+0xae>
				module->callbacks[I2C_SLAVE_CALLBACK_ERROR_LAST_TRANSFER](module);
			}
		}
		if (module->nack_on_address) {
     334:	7a23      	ldrb	r3, [r4, #8]
     336:	2b00      	cmp	r3, #0
     338:	d125      	bne.n	386 <_i2c_slave_interrupt_handler+0xb6>
			/* NACK address, workaround 13574 */
			_i2c_slave_set_ctrlb_ackact(module, false);
		} else if (i2c_hw->STATUS.reg & SERCOM_I2CS_STATUS_DIR) {
     33a:	8a2b      	ldrh	r3, [r5, #16]
     33c:	071b      	lsls	r3, r3, #28
     33e:	d54a      	bpl.n	3d6 <_i2c_slave_interrupt_handler+0x106>
			/* Set transfer direction in module instance */
			module->transfer_direction = I2C_TRANSFER_READ;
     340:	2201      	movs	r2, #1
     342:	2330      	movs	r3, #48	; 0x30
     344:	54e2      	strb	r2, [r4, r3]

			/* Read request from master */
			if (callback_mask & (1 << I2C_SLAVE_CALLBACK_READ_REQUEST)) {
     346:	0773      	lsls	r3, r6, #29
     348:	d438      	bmi.n	3bc <_i2c_slave_interrupt_handler+0xec>
				module->callbacks[I2C_SLAVE_CALLBACK_READ_REQUEST](module);
			}

			if (module->buffer_length == 0) {
     34a:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
     34c:	b29b      	uxth	r3, r3
     34e:	2b00      	cmp	r3, #0
     350:	d138      	bne.n	3c4 <_i2c_slave_interrupt_handler+0xf4>
	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
     352:	6825      	ldr	r5, [r4, #0]
	cpu_irq_enter_critical();
     354:	4b7b      	ldr	r3, [pc, #492]	; (544 <_i2c_slave_interrupt_handler+0x274>)
     356:	4798      	blx	r3
	i2c_hw->STATUS.reg = 0;
     358:	2300      	movs	r3, #0
     35a:	822b      	strh	r3, [r5, #16]
		i2c_hw->CTRLB.reg = SERCOM_I2CS_CTRLB_ACKACT;
     35c:	2380      	movs	r3, #128	; 0x80
     35e:	02db      	lsls	r3, r3, #11
     360:	606b      	str	r3, [r5, #4]
	cpu_irq_leave_critical();
     362:	4b79      	ldr	r3, [pc, #484]	; (548 <_i2c_slave_interrupt_handler+0x278>)
     364:	4798      	blx	r3
     366:	e018      	b.n	39a <_i2c_slave_interrupt_handler+0xca>
			module->status = STATUS_OK;
     368:	2300      	movs	r3, #0
     36a:	2231      	movs	r2, #49	; 0x31
     36c:	54a3      	strb	r3, [r4, r2]
			module->buffer_length = 0;
     36e:	84e3      	strh	r3, [r4, #38]	; 0x26
			module->buffer_remaining = 0;
     370:	8523      	strh	r3, [r4, #40]	; 0x28
			if ((callback_mask & (1 << I2C_SLAVE_CALLBACK_WRITE_COMPLETE))) {
     372:	07f3      	lsls	r3, r6, #31
     374:	d5d5      	bpl.n	322 <_i2c_slave_interrupt_handler+0x52>
				module->callbacks[I2C_SLAVE_CALLBACK_WRITE_COMPLETE](module);
     376:	68e3      	ldr	r3, [r4, #12]
     378:	0020      	movs	r0, r4
     37a:	4798      	blx	r3
     37c:	e7d1      	b.n	322 <_i2c_slave_interrupt_handler+0x52>
				module->callbacks[I2C_SLAVE_CALLBACK_ERROR_LAST_TRANSFER](module);
     37e:	6a23      	ldr	r3, [r4, #32]
     380:	0020      	movs	r0, r4
     382:	4798      	blx	r3
     384:	e7d6      	b.n	334 <_i2c_slave_interrupt_handler+0x64>
	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
     386:	6825      	ldr	r5, [r4, #0]
	cpu_irq_enter_critical();
     388:	4b6e      	ldr	r3, [pc, #440]	; (544 <_i2c_slave_interrupt_handler+0x274>)
     38a:	4798      	blx	r3
	i2c_hw->STATUS.reg = 0;
     38c:	2300      	movs	r3, #0
     38e:	822b      	strh	r3, [r5, #16]
		i2c_hw->CTRLB.reg = SERCOM_I2CS_CTRLB_ACKACT;
     390:	2380      	movs	r3, #128	; 0x80
     392:	02db      	lsls	r3, r3, #11
     394:	606b      	str	r3, [r5, #4]
	cpu_irq_leave_critical();
     396:	4b6c      	ldr	r3, [pc, #432]	; (548 <_i2c_slave_interrupt_handler+0x278>)
     398:	4798      	blx	r3
		struct i2c_slave_module *const module)
{
	Assert(module);
	Assert(module->hw);

	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
     39a:	6823      	ldr	r3, [r4, #0]
	/*
	 * Below code instead i2c_hw->CTRLB.reg = SERCOM_I2CS_CTRLB_CMD(0x3);
	 * CMD=0x3 clears all interrupts, so to keep the result similar
	 * PREC is cleared if it was set
	 */
	if (i2c_hw->INTFLAG.bit.PREC) {
     39c:	7b9a      	ldrb	r2, [r3, #14]
     39e:	07d2      	lsls	r2, r2, #31
     3a0:	d501      	bpl.n	3a6 <_i2c_slave_interrupt_handler+0xd6>
		i2c_hw->INTFLAG.reg = SERCOM_I2CS_INTFLAG_PREC;
     3a2:	2201      	movs	r2, #1
     3a4:	739a      	strb	r2, [r3, #14]
	}
	i2c_hw->INTFLAG.reg = SERCOM_I2CS_INTFLAG_AMATCH;
     3a6:	2202      	movs	r2, #2
     3a8:	739a      	strb	r2, [r3, #14]
	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
     3aa:	6824      	ldr	r4, [r4, #0]
	cpu_irq_enter_critical();
     3ac:	4b65      	ldr	r3, [pc, #404]	; (544 <_i2c_slave_interrupt_handler+0x274>)
     3ae:	4798      	blx	r3
	i2c_hw->STATUS.reg = 0;
     3b0:	2300      	movs	r3, #0
     3b2:	8223      	strh	r3, [r4, #16]
		i2c_hw->CTRLB.reg = 0;
     3b4:	6063      	str	r3, [r4, #4]
	cpu_irq_leave_critical();
     3b6:	4b64      	ldr	r3, [pc, #400]	; (548 <_i2c_slave_interrupt_handler+0x278>)
     3b8:	4798      	blx	r3
			} else {
				_i2c_slave_write(module);
			}
		}
	}
}
     3ba:	bd70      	pop	{r4, r5, r6, pc}
				module->callbacks[I2C_SLAVE_CALLBACK_READ_REQUEST](module);
     3bc:	6963      	ldr	r3, [r4, #20]
     3be:	0020      	movs	r0, r4
     3c0:	4798      	blx	r3
     3c2:	e7c2      	b.n	34a <_i2c_slave_interrupt_handler+0x7a>
	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
     3c4:	6825      	ldr	r5, [r4, #0]
	cpu_irq_enter_critical();
     3c6:	4b5f      	ldr	r3, [pc, #380]	; (544 <_i2c_slave_interrupt_handler+0x274>)
     3c8:	4798      	blx	r3
	i2c_hw->STATUS.reg = 0;
     3ca:	2300      	movs	r3, #0
     3cc:	822b      	strh	r3, [r5, #16]
		i2c_hw->CTRLB.reg = 0;
     3ce:	606b      	str	r3, [r5, #4]
	cpu_irq_leave_critical();
     3d0:	4b5d      	ldr	r3, [pc, #372]	; (548 <_i2c_slave_interrupt_handler+0x278>)
     3d2:	4798      	blx	r3
     3d4:	e7e1      	b.n	39a <_i2c_slave_interrupt_handler+0xca>
			module->transfer_direction = I2C_TRANSFER_WRITE;
     3d6:	2200      	movs	r2, #0
     3d8:	2330      	movs	r3, #48	; 0x30
     3da:	54e2      	strb	r2, [r4, r3]
			if (callback_mask & (1 << I2C_SLAVE_CALLBACK_WRITE_REQUEST)) {
     3dc:	0733      	lsls	r3, r6, #28
     3de:	d40e      	bmi.n	3fe <_i2c_slave_interrupt_handler+0x12e>
			if (module->buffer_length == 0) {
     3e0:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
     3e2:	b29b      	uxth	r3, r3
     3e4:	2b00      	cmp	r3, #0
     3e6:	d10e      	bne.n	406 <_i2c_slave_interrupt_handler+0x136>
	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
     3e8:	6825      	ldr	r5, [r4, #0]
	cpu_irq_enter_critical();
     3ea:	4b56      	ldr	r3, [pc, #344]	; (544 <_i2c_slave_interrupt_handler+0x274>)
     3ec:	4798      	blx	r3
	i2c_hw->STATUS.reg = 0;
     3ee:	2300      	movs	r3, #0
     3f0:	822b      	strh	r3, [r5, #16]
		i2c_hw->CTRLB.reg = SERCOM_I2CS_CTRLB_ACKACT;
     3f2:	2380      	movs	r3, #128	; 0x80
     3f4:	02db      	lsls	r3, r3, #11
     3f6:	606b      	str	r3, [r5, #4]
	cpu_irq_leave_critical();
     3f8:	4b53      	ldr	r3, [pc, #332]	; (548 <_i2c_slave_interrupt_handler+0x278>)
     3fa:	4798      	blx	r3
     3fc:	e7cd      	b.n	39a <_i2c_slave_interrupt_handler+0xca>
				module->callbacks[I2C_SLAVE_CALLBACK_WRITE_REQUEST](module);
     3fe:	69a3      	ldr	r3, [r4, #24]
     400:	0020      	movs	r0, r4
     402:	4798      	blx	r3
     404:	e7ec      	b.n	3e0 <_i2c_slave_interrupt_handler+0x110>
	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
     406:	6825      	ldr	r5, [r4, #0]
	cpu_irq_enter_critical();
     408:	4b4e      	ldr	r3, [pc, #312]	; (544 <_i2c_slave_interrupt_handler+0x274>)
     40a:	4798      	blx	r3
	i2c_hw->STATUS.reg = 0;
     40c:	2300      	movs	r3, #0
     40e:	822b      	strh	r3, [r5, #16]
		i2c_hw->CTRLB.reg = 0;
     410:	606b      	str	r3, [r5, #4]
	cpu_irq_leave_critical();
     412:	4b4d      	ldr	r3, [pc, #308]	; (548 <_i2c_slave_interrupt_handler+0x278>)
     414:	4798      	blx	r3
     416:	e7c0      	b.n	39a <_i2c_slave_interrupt_handler+0xca>
	} else if (i2c_hw->INTFLAG.reg & SERCOM_I2CS_INTFLAG_PREC) {
     418:	7bab      	ldrb	r3, [r5, #14]
     41a:	07db      	lsls	r3, r3, #31
     41c:	d52e      	bpl.n	47c <_i2c_slave_interrupt_handler+0x1ac>
		i2c_hw->INTFLAG.reg = SERCOM_I2CS_INTFLAG_PREC;
     41e:	2301      	movs	r3, #1
     420:	73ab      	strb	r3, [r5, #14]
		i2c_hw->INTENCLR.reg = SERCOM_I2CS_INTFLAG_PREC | SERCOM_I2CS_INTFLAG_DRDY;
     422:	3304      	adds	r3, #4
     424:	732b      	strb	r3, [r5, #12]
		if (!((module->enabled_callback & (1 << I2C_SLAVE_CALLBACK_READ_REQUEST))
     426:	3320      	adds	r3, #32
     428:	5ce3      	ldrb	r3, [r4, r3]
     42a:	075b      	lsls	r3, r3, #29
     42c:	d405      	bmi.n	43a <_i2c_slave_interrupt_handler+0x16a>
				|| (module->enabled_callback & (1 << I2C_SLAVE_CALLBACK_WRITE_REQUEST)))) {
     42e:	2325      	movs	r3, #37	; 0x25
     430:	5ce3      	ldrb	r3, [r4, r3]
		if (!((module->enabled_callback & (1 << I2C_SLAVE_CALLBACK_READ_REQUEST))
     432:	071b      	lsls	r3, r3, #28
     434:	d401      	bmi.n	43a <_i2c_slave_interrupt_handler+0x16a>
			i2c_hw->INTENCLR.reg = SERCOM_I2CS_INTFLAG_AMATCH;
     436:	2302      	movs	r3, #2
     438:	732b      	strb	r3, [r5, #12]
		if (!(module->status == STATUS_ERR_OVERFLOW || module->status == STATUS_ERR_IO)) {
     43a:	2331      	movs	r3, #49	; 0x31
     43c:	5ce3      	ldrb	r3, [r4, r3]
     43e:	2b1e      	cmp	r3, #30
     440:	d0bb      	beq.n	3ba <_i2c_slave_interrupt_handler+0xea>
     442:	2331      	movs	r3, #49	; 0x31
     444:	5ce3      	ldrb	r3, [r4, r3]
     446:	2b10      	cmp	r3, #16
     448:	d0b7      	beq.n	3ba <_i2c_slave_interrupt_handler+0xea>
			module->status = STATUS_OK;
     44a:	2300      	movs	r3, #0
     44c:	2231      	movs	r2, #49	; 0x31
     44e:	54a3      	strb	r3, [r4, r2]
			module->buffer_length = 0;
     450:	84e3      	strh	r3, [r4, #38]	; 0x26
			module->buffer_remaining = 0;
     452:	8523      	strh	r3, [r4, #40]	; 0x28
			if ((callback_mask & (1 << I2C_SLAVE_CALLBACK_READ_COMPLETE))
     454:	07b3      	lsls	r3, r6, #30
     456:	d503      	bpl.n	460 <_i2c_slave_interrupt_handler+0x190>
					&& (module->transfer_direction == I2C_TRANSFER_WRITE)) {
     458:	2330      	movs	r3, #48	; 0x30
     45a:	5ce3      	ldrb	r3, [r4, r3]
     45c:	2b00      	cmp	r3, #0
     45e:	d009      	beq.n	474 <_i2c_slave_interrupt_handler+0x1a4>
			} else if ((callback_mask & (1 << I2C_SLAVE_CALLBACK_WRITE_COMPLETE))
     460:	07f3      	lsls	r3, r6, #31
     462:	d5aa      	bpl.n	3ba <_i2c_slave_interrupt_handler+0xea>
					&& (module->transfer_direction == I2C_TRANSFER_READ)) {
     464:	2330      	movs	r3, #48	; 0x30
     466:	5ce3      	ldrb	r3, [r4, r3]
     468:	2b01      	cmp	r3, #1
     46a:	d1a6      	bne.n	3ba <_i2c_slave_interrupt_handler+0xea>
				module->callbacks[I2C_SLAVE_CALLBACK_WRITE_COMPLETE](module);
     46c:	68e3      	ldr	r3, [r4, #12]
     46e:	0020      	movs	r0, r4
     470:	4798      	blx	r3
     472:	e7a2      	b.n	3ba <_i2c_slave_interrupt_handler+0xea>
				module->callbacks[I2C_SLAVE_CALLBACK_READ_COMPLETE](module);
     474:	6923      	ldr	r3, [r4, #16]
     476:	0020      	movs	r0, r4
     478:	4798      	blx	r3
     47a:	e79e      	b.n	3ba <_i2c_slave_interrupt_handler+0xea>
	} else if (i2c_hw->INTFLAG.reg & SERCOM_I2CS_INTFLAG_DRDY) {
     47c:	7bab      	ldrb	r3, [r5, #14]
     47e:	075b      	lsls	r3, r3, #29
     480:	d59b      	bpl.n	3ba <_i2c_slave_interrupt_handler+0xea>
		if (module->buffer_remaining <= 0 ||
     482:	8d23      	ldrh	r3, [r4, #40]	; 0x28
     484:	2b00      	cmp	r3, #0
     486:	d01d      	beq.n	4c4 <_i2c_slave_interrupt_handler+0x1f4>
				(module->transfer_direction == I2C_TRANSFER_READ &&
     488:	2230      	movs	r2, #48	; 0x30
     48a:	5ca2      	ldrb	r2, [r4, r2]
		if (module->buffer_remaining <= 0 ||
     48c:	2a01      	cmp	r2, #1
     48e:	d012      	beq.n	4b6 <_i2c_slave_interrupt_handler+0x1e6>
		} else if (module->buffer_length > 0 && module->buffer_remaining > 0) {
     490:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
     492:	b29b      	uxth	r3, r3
     494:	2b00      	cmp	r3, #0
     496:	d100      	bne.n	49a <_i2c_slave_interrupt_handler+0x1ca>
     498:	e78f      	b.n	3ba <_i2c_slave_interrupt_handler+0xea>
			if (module->transfer_direction == I2C_TRANSFER_WRITE) {
     49a:	2330      	movs	r3, #48	; 0x30
     49c:	5ce3      	ldrb	r3, [r4, r3]
     49e:	2b00      	cmp	r3, #0
     4a0:	d043      	beq.n	52a <_i2c_slave_interrupt_handler+0x25a>
	i2c_hw->DATA.reg = *(module->buffer++);
     4a2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
     4a4:	1c5a      	adds	r2, r3, #1
     4a6:	62e2      	str	r2, [r4, #44]	; 0x2c
     4a8:	781b      	ldrb	r3, [r3, #0]
     4aa:	b2db      	uxtb	r3, r3
     4ac:	762b      	strb	r3, [r5, #24]
	module->buffer_remaining--;
     4ae:	8d23      	ldrh	r3, [r4, #40]	; 0x28
     4b0:	3b01      	subs	r3, #1
     4b2:	8523      	strh	r3, [r4, #40]	; 0x28
}
     4b4:	e781      	b.n	3ba <_i2c_slave_interrupt_handler+0xea>
				(module->buffer_length > module->buffer_remaining) &&
     4b6:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
     4b8:	b292      	uxth	r2, r2
				(module->transfer_direction == I2C_TRANSFER_READ &&
     4ba:	4293      	cmp	r3, r2
     4bc:	d2e8      	bcs.n	490 <_i2c_slave_interrupt_handler+0x1c0>
				(i2c_hw->STATUS.reg & SERCOM_I2CS_STATUS_RXNACK))) {
     4be:	8a2b      	ldrh	r3, [r5, #16]
				(module->buffer_length > module->buffer_remaining) &&
     4c0:	075b      	lsls	r3, r3, #29
     4c2:	d5e5      	bpl.n	490 <_i2c_slave_interrupt_handler+0x1c0>
			module->buffer_remaining = 0;
     4c4:	2300      	movs	r3, #0
     4c6:	8523      	strh	r3, [r4, #40]	; 0x28
			module->buffer_length = 0;
     4c8:	84e3      	strh	r3, [r4, #38]	; 0x26
			if (module->transfer_direction == I2C_TRANSFER_WRITE) {
     4ca:	3330      	adds	r3, #48	; 0x30
     4cc:	5ce3      	ldrb	r3, [r4, r3]
     4ce:	2b00      	cmp	r3, #0
     4d0:	d117      	bne.n	502 <_i2c_slave_interrupt_handler+0x232>
	cpu_irq_enter_critical();
     4d2:	4b1c      	ldr	r3, [pc, #112]	; (544 <_i2c_slave_interrupt_handler+0x274>)
     4d4:	4798      	blx	r3
	i2c_hw->STATUS.reg = 0;
     4d6:	2300      	movs	r3, #0
     4d8:	822b      	strh	r3, [r5, #16]
		i2c_hw->CTRLB.reg = SERCOM_I2CS_CTRLB_ACKACT;
     4da:	2380      	movs	r3, #128	; 0x80
     4dc:	02db      	lsls	r3, r3, #11
     4de:	606b      	str	r3, [r5, #4]
	cpu_irq_leave_critical();
     4e0:	4b19      	ldr	r3, [pc, #100]	; (548 <_i2c_slave_interrupt_handler+0x278>)
     4e2:	4798      	blx	r3
				i2c_hw->CTRLB.reg |= SERCOM_I2CS_CTRLB_CMD(0x2);
     4e4:	686a      	ldr	r2, [r5, #4]
     4e6:	2380      	movs	r3, #128	; 0x80
     4e8:	029b      	lsls	r3, r3, #10
     4ea:	4313      	orrs	r3, r2
     4ec:	606b      	str	r3, [r5, #4]
				module->status = STATUS_ERR_OVERFLOW;
     4ee:	221e      	movs	r2, #30
     4f0:	2331      	movs	r3, #49	; 0x31
     4f2:	54e2      	strb	r2, [r4, r3]
				if (callback_mask & (1 << I2C_SLAVE_CALLBACK_ERROR)) {
     4f4:	06f3      	lsls	r3, r6, #27
     4f6:	d400      	bmi.n	4fa <_i2c_slave_interrupt_handler+0x22a>
     4f8:	e75f      	b.n	3ba <_i2c_slave_interrupt_handler+0xea>
					module->callbacks[I2C_SLAVE_CALLBACK_ERROR](module);
     4fa:	69e3      	ldr	r3, [r4, #28]
     4fc:	0020      	movs	r0, r4
     4fe:	4798      	blx	r3
     500:	e75b      	b.n	3ba <_i2c_slave_interrupt_handler+0xea>
	cpu_irq_enter_critical();
     502:	4b10      	ldr	r3, [pc, #64]	; (544 <_i2c_slave_interrupt_handler+0x274>)
     504:	4798      	blx	r3
	i2c_hw->STATUS.reg = 0;
     506:	2300      	movs	r3, #0
     508:	822b      	strh	r3, [r5, #16]
		i2c_hw->CTRLB.reg = SERCOM_I2CS_CTRLB_ACKACT;
     50a:	2380      	movs	r3, #128	; 0x80
     50c:	02db      	lsls	r3, r3, #11
     50e:	606b      	str	r3, [r5, #4]
	cpu_irq_leave_critical();
     510:	4b0d      	ldr	r3, [pc, #52]	; (548 <_i2c_slave_interrupt_handler+0x278>)
     512:	4798      	blx	r3
				i2c_hw->CTRLB.reg |= SERCOM_I2CS_CTRLB_CMD(0x2);
     514:	686a      	ldr	r2, [r5, #4]
     516:	2380      	movs	r3, #128	; 0x80
     518:	029b      	lsls	r3, r3, #10
     51a:	4313      	orrs	r3, r2
     51c:	606b      	str	r3, [r5, #4]
				module->status = STATUS_OK;
     51e:	2331      	movs	r3, #49	; 0x31
     520:	2200      	movs	r2, #0
     522:	54e2      	strb	r2, [r4, r3]
				i2c_hw->INTENCLR.reg = SERCOM_I2CS_INTFLAG_DRDY;
     524:	3b2d      	subs	r3, #45	; 0x2d
     526:	732b      	strb	r3, [r5, #12]
     528:	e747      	b.n	3ba <_i2c_slave_interrupt_handler+0xea>
	*(module->buffer++) = i2c_hw->DATA.reg;
     52a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
     52c:	1c53      	adds	r3, r2, #1
     52e:	62e3      	str	r3, [r4, #44]	; 0x2c
     530:	7e2b      	ldrb	r3, [r5, #24]
     532:	b2db      	uxtb	r3, r3
     534:	7013      	strb	r3, [r2, #0]
	module->buffer_remaining--;
     536:	8d23      	ldrh	r3, [r4, #40]	; 0x28
     538:	3b01      	subs	r3, #1
     53a:	8523      	strh	r3, [r4, #40]	; 0x28
     53c:	e73d      	b.n	3ba <_i2c_slave_interrupt_handler+0xea>
     53e:	46c0      	nop			; (mov r8, r8)
     540:	20000420 	.word	0x20000420
     544:	0000140d 	.word	0x0000140d
     548:	0000144d 	.word	0x0000144d

0000054c <WDT_Handler>:
	}
}

/** Handler for the WDT hardware module interrupt. */
void WDT_Handler(void)
{
     54c:	b510      	push	{r4, lr}
 */
static inline void wdt_clear_early_warning(void)
{
	Wdt *const WDT_module = WDT;

	WDT_module->INTFLAG.reg = WDT_INTFLAG_EW;
     54e:	2201      	movs	r2, #1
     550:	4b03      	ldr	r3, [pc, #12]	; (560 <WDT_Handler+0x14>)
     552:	719a      	strb	r2, [r3, #6]
	wdt_clear_early_warning();

	if (wdt_early_warning_callback) {
     554:	4b03      	ldr	r3, [pc, #12]	; (564 <WDT_Handler+0x18>)
     556:	681b      	ldr	r3, [r3, #0]
     558:	2b00      	cmp	r3, #0
     55a:	d000      	beq.n	55e <WDT_Handler+0x12>
		wdt_early_warning_callback();
     55c:	4798      	blx	r3
	}
}
     55e:	bd10      	pop	{r4, pc}
     560:	40001000 	.word	0x40001000
     564:	20000098 	.word	0x20000098

00000568 <_tc_interrupt_handler>:
 * \param[in]  instance  ID of the TC instance calling the interrupt
 *                       handler
 */
void _tc_interrupt_handler(
		uint8_t instance)
{
     568:	b570      	push	{r4, r5, r6, lr}
	/* Temporary variable */
	uint8_t interrupt_and_callback_status_mask;

	/* Get device instance from the look-up table */
	struct tc_module *module
     56a:	0080      	lsls	r0, r0, #2
     56c:	4b16      	ldr	r3, [pc, #88]	; (5c8 <_tc_interrupt_handler+0x60>)
     56e:	58c4      	ldr	r4, [r0, r3]
			= (struct tc_module *)_tc_instances[instance];

	/* Read and mask interrupt flag register */
	interrupt_and_callback_status_mask = module->hw->COUNT8.INTFLAG.reg &
     570:	6823      	ldr	r3, [r4, #0]
     572:	7b9d      	ldrb	r5, [r3, #14]
     574:	7e22      	ldrb	r2, [r4, #24]
     576:	7e63      	ldrb	r3, [r4, #25]
     578:	4013      	ands	r3, r2
     57a:	401d      	ands	r5, r3
			module->register_callback_mask &
			module->enable_callback_mask;

	/* Check if an Overflow interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_OVF) {
     57c:	07eb      	lsls	r3, r5, #31
     57e:	d406      	bmi.n	58e <_tc_interrupt_handler+0x26>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
	}

	/* Check if an Error interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_ERR) {
     580:	07ab      	lsls	r3, r5, #30
     582:	d40b      	bmi.n	59c <_tc_interrupt_handler+0x34>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
	}

	/* Check if an Match/Capture Channel 0 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(1)) {
     584:	06eb      	lsls	r3, r5, #27
     586:	d410      	bmi.n	5aa <_tc_interrupt_handler+0x42>
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
	}

	/* Check if an Match/Capture Channel 1 interrupt has occurred */
	if (interrupt_and_callback_status_mask & TC_INTFLAG_MC(2)) {
     588:	06ab      	lsls	r3, r5, #26
     58a:	d415      	bmi.n	5b8 <_tc_interrupt_handler+0x50>
		/* Invoke registered and enabled callback function */
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
		/* Clear interrupt flag */
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
	}
}
     58c:	bd70      	pop	{r4, r5, r6, pc}
		(module->callback[TC_CALLBACK_OVERFLOW])(module);
     58e:	0020      	movs	r0, r4
     590:	68a3      	ldr	r3, [r4, #8]
     592:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_OVF;
     594:	2301      	movs	r3, #1
     596:	6822      	ldr	r2, [r4, #0]
     598:	7393      	strb	r3, [r2, #14]
     59a:	e7f1      	b.n	580 <_tc_interrupt_handler+0x18>
		(module->callback[TC_CALLBACK_ERROR])(module);
     59c:	0020      	movs	r0, r4
     59e:	68e3      	ldr	r3, [r4, #12]
     5a0:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_ERR;
     5a2:	2302      	movs	r3, #2
     5a4:	6822      	ldr	r2, [r4, #0]
     5a6:	7393      	strb	r3, [r2, #14]
     5a8:	e7ec      	b.n	584 <_tc_interrupt_handler+0x1c>
		(module->callback[TC_CALLBACK_CC_CHANNEL0])(module);
     5aa:	0020      	movs	r0, r4
     5ac:	6923      	ldr	r3, [r4, #16]
     5ae:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(1);
     5b0:	2310      	movs	r3, #16
     5b2:	6822      	ldr	r2, [r4, #0]
     5b4:	7393      	strb	r3, [r2, #14]
     5b6:	e7e7      	b.n	588 <_tc_interrupt_handler+0x20>
		(module->callback[TC_CALLBACK_CC_CHANNEL1])(module);
     5b8:	0020      	movs	r0, r4
     5ba:	6963      	ldr	r3, [r4, #20]
     5bc:	4798      	blx	r3
		module->hw->COUNT8.INTFLAG.reg = TC_INTFLAG_MC(2);
     5be:	6823      	ldr	r3, [r4, #0]
     5c0:	2220      	movs	r2, #32
     5c2:	739a      	strb	r2, [r3, #14]
}
     5c4:	e7e2      	b.n	58c <_tc_interrupt_handler+0x24>
     5c6:	46c0      	nop			; (mov r8, r8)
     5c8:	2000009c 	.word	0x2000009c

000005cc <TC0_Handler>:
	MRECURSION(TC_INST_NUM, _TC_INTERRUPT_HANDLER, TC_INST_MAX_ID)
     5cc:	b510      	push	{r4, lr}
     5ce:	2000      	movs	r0, #0
     5d0:	4b01      	ldr	r3, [pc, #4]	; (5d8 <TC0_Handler+0xc>)
     5d2:	4798      	blx	r3
     5d4:	bd10      	pop	{r4, pc}
     5d6:	46c0      	nop			; (mov r8, r8)
     5d8:	00000569 	.word	0x00000569

000005dc <TC1_Handler>:
     5dc:	b510      	push	{r4, lr}
     5de:	2001      	movs	r0, #1
     5e0:	4b01      	ldr	r3, [pc, #4]	; (5e8 <TC1_Handler+0xc>)
     5e2:	4798      	blx	r3
     5e4:	bd10      	pop	{r4, pc}
     5e6:	46c0      	nop			; (mov r8, r8)
     5e8:	00000569 	.word	0x00000569

000005ec <TC2_Handler>:
     5ec:	b510      	push	{r4, lr}
     5ee:	2002      	movs	r0, #2
     5f0:	4b01      	ldr	r3, [pc, #4]	; (5f8 <TC2_Handler+0xc>)
     5f2:	4798      	blx	r3
     5f4:	bd10      	pop	{r4, pc}
     5f6:	46c0      	nop			; (mov r8, r8)
     5f8:	00000569 	.word	0x00000569

000005fc <TC3_Handler>:
     5fc:	b510      	push	{r4, lr}
     5fe:	2003      	movs	r0, #3
     600:	4b01      	ldr	r3, [pc, #4]	; (608 <TC3_Handler+0xc>)
     602:	4798      	blx	r3
     604:	bd10      	pop	{r4, pc}
     606:	46c0      	nop			; (mov r8, r8)
     608:	00000569 	.word	0x00000569

0000060c <TC4_Handler>:
     60c:	b510      	push	{r4, lr}
     60e:	2004      	movs	r0, #4
     610:	4b01      	ldr	r3, [pc, #4]	; (618 <TC4_Handler+0xc>)
     612:	4798      	blx	r3
     614:	bd10      	pop	{r4, pc}
     616:	46c0      	nop			; (mov r8, r8)
     618:	00000569 	.word	0x00000569

0000061c <TC5_Handler>:
     61c:	b510      	push	{r4, lr}
     61e:	2005      	movs	r0, #5
     620:	4b01      	ldr	r3, [pc, #4]	; (628 <TC5_Handler+0xc>)
     622:	4798      	blx	r3
     624:	bd10      	pop	{r4, pc}
     626:	46c0      	nop			; (mov r8, r8)
     628:	00000569 	.word	0x00000569

0000062c <TC6_Handler>:
     62c:	b510      	push	{r4, lr}
     62e:	2006      	movs	r0, #6
     630:	4b01      	ldr	r3, [pc, #4]	; (638 <TC6_Handler+0xc>)
     632:	4798      	blx	r3
     634:	bd10      	pop	{r4, pc}
     636:	46c0      	nop			; (mov r8, r8)
     638:	00000569 	.word	0x00000569

0000063c <TC7_Handler>:
     63c:	b510      	push	{r4, lr}
     63e:	2007      	movs	r0, #7
     640:	4b01      	ldr	r3, [pc, #4]	; (648 <TC7_Handler+0xc>)
     642:	4798      	blx	r3
     644:	bd10      	pop	{r4, pc}
     646:	46c0      	nop			; (mov r8, r8)
     648:	00000569 	.word	0x00000569

0000064c <EVSYS_Handler>:

	return STATUS_OK;
}

void EVSYS_Handler(void)
{
     64c:	b510      	push	{r4, lr}
	struct events_hook *current_hook = _events_inst.hook_list;
     64e:	4b0b      	ldr	r3, [pc, #44]	; (67c <EVSYS_Handler+0x30>)
     650:	691c      	ldr	r4, [r3, #16]
	uint32_t flag;

	/* Synch the interrupt flag buffer with the hardware register */
	flag = EVSYS->INTFLAG.reg;
     652:	490b      	ldr	r1, [pc, #44]	; (680 <EVSYS_Handler+0x34>)
     654:	698a      	ldr	r2, [r1, #24]
	_events_inst.interrupt_flag_buffer |= flag;
     656:	6898      	ldr	r0, [r3, #8]
     658:	4302      	orrs	r2, r0
     65a:	609a      	str	r2, [r3, #8]
	/* Clear all hardware interrupt flags */
	EVSYS->INTFLAG.reg = _EVENTS_INTFLAGS_MASK;
     65c:	4b09      	ldr	r3, [pc, #36]	; (684 <EVSYS_Handler+0x38>)
     65e:	618b      	str	r3, [r1, #24]

	/* Traverse the linked list */
	while (current_hook != NULL) {
     660:	2c00      	cmp	r4, #0
     662:	d005      	beq.n	670 <EVSYS_Handler+0x24>
		current_hook->hook_func(current_hook->resource);
     664:	6820      	ldr	r0, [r4, #0]
     666:	6863      	ldr	r3, [r4, #4]
     668:	4798      	blx	r3
		current_hook = current_hook->next;
     66a:	68a4      	ldr	r4, [r4, #8]
	while (current_hook != NULL) {
     66c:	2c00      	cmp	r4, #0
     66e:	d1f9      	bne.n	664 <EVSYS_Handler+0x18>
	}

	/* Clear acknowledged interrupt sources from the interrupt flag buffer */
	flag = _events_inst.interrupt_flag_ack_buffer;
     670:	4b02      	ldr	r3, [pc, #8]	; (67c <EVSYS_Handler+0x30>)
     672:	68d9      	ldr	r1, [r3, #12]
	_events_inst.interrupt_flag_buffer &= ~flag;
     674:	689a      	ldr	r2, [r3, #8]
     676:	438a      	bics	r2, r1
     678:	609a      	str	r2, [r3, #8]
}
     67a:	bd10      	pop	{r4, pc}
     67c:	20000000 	.word	0x20000000
     680:	42000400 	.word	0x42000400
     684:	0f0fffff 	.word	0x0f0fffff

00000688 <_system_events_init>:
     688:	4a06      	ldr	r2, [pc, #24]	; (6a4 <_system_events_init+0x1c>)
     68a:	6a13      	ldr	r3, [r2, #32]
     68c:	2102      	movs	r1, #2
     68e:	430b      	orrs	r3, r1
     690:	6213      	str	r3, [r2, #32]
{
	/* Enable EVSYS register interface */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, PM_APBCMASK_EVSYS);

	/* Make sure the EVSYS module is properly reset */
	EVSYS->CTRL.reg = EVSYS_CTRL_SWRST;
     692:	2201      	movs	r2, #1
     694:	4b04      	ldr	r3, [pc, #16]	; (6a8 <_system_events_init+0x20>)
     696:	701a      	strb	r2, [r3, #0]

	while (EVSYS->CTRL.reg & EVSYS_CTRL_SWRST) {
     698:	0019      	movs	r1, r3
     69a:	780b      	ldrb	r3, [r1, #0]
     69c:	4213      	tst	r3, r2
     69e:	d1fc      	bne.n	69a <_system_events_init+0x12>
	}
}
     6a0:	4770      	bx	lr
     6a2:	46c0      	nop			; (mov r8, r8)
     6a4:	40000400 	.word	0x40000400
     6a8:	42000400 	.word	0x42000400

000006ac <long_division>:
/**
 * \internal Calculate 64 bit division, ref can be found in
 * http://en.wikipedia.org/wiki/Division_algorithm#Long_division
 */
static uint64_t long_division(uint64_t n, uint64_t d)
{
     6ac:	b5f0      	push	{r4, r5, r6, r7, lr}
     6ae:	46de      	mov	lr, fp
     6b0:	4657      	mov	r7, sl
     6b2:	464e      	mov	r6, r9
     6b4:	4645      	mov	r5, r8
     6b6:	b5e0      	push	{r5, r6, r7, lr}
     6b8:	b087      	sub	sp, #28
     6ba:	4680      	mov	r8, r0
     6bc:	9104      	str	r1, [sp, #16]
     6be:	0016      	movs	r6, r2
     6c0:	001f      	movs	r7, r3
	int32_t i;
	uint64_t q = 0, r = 0, bit_shift;
     6c2:	2200      	movs	r2, #0
     6c4:	2300      	movs	r3, #0
     6c6:	2100      	movs	r1, #0
     6c8:	468b      	mov	fp, r1
	for (i = 63; i >= 0; i--) {
     6ca:	243f      	movs	r4, #63	; 0x3f
		bit_shift = (uint64_t)1 << i;
     6cc:	2001      	movs	r0, #1
     6ce:	0021      	movs	r1, r4
     6d0:	9600      	str	r6, [sp, #0]
     6d2:	9701      	str	r7, [sp, #4]
     6d4:	465c      	mov	r4, fp
     6d6:	9403      	str	r4, [sp, #12]
     6d8:	4644      	mov	r4, r8
     6da:	9405      	str	r4, [sp, #20]
     6dc:	e013      	b.n	706 <long_division+0x5a>
     6de:	2420      	movs	r4, #32
     6e0:	1a64      	subs	r4, r4, r1
     6e2:	0005      	movs	r5, r0
     6e4:	40e5      	lsrs	r5, r4
     6e6:	46a8      	mov	r8, r5
     6e8:	e014      	b.n	714 <long_division+0x68>
		if (n & bit_shift) {
			r |= 0x01;
		}

		if (r >= d) {
			r = r - d;
     6ea:	9c00      	ldr	r4, [sp, #0]
     6ec:	9d01      	ldr	r5, [sp, #4]
     6ee:	1b12      	subs	r2, r2, r4
     6f0:	41ab      	sbcs	r3, r5
			q |= bit_shift;
     6f2:	465c      	mov	r4, fp
     6f4:	464d      	mov	r5, r9
     6f6:	432c      	orrs	r4, r5
     6f8:	46a3      	mov	fp, r4
     6fa:	9c03      	ldr	r4, [sp, #12]
     6fc:	4645      	mov	r5, r8
     6fe:	432c      	orrs	r4, r5
     700:	9403      	str	r4, [sp, #12]
	for (i = 63; i >= 0; i--) {
     702:	3901      	subs	r1, #1
     704:	d325      	bcc.n	752 <long_division+0xa6>
		bit_shift = (uint64_t)1 << i;
     706:	2420      	movs	r4, #32
     708:	4264      	negs	r4, r4
     70a:	190c      	adds	r4, r1, r4
     70c:	d4e7      	bmi.n	6de <long_division+0x32>
     70e:	0005      	movs	r5, r0
     710:	40a5      	lsls	r5, r4
     712:	46a8      	mov	r8, r5
     714:	0004      	movs	r4, r0
     716:	408c      	lsls	r4, r1
     718:	46a1      	mov	r9, r4
		r = r << 1;
     71a:	1892      	adds	r2, r2, r2
     71c:	415b      	adcs	r3, r3
     71e:	0014      	movs	r4, r2
     720:	001d      	movs	r5, r3
		if (n & bit_shift) {
     722:	9e05      	ldr	r6, [sp, #20]
     724:	464f      	mov	r7, r9
     726:	403e      	ands	r6, r7
     728:	46b4      	mov	ip, r6
     72a:	9e04      	ldr	r6, [sp, #16]
     72c:	4647      	mov	r7, r8
     72e:	403e      	ands	r6, r7
     730:	46b2      	mov	sl, r6
     732:	4666      	mov	r6, ip
     734:	4657      	mov	r7, sl
     736:	433e      	orrs	r6, r7
     738:	d003      	beq.n	742 <long_division+0x96>
			r |= 0x01;
     73a:	0006      	movs	r6, r0
     73c:	4326      	orrs	r6, r4
     73e:	0032      	movs	r2, r6
     740:	002b      	movs	r3, r5
		if (r >= d) {
     742:	9c00      	ldr	r4, [sp, #0]
     744:	9d01      	ldr	r5, [sp, #4]
     746:	429d      	cmp	r5, r3
     748:	d8db      	bhi.n	702 <long_division+0x56>
     74a:	d1ce      	bne.n	6ea <long_division+0x3e>
     74c:	4294      	cmp	r4, r2
     74e:	d8d8      	bhi.n	702 <long_division+0x56>
     750:	e7cb      	b.n	6ea <long_division+0x3e>
     752:	9b03      	ldr	r3, [sp, #12]
		}
	}

	return q;
}
     754:	4658      	mov	r0, fp
     756:	0019      	movs	r1, r3
     758:	b007      	add	sp, #28
     75a:	bc3c      	pop	{r2, r3, r4, r5}
     75c:	4690      	mov	r8, r2
     75e:	4699      	mov	r9, r3
     760:	46a2      	mov	sl, r4
     762:	46ab      	mov	fp, r5
     764:	bdf0      	pop	{r4, r5, r6, r7, pc}

00000766 <_sercom_get_sync_baud_val>:
 */
enum status_code _sercom_get_sync_baud_val(
		const uint32_t baudrate,
		const uint32_t external_clock,
		uint16_t *const baudvalue)
{
     766:	b510      	push	{r4, lr}
	uint16_t baud_calculated = 0;
	uint32_t clock_value = external_clock;


	/* Check if baudrate is outside of valid range */
	if (baudrate > (external_clock / 2)) {
     768:	0849      	lsrs	r1, r1, #1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     76a:	2340      	movs	r3, #64	; 0x40
     76c:	2400      	movs	r4, #0
	if (baudrate > (external_clock / 2)) {
     76e:	4281      	cmp	r1, r0
     770:	d202      	bcs.n	778 <_sercom_get_sync_baud_val+0x12>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
	} else {
		*baudvalue = baud_calculated;
		return STATUS_OK;
	}
}
     772:	0018      	movs	r0, r3
     774:	bd10      	pop	{r4, pc}
		baud_calculated++;
     776:	001c      	movs	r4, r3
		clock_value = clock_value - baudrate;
     778:	1a09      	subs	r1, r1, r0
		baud_calculated++;
     77a:	1c63      	adds	r3, r4, #1
     77c:	b29b      	uxth	r3, r3
	while (clock_value >= baudrate) {
     77e:	4288      	cmp	r0, r1
     780:	d9f9      	bls.n	776 <_sercom_get_sync_baud_val+0x10>
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     782:	2340      	movs	r3, #64	; 0x40
	if (baud_calculated > 0xFF) {
     784:	2cff      	cmp	r4, #255	; 0xff
     786:	d8f4      	bhi.n	772 <_sercom_get_sync_baud_val+0xc>
		*baudvalue = baud_calculated;
     788:	8014      	strh	r4, [r2, #0]
		return STATUS_OK;
     78a:	2300      	movs	r3, #0
     78c:	e7f1      	b.n	772 <_sercom_get_sync_baud_val+0xc>
	...

00000790 <_sercom_get_async_baud_val>:
		const uint32_t baudrate,
		const uint32_t peripheral_clock,
		uint16_t *const baudval,
		enum sercom_asynchronous_operation_mode mode,
		enum sercom_asynchronous_sample_num sample_num)
{
     790:	b5f0      	push	{r4, r5, r6, r7, lr}
     792:	b083      	sub	sp, #12
     794:	000f      	movs	r7, r1
     796:	0016      	movs	r6, r2
     798:	aa08      	add	r2, sp, #32
     79a:	7811      	ldrb	r1, [r2, #0]
	uint8_t baud_fp;
	uint32_t baud_int = 0;
	uint64_t temp1;

	/* Check if the baudrate is outside of valid range */
	if ((baudrate * sample_num) > peripheral_clock) {
     79c:	0004      	movs	r4, r0
     79e:	434c      	muls	r4, r1
		/* Return with error code */
		return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     7a0:	2240      	movs	r2, #64	; 0x40
	if ((baudrate * sample_num) > peripheral_clock) {
     7a2:	42bc      	cmp	r4, r7
     7a4:	d902      	bls.n	7ac <_sercom_get_async_baud_val+0x1c>
		baud_calculated = baud_int | (baud_fp << 13);
	}

	*baudval = baud_calculated;
	return STATUS_OK;
}
     7a6:	0010      	movs	r0, r2
     7a8:	b003      	add	sp, #12
     7aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(mode == SERCOM_ASYNC_OPERATION_MODE_ARITHMETIC) {
     7ac:	2b00      	cmp	r3, #0
     7ae:	d114      	bne.n	7da <_sercom_get_async_baud_val+0x4a>
		temp1 = ((sample_num * (uint64_t)baudrate) << SHIFT);
     7b0:	0002      	movs	r2, r0
     7b2:	0008      	movs	r0, r1
     7b4:	2100      	movs	r1, #0
     7b6:	4c19      	ldr	r4, [pc, #100]	; (81c <_sercom_get_async_baud_val+0x8c>)
     7b8:	47a0      	blx	r4
     7ba:	0001      	movs	r1, r0
		ratio = long_division(temp1, peripheral_clock);
     7bc:	003a      	movs	r2, r7
     7be:	2300      	movs	r3, #0
     7c0:	2000      	movs	r0, #0
     7c2:	4c17      	ldr	r4, [pc, #92]	; (820 <_sercom_get_async_baud_val+0x90>)
     7c4:	47a0      	blx	r4
		scale = ((uint64_t)1 << SHIFT) - ratio;
     7c6:	2200      	movs	r2, #0
     7c8:	2301      	movs	r3, #1
     7ca:	1a12      	subs	r2, r2, r0
     7cc:	418b      	sbcs	r3, r1
		baud_calculated = (65536 * scale) >> SHIFT;
     7ce:	0c12      	lsrs	r2, r2, #16
     7d0:	041b      	lsls	r3, r3, #16
     7d2:	431a      	orrs	r2, r3
	*baudval = baud_calculated;
     7d4:	8032      	strh	r2, [r6, #0]
	return STATUS_OK;
     7d6:	2200      	movs	r2, #0
     7d8:	e7e5      	b.n	7a6 <_sercom_get_async_baud_val+0x16>
	uint64_t baud_calculated = 0;
     7da:	2200      	movs	r2, #0
	} else if(mode == SERCOM_ASYNC_OPERATION_MODE_FRACTIONAL) {
     7dc:	2b01      	cmp	r3, #1
     7de:	d1f9      	bne.n	7d4 <_sercom_get_async_baud_val+0x44>
		temp1 = ((uint64_t)baudrate * sample_num);
     7e0:	000a      	movs	r2, r1
     7e2:	2300      	movs	r3, #0
     7e4:	2100      	movs	r1, #0
     7e6:	4c0d      	ldr	r4, [pc, #52]	; (81c <_sercom_get_async_baud_val+0x8c>)
     7e8:	47a0      	blx	r4
     7ea:	0002      	movs	r2, r0
     7ec:	000b      	movs	r3, r1
     7ee:	9200      	str	r2, [sp, #0]
     7f0:	9301      	str	r3, [sp, #4]
		baud_int = long_division( peripheral_clock, temp1);
     7f2:	0038      	movs	r0, r7
     7f4:	2100      	movs	r1, #0
     7f6:	4c0a      	ldr	r4, [pc, #40]	; (820 <_sercom_get_async_baud_val+0x90>)
     7f8:	47a0      	blx	r4
     7fa:	0005      	movs	r5, r0
		if(baud_int > BAUD_INT_MAX) {
     7fc:	2380      	movs	r3, #128	; 0x80
     7fe:	019b      	lsls	r3, r3, #6
				return STATUS_ERR_BAUDRATE_UNAVAILABLE;
     800:	2240      	movs	r2, #64	; 0x40
		if(baud_int > BAUD_INT_MAX) {
     802:	4298      	cmp	r0, r3
     804:	d8cf      	bhi.n	7a6 <_sercom_get_async_baud_val+0x16>
		temp1 = long_division( 8 * (uint64_t)peripheral_clock, temp1);
     806:	0f79      	lsrs	r1, r7, #29
     808:	00f8      	lsls	r0, r7, #3
     80a:	9a00      	ldr	r2, [sp, #0]
     80c:	9b01      	ldr	r3, [sp, #4]
     80e:	47a0      	blx	r4
		baud_fp = temp1 - 8 * baud_int;
     810:	00ea      	lsls	r2, r5, #3
     812:	1a82      	subs	r2, r0, r2
		baud_calculated = baud_int | (baud_fp << 13);
     814:	b2d2      	uxtb	r2, r2
     816:	0352      	lsls	r2, r2, #13
     818:	432a      	orrs	r2, r5
     81a:	e7db      	b.n	7d4 <_sercom_get_async_baud_val+0x44>
     81c:	00001c75 	.word	0x00001c75
     820:	000006ad 	.word	0x000006ad

00000824 <sercom_set_gclk_generator>:
 *                                         forced.
 */
enum status_code sercom_set_gclk_generator(
		const enum gclk_generator generator_source,
		const bool force_change)
{
     824:	b510      	push	{r4, lr}
     826:	b082      	sub	sp, #8
     828:	0004      	movs	r4, r0
	/* Check if valid option */
	if (!_sercom_config.generator_is_set || force_change) {
     82a:	4b0e      	ldr	r3, [pc, #56]	; (864 <sercom_set_gclk_generator+0x40>)
     82c:	781b      	ldrb	r3, [r3, #0]
     82e:	2b00      	cmp	r3, #0
     830:	d007      	beq.n	842 <sercom_set_gclk_generator+0x1e>
     832:	2900      	cmp	r1, #0
     834:	d105      	bne.n	842 <sercom_set_gclk_generator+0x1e>
		/* Save config */
		_sercom_config.generator_source = generator_source;
		_sercom_config.generator_is_set = true;

		return STATUS_OK;
	} else if (generator_source == _sercom_config.generator_source) {
     836:	4b0b      	ldr	r3, [pc, #44]	; (864 <sercom_set_gclk_generator+0x40>)
     838:	785b      	ldrb	r3, [r3, #1]
     83a:	4283      	cmp	r3, r0
     83c:	d010      	beq.n	860 <sercom_set_gclk_generator+0x3c>
		/* Return status OK if same config */
		return STATUS_OK;
	}

	/* Return invalid config to already initialized GCLK */
	return STATUS_ERR_ALREADY_INITIALIZED;
     83e:	201d      	movs	r0, #29
     840:	e00c      	b.n	85c <sercom_set_gclk_generator+0x38>
		gclk_chan_conf.source_generator = generator_source;
     842:	a901      	add	r1, sp, #4
     844:	700c      	strb	r4, [r1, #0]
		system_gclk_chan_set_config(SERCOM_GCLK_ID, &gclk_chan_conf);
     846:	200c      	movs	r0, #12
     848:	4b07      	ldr	r3, [pc, #28]	; (868 <sercom_set_gclk_generator+0x44>)
     84a:	4798      	blx	r3
		system_gclk_chan_enable(SERCOM_GCLK_ID);
     84c:	200c      	movs	r0, #12
     84e:	4b07      	ldr	r3, [pc, #28]	; (86c <sercom_set_gclk_generator+0x48>)
     850:	4798      	blx	r3
		_sercom_config.generator_source = generator_source;
     852:	4b04      	ldr	r3, [pc, #16]	; (864 <sercom_set_gclk_generator+0x40>)
     854:	705c      	strb	r4, [r3, #1]
		_sercom_config.generator_is_set = true;
     856:	2201      	movs	r2, #1
     858:	701a      	strb	r2, [r3, #0]
		return STATUS_OK;
     85a:	2000      	movs	r0, #0
}
     85c:	b002      	add	sp, #8
     85e:	bd10      	pop	{r4, pc}
		return STATUS_OK;
     860:	2000      	movs	r0, #0
     862:	e7fb      	b.n	85c <sercom_set_gclk_generator+0x38>
     864:	20000060 	.word	0x20000060
     868:	00001895 	.word	0x00001895
     86c:	00001809 	.word	0x00001809

00000870 <_sercom_get_default_pad>:
 */
uint32_t _sercom_get_default_pad(
		Sercom *const sercom_module,
		const uint8_t pad)
{
	switch ((uintptr_t)sercom_module) {
     870:	4b40      	ldr	r3, [pc, #256]	; (974 <_sercom_get_default_pad+0x104>)
     872:	4298      	cmp	r0, r3
     874:	d031      	beq.n	8da <_sercom_get_default_pad+0x6a>
     876:	d90a      	bls.n	88e <_sercom_get_default_pad+0x1e>
     878:	4b3f      	ldr	r3, [pc, #252]	; (978 <_sercom_get_default_pad+0x108>)
     87a:	4298      	cmp	r0, r3
     87c:	d04d      	beq.n	91a <_sercom_get_default_pad+0xaa>
     87e:	4b3f      	ldr	r3, [pc, #252]	; (97c <_sercom_get_default_pad+0x10c>)
     880:	4298      	cmp	r0, r3
     882:	d05a      	beq.n	93a <_sercom_get_default_pad+0xca>
     884:	4b3e      	ldr	r3, [pc, #248]	; (980 <_sercom_get_default_pad+0x110>)
     886:	4298      	cmp	r0, r3
     888:	d037      	beq.n	8fa <_sercom_get_default_pad+0x8a>
		/* Auto-generate a lookup table for the default SERCOM pad defaults */
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
	}

	Assert(false);
	return 0;
     88a:	2000      	movs	r0, #0
}
     88c:	4770      	bx	lr
	switch ((uintptr_t)sercom_module) {
     88e:	4b3d      	ldr	r3, [pc, #244]	; (984 <_sercom_get_default_pad+0x114>)
     890:	4298      	cmp	r0, r3
     892:	d00c      	beq.n	8ae <_sercom_get_default_pad+0x3e>
     894:	4b3c      	ldr	r3, [pc, #240]	; (988 <_sercom_get_default_pad+0x118>)
     896:	4298      	cmp	r0, r3
     898:	d1f7      	bne.n	88a <_sercom_get_default_pad+0x1a>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     89a:	2901      	cmp	r1, #1
     89c:	d017      	beq.n	8ce <_sercom_get_default_pad+0x5e>
     89e:	2900      	cmp	r1, #0
     8a0:	d05d      	beq.n	95e <_sercom_get_default_pad+0xee>
     8a2:	2902      	cmp	r1, #2
     8a4:	d015      	beq.n	8d2 <_sercom_get_default_pad+0x62>
     8a6:	2903      	cmp	r1, #3
     8a8:	d015      	beq.n	8d6 <_sercom_get_default_pad+0x66>
	return 0;
     8aa:	2000      	movs	r0, #0
     8ac:	e7ee      	b.n	88c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     8ae:	2901      	cmp	r1, #1
     8b0:	d007      	beq.n	8c2 <_sercom_get_default_pad+0x52>
     8b2:	2900      	cmp	r1, #0
     8b4:	d051      	beq.n	95a <_sercom_get_default_pad+0xea>
     8b6:	2902      	cmp	r1, #2
     8b8:	d005      	beq.n	8c6 <_sercom_get_default_pad+0x56>
     8ba:	2903      	cmp	r1, #3
     8bc:	d005      	beq.n	8ca <_sercom_get_default_pad+0x5a>
	return 0;
     8be:	2000      	movs	r0, #0
     8c0:	e7e4      	b.n	88c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     8c2:	4832      	ldr	r0, [pc, #200]	; (98c <_sercom_get_default_pad+0x11c>)
     8c4:	e7e2      	b.n	88c <_sercom_get_default_pad+0x1c>
     8c6:	4832      	ldr	r0, [pc, #200]	; (990 <_sercom_get_default_pad+0x120>)
     8c8:	e7e0      	b.n	88c <_sercom_get_default_pad+0x1c>
     8ca:	4832      	ldr	r0, [pc, #200]	; (994 <_sercom_get_default_pad+0x124>)
     8cc:	e7de      	b.n	88c <_sercom_get_default_pad+0x1c>
     8ce:	4832      	ldr	r0, [pc, #200]	; (998 <_sercom_get_default_pad+0x128>)
     8d0:	e7dc      	b.n	88c <_sercom_get_default_pad+0x1c>
     8d2:	4832      	ldr	r0, [pc, #200]	; (99c <_sercom_get_default_pad+0x12c>)
     8d4:	e7da      	b.n	88c <_sercom_get_default_pad+0x1c>
     8d6:	4832      	ldr	r0, [pc, #200]	; (9a0 <_sercom_get_default_pad+0x130>)
     8d8:	e7d8      	b.n	88c <_sercom_get_default_pad+0x1c>
     8da:	2901      	cmp	r1, #1
     8dc:	d007      	beq.n	8ee <_sercom_get_default_pad+0x7e>
     8de:	2900      	cmp	r1, #0
     8e0:	d03f      	beq.n	962 <_sercom_get_default_pad+0xf2>
     8e2:	2902      	cmp	r1, #2
     8e4:	d005      	beq.n	8f2 <_sercom_get_default_pad+0x82>
     8e6:	2903      	cmp	r1, #3
     8e8:	d005      	beq.n	8f6 <_sercom_get_default_pad+0x86>
	return 0;
     8ea:	2000      	movs	r0, #0
     8ec:	e7ce      	b.n	88c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     8ee:	482d      	ldr	r0, [pc, #180]	; (9a4 <_sercom_get_default_pad+0x134>)
     8f0:	e7cc      	b.n	88c <_sercom_get_default_pad+0x1c>
     8f2:	482d      	ldr	r0, [pc, #180]	; (9a8 <_sercom_get_default_pad+0x138>)
     8f4:	e7ca      	b.n	88c <_sercom_get_default_pad+0x1c>
     8f6:	482d      	ldr	r0, [pc, #180]	; (9ac <_sercom_get_default_pad+0x13c>)
     8f8:	e7c8      	b.n	88c <_sercom_get_default_pad+0x1c>
     8fa:	2901      	cmp	r1, #1
     8fc:	d007      	beq.n	90e <_sercom_get_default_pad+0x9e>
     8fe:	2900      	cmp	r1, #0
     900:	d031      	beq.n	966 <_sercom_get_default_pad+0xf6>
     902:	2902      	cmp	r1, #2
     904:	d005      	beq.n	912 <_sercom_get_default_pad+0xa2>
     906:	2903      	cmp	r1, #3
     908:	d005      	beq.n	916 <_sercom_get_default_pad+0xa6>
	return 0;
     90a:	2000      	movs	r0, #0
     90c:	e7be      	b.n	88c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     90e:	4828      	ldr	r0, [pc, #160]	; (9b0 <_sercom_get_default_pad+0x140>)
     910:	e7bc      	b.n	88c <_sercom_get_default_pad+0x1c>
     912:	4828      	ldr	r0, [pc, #160]	; (9b4 <_sercom_get_default_pad+0x144>)
     914:	e7ba      	b.n	88c <_sercom_get_default_pad+0x1c>
     916:	4828      	ldr	r0, [pc, #160]	; (9b8 <_sercom_get_default_pad+0x148>)
     918:	e7b8      	b.n	88c <_sercom_get_default_pad+0x1c>
     91a:	2901      	cmp	r1, #1
     91c:	d007      	beq.n	92e <_sercom_get_default_pad+0xbe>
     91e:	2900      	cmp	r1, #0
     920:	d023      	beq.n	96a <_sercom_get_default_pad+0xfa>
     922:	2902      	cmp	r1, #2
     924:	d005      	beq.n	932 <_sercom_get_default_pad+0xc2>
     926:	2903      	cmp	r1, #3
     928:	d005      	beq.n	936 <_sercom_get_default_pad+0xc6>
	return 0;
     92a:	2000      	movs	r0, #0
     92c:	e7ae      	b.n	88c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     92e:	4823      	ldr	r0, [pc, #140]	; (9bc <_sercom_get_default_pad+0x14c>)
     930:	e7ac      	b.n	88c <_sercom_get_default_pad+0x1c>
     932:	4823      	ldr	r0, [pc, #140]	; (9c0 <_sercom_get_default_pad+0x150>)
     934:	e7aa      	b.n	88c <_sercom_get_default_pad+0x1c>
     936:	4823      	ldr	r0, [pc, #140]	; (9c4 <_sercom_get_default_pad+0x154>)
     938:	e7a8      	b.n	88c <_sercom_get_default_pad+0x1c>
     93a:	2901      	cmp	r1, #1
     93c:	d007      	beq.n	94e <_sercom_get_default_pad+0xde>
     93e:	2900      	cmp	r1, #0
     940:	d015      	beq.n	96e <_sercom_get_default_pad+0xfe>
     942:	2902      	cmp	r1, #2
     944:	d005      	beq.n	952 <_sercom_get_default_pad+0xe2>
     946:	2903      	cmp	r1, #3
     948:	d005      	beq.n	956 <_sercom_get_default_pad+0xe6>
	return 0;
     94a:	2000      	movs	r0, #0
     94c:	e79e      	b.n	88c <_sercom_get_default_pad+0x1c>
		MREPEAT(SERCOM_INST_NUM, _SERCOM_PAD_DEFAULTS_CASE, pad)
     94e:	481e      	ldr	r0, [pc, #120]	; (9c8 <_sercom_get_default_pad+0x158>)
     950:	e79c      	b.n	88c <_sercom_get_default_pad+0x1c>
     952:	481e      	ldr	r0, [pc, #120]	; (9cc <_sercom_get_default_pad+0x15c>)
     954:	e79a      	b.n	88c <_sercom_get_default_pad+0x1c>
     956:	481e      	ldr	r0, [pc, #120]	; (9d0 <_sercom_get_default_pad+0x160>)
     958:	e798      	b.n	88c <_sercom_get_default_pad+0x1c>
     95a:	481e      	ldr	r0, [pc, #120]	; (9d4 <_sercom_get_default_pad+0x164>)
     95c:	e796      	b.n	88c <_sercom_get_default_pad+0x1c>
     95e:	2003      	movs	r0, #3
     960:	e794      	b.n	88c <_sercom_get_default_pad+0x1c>
     962:	481d      	ldr	r0, [pc, #116]	; (9d8 <_sercom_get_default_pad+0x168>)
     964:	e792      	b.n	88c <_sercom_get_default_pad+0x1c>
     966:	481d      	ldr	r0, [pc, #116]	; (9dc <_sercom_get_default_pad+0x16c>)
     968:	e790      	b.n	88c <_sercom_get_default_pad+0x1c>
     96a:	481d      	ldr	r0, [pc, #116]	; (9e0 <_sercom_get_default_pad+0x170>)
     96c:	e78e      	b.n	88c <_sercom_get_default_pad+0x1c>
     96e:	481d      	ldr	r0, [pc, #116]	; (9e4 <_sercom_get_default_pad+0x174>)
     970:	e78c      	b.n	88c <_sercom_get_default_pad+0x1c>
     972:	46c0      	nop			; (mov r8, r8)
     974:	42001000 	.word	0x42001000
     978:	42001800 	.word	0x42001800
     97c:	42001c00 	.word	0x42001c00
     980:	42001400 	.word	0x42001400
     984:	42000800 	.word	0x42000800
     988:	42000c00 	.word	0x42000c00
     98c:	00050003 	.word	0x00050003
     990:	00060003 	.word	0x00060003
     994:	00070003 	.word	0x00070003
     998:	00010003 	.word	0x00010003
     99c:	001e0003 	.word	0x001e0003
     9a0:	001f0003 	.word	0x001f0003
     9a4:	00090003 	.word	0x00090003
     9a8:	000a0003 	.word	0x000a0003
     9ac:	000b0003 	.word	0x000b0003
     9b0:	00110003 	.word	0x00110003
     9b4:	00120003 	.word	0x00120003
     9b8:	00130003 	.word	0x00130003
     9bc:	000d0003 	.word	0x000d0003
     9c0:	000e0003 	.word	0x000e0003
     9c4:	000f0003 	.word	0x000f0003
     9c8:	00170003 	.word	0x00170003
     9cc:	00180003 	.word	0x00180003
     9d0:	00190003 	.word	0x00190003
     9d4:	00040003 	.word	0x00040003
     9d8:	00080003 	.word	0x00080003
     9dc:	00100003 	.word	0x00100003
     9e0:	000c0003 	.word	0x000c0003
     9e4:	00160003 	.word	0x00160003

000009e8 <_sercom_get_sercom_inst_index>:
 *
 * \return Index of given instance.
 */
uint8_t _sercom_get_sercom_inst_index(
		Sercom *const sercom_instance)
{
     9e8:	b530      	push	{r4, r5, lr}
     9ea:	b087      	sub	sp, #28
	/* Save all available SERCOM instances for compare */
	Sercom *sercom_instances[SERCOM_INST_NUM] = SERCOM_INSTS;
     9ec:	4b0b      	ldr	r3, [pc, #44]	; (a1c <_sercom_get_sercom_inst_index+0x34>)
     9ee:	466a      	mov	r2, sp
     9f0:	cb32      	ldmia	r3!, {r1, r4, r5}
     9f2:	c232      	stmia	r2!, {r1, r4, r5}
     9f4:	cb32      	ldmia	r3!, {r1, r4, r5}
     9f6:	c232      	stmia	r2!, {r1, r4, r5}

	/* Find index for sercom instance */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uintptr_t)sercom_instance == (uintptr_t)sercom_instances[i]) {
     9f8:	9b00      	ldr	r3, [sp, #0]
     9fa:	4283      	cmp	r3, r0
     9fc:	d00b      	beq.n	a16 <_sercom_get_sercom_inst_index+0x2e>
     9fe:	2301      	movs	r3, #1
     a00:	009a      	lsls	r2, r3, #2
     a02:	4669      	mov	r1, sp
     a04:	5852      	ldr	r2, [r2, r1]
     a06:	4282      	cmp	r2, r0
     a08:	d006      	beq.n	a18 <_sercom_get_sercom_inst_index+0x30>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     a0a:	3301      	adds	r3, #1
     a0c:	2b06      	cmp	r3, #6
     a0e:	d1f7      	bne.n	a00 <_sercom_get_sercom_inst_index+0x18>
		}
	}

	/* Invalid data given */
	Assert(false);
	return 0;
     a10:	2000      	movs	r0, #0
}
     a12:	b007      	add	sp, #28
     a14:	bd30      	pop	{r4, r5, pc}
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
     a16:	2300      	movs	r3, #0
			return i;
     a18:	b2d8      	uxtb	r0, r3
     a1a:	e7fa      	b.n	a12 <_sercom_get_sercom_inst_index+0x2a>
     a1c:	00001d10 	.word	0x00001d10

00000a20 <i2c_write_complete_callback>:
 * @note				- MASTER: i2c_read, SLAVE: write-to-buf Complete
 **********************************************************************/
void i2c_write_complete_callback(struct i2c_slave_module *const module)
{
	//Never happens
}
     a20:	4770      	bx	lr
	...

00000a24 <i2c_read_complete_callback>:
{
	PortGroup *const port_base = port_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask  = (1UL << (gpio_pin % 32));

	/* Toggle pin output level */
	port_base->OUTTGL.reg = pin_mask;
     a24:	2280      	movs	r2, #128	; 0x80
     a26:	02d2      	lsls	r2, r2, #11
     a28:	4b04      	ldr	r3, [pc, #16]	; (a3c <i2c_read_complete_callback+0x18>)
     a2a:	61da      	str	r2, [r3, #28]
 *						This is also triggered for master-write-addr prior to read
 **********************************************************************/
void i2c_read_complete_callback(struct i2c_slave_module *const module)
{
	LED_Toggle(STATUSLED_ORANGE);
	if (cmd_sent.cmdID != 0)
     a2c:	4b04      	ldr	r3, [pc, #16]	; (a40 <i2c_read_complete_callback+0x1c>)
     a2e:	791b      	ldrb	r3, [r3, #4]
     a30:	2b00      	cmp	r3, #0
     a32:	d002      	beq.n	a3a <i2c_read_complete_callback+0x16>
	{
		//If new data, set flag to process data.
		flgcmdRx = TRUE;			
     a34:	2201      	movs	r2, #1
     a36:	4b03      	ldr	r3, [pc, #12]	; (a44 <i2c_read_complete_callback+0x20>)
     a38:	701a      	strb	r2, [r3, #0]
	}

}
     a3a:	4770      	bx	lr
     a3c:	41004400 	.word	0x41004400
     a40:	200003b4 	.word	0x200003b4
     a44:	200003c0 	.word	0x200003c0

00000a48 <i2c_read_request_callback>:
 * @return				- void
 *
 * @note				- I2C Read Callback
 **********************************************************************/
void i2c_read_request_callback(	struct i2c_slave_module *const module)
{
     a48:	b510      	push	{r4, lr}
	/* Init i2c packet */
	rw_packet.data_length = sizeof(cmd_resp);
     a4a:	4904      	ldr	r1, [pc, #16]	; (a5c <i2c_read_request_callback+0x14>)
     a4c:	230c      	movs	r3, #12
     a4e:	800b      	strh	r3, [r1, #0]
	rw_packet.data = (uint8_t *)&cmd_resp;
     a50:	4b03      	ldr	r3, [pc, #12]	; (a60 <i2c_read_request_callback+0x18>)
     a52:	604b      	str	r3, [r1, #4]

	/* Write buffer to master */
	i2c_slave_write_packet_job(module, &rw_packet);
     a54:	4b03      	ldr	r3, [pc, #12]	; (a64 <i2c_read_request_callback+0x1c>)
     a56:	4798      	blx	r3
	
}
     a58:	bd10      	pop	{r4, pc}
     a5a:	46c0      	nop			; (mov r8, r8)
     a5c:	200003c4 	.word	0x200003c4
     a60:	20000340 	.word	0x20000340
     a64:	000002a7 	.word	0x000002a7

00000a68 <i2c_write_request_callback>:
 * @return				- void
 *
 * @note				- I2C Write Callback
 **********************************************************************/
void i2c_write_request_callback(struct i2c_slave_module *const module)
{
     a68:	b510      	push	{r4, lr}
	/* Init i2c packet */
	rw_packet.data_length = sizeof(cmd_sent);
     a6a:	4904      	ldr	r1, [pc, #16]	; (a7c <i2c_write_request_callback+0x14>)
     a6c:	2308      	movs	r3, #8
     a6e:	800b      	strh	r3, [r1, #0]
	rw_packet.data = (uint8_t *)&cmd_sent;
     a70:	4b03      	ldr	r3, [pc, #12]	; (a80 <i2c_write_request_callback+0x18>)
     a72:	604b      	str	r3, [r1, #4]


	/* Read buffer from master */
	if (i2c_slave_read_packet_job(module, &rw_packet) != STATUS_OK)
     a74:	4b03      	ldr	r3, [pc, #12]	; (a84 <i2c_write_request_callback+0x1c>)
     a76:	4798      	blx	r3
	{
	}

     a78:	bd10      	pop	{r4, pc}
     a7a:	46c0      	nop			; (mov r8, r8)
     a7c:	200003c4 	.word	0x200003c4
     a80:	200003b4 	.word	0x200003b4
     a84:	0000027f 	.word	0x0000027f

00000a88 <configure_i2c_slave>:
{
     a88:	b570      	push	{r4, r5, r6, lr}
static inline void i2c_slave_get_config_defaults(
		struct i2c_slave_config *const config)
{
	/*Sanity check argument */
	Assert(config);
	config->enable_scl_low_timeout = false;
     a8a:	4a17      	ldr	r2, [pc, #92]	; (ae8 <configure_i2c_slave+0x60>)
     a8c:	2100      	movs	r1, #0
     a8e:	7011      	strb	r1, [r2, #0]
	config->sda_hold_time = I2C_SLAVE_SDA_HOLD_TIME_300NS_600NS;
     a90:	2380      	movs	r3, #128	; 0x80
     a92:	039b      	lsls	r3, r3, #14
     a94:	6053      	str	r3, [r2, #4]
	config->buffer_timeout = 65535;
     a96:	2301      	movs	r3, #1
     a98:	425b      	negs	r3, r3
     a9a:	8113      	strh	r3, [r2, #8]
	config->address_mode = I2C_SLAVE_ADDRESS_MODE_MASK;
     a9c:	2300      	movs	r3, #0
     a9e:	8151      	strh	r1, [r2, #10]
	config->address = 0;
	config->address_mask = 0;
     aa0:	81d1      	strh	r1, [r2, #14]
#ifdef FEATURE_I2C_10_BIT_ADDRESS
	config->ten_bit_address = false;
#endif
	config->enable_general_call_address = false;
     aa2:	7413      	strb	r3, [r2, #16]
#ifdef FEATURE_I2C_FAST_MODE_PLUS_AND_HIGH_SPEED
	config->transfer_speed = I2C_SLAVE_SPEED_STANDARD_AND_FAST;
#endif
#if I2C_SLAVE_CALLBACK_MODE == true
	config->enable_nack_on_address = false;
     aa4:	7453      	strb	r3, [r2, #17]
#endif
	config->generator_source = GCLK_GENERATOR_0;
     aa6:	7493      	strb	r3, [r2, #18]
	config->run_in_standby = false;
     aa8:	74d3      	strb	r3, [r2, #19]
	config->pinmux_pad0 = PINMUX_DEFAULT;
     aaa:	6151      	str	r1, [r2, #20]
	config->pinmux_pad1 = PINMUX_DEFAULT;
     aac:	6191      	str	r1, [r2, #24]
	config->scl_low_timeout  = false;
     aae:	7713      	strb	r3, [r2, #28]
	config_i2c_slave.address      = cmd_resp.ID;
     ab0:	4b0e      	ldr	r3, [pc, #56]	; (aec <configure_i2c_slave+0x64>)
     ab2:	799b      	ldrb	r3, [r3, #6]
     ab4:	8193      	strh	r3, [r2, #12]
	i2c_slave_init(&i2c_slave_instance, CONF_I2C_SLAVE_MODULE, &config_i2c_slave);
     ab6:	4d0e      	ldr	r5, [pc, #56]	; (af0 <configure_i2c_slave+0x68>)
     ab8:	490e      	ldr	r1, [pc, #56]	; (af4 <configure_i2c_slave+0x6c>)
     aba:	0028      	movs	r0, r5
     abc:	4b0e      	ldr	r3, [pc, #56]	; (af8 <configure_i2c_slave+0x70>)
     abe:	4798      	blx	r3
{
	/* Sanity check of arguments */
	Assert(module);
	Assert(module->hw);

	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
     ac0:	682c      	ldr	r4, [r5, #0]

#if I2C_SLAVE_CALLBACK_MODE == true
	/* Enable global interrupt for module */
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     ac2:	0020      	movs	r0, r4
     ac4:	4b0d      	ldr	r3, [pc, #52]	; (afc <configure_i2c_slave+0x74>)
     ac6:	4798      	blx	r3
	NVIC->ISER[0] = (uint32_t)(1 << ((uint32_t)vector & 0x0000001f));
     ac8:	231f      	movs	r3, #31
     aca:	4018      	ands	r0, r3
     acc:	3b1e      	subs	r3, #30
     ace:	4083      	lsls	r3, r0
     ad0:	4a0b      	ldr	r2, [pc, #44]	; (b00 <configure_i2c_slave+0x78>)
     ad2:	6013      	str	r3, [r2, #0]
	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
     ad4:	682a      	ldr	r2, [r5, #0]
	return (i2c_hw->STATUS.reg & SERCOM_I2CS_STATUS_SYNCBUSY);
     ad6:	8a13      	ldrh	r3, [r2, #16]
	while (i2c_slave_is_syncing(module)) {
     ad8:	b21b      	sxth	r3, r3
     ada:	2b00      	cmp	r3, #0
     adc:	dbfb      	blt.n	ad6 <configure_i2c_slave+0x4e>

	/* Wait for module to sync */
	_i2c_slave_wait_for_sync(module);

	/* Enable module */
	i2c_hw->CTRLA.reg |= SERCOM_I2CS_CTRLA_ENABLE;
     ade:	6823      	ldr	r3, [r4, #0]
     ae0:	2202      	movs	r2, #2
     ae2:	4313      	orrs	r3, r2
     ae4:	6023      	str	r3, [r4, #0]
}
     ae6:	bd70      	pop	{r4, r5, r6, pc}
     ae8:	200003cc 	.word	0x200003cc
     aec:	20000340 	.word	0x20000340
     af0:	200003ec 	.word	0x200003ec
     af4:	42001000 	.word	0x42001000
     af8:	00000105 	.word	0x00000105
     afc:	0000120d 	.word	0x0000120d
     b00:	e000e100 	.word	0xe000e100

00000b04 <configure_i2c_slave_callbacks>:
{
     b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	i2c_slave_register_callback(&i2c_slave_instance, i2c_read_request_callback,	I2C_SLAVE_CALLBACK_READ_REQUEST);
     b06:	4c14      	ldr	r4, [pc, #80]	; (b58 <configure_i2c_slave_callbacks+0x54>)
     b08:	2202      	movs	r2, #2
     b0a:	4914      	ldr	r1, [pc, #80]	; (b5c <configure_i2c_slave_callbacks+0x58>)
     b0c:	0020      	movs	r0, r4
     b0e:	4e14      	ldr	r6, [pc, #80]	; (b60 <configure_i2c_slave_callbacks+0x5c>)
     b10:	47b0      	blx	r6
	/* Sanity check */
	Assert(module);
	Assert(module->hw);

	/* Mark callback as enabled */
	module->enabled_callback |= (1 << callback_type);
     b12:	2525      	movs	r5, #37	; 0x25
     b14:	5d63      	ldrb	r3, [r4, r5]
     b16:	2204      	movs	r2, #4
     b18:	4313      	orrs	r3, r2
     b1a:	5563      	strb	r3, [r4, r5]

	/* Enable address callback */
	SercomI2cs *const i2c_hw = &(module->hw->I2CS);
	if (callback_type == I2C_SLAVE_CALLBACK_READ_REQUEST ||
			callback_type == I2C_SLAVE_CALLBACK_WRITE_REQUEST) {
		i2c_hw->INTENSET.reg = SERCOM_I2CS_INTFLAG_AMATCH;
     b1c:	2702      	movs	r7, #2
     b1e:	6823      	ldr	r3, [r4, #0]
     b20:	735f      	strb	r7, [r3, #13]
	i2c_slave_register_callback(&i2c_slave_instance, i2c_write_request_callback, I2C_SLAVE_CALLBACK_WRITE_REQUEST);
     b22:	3a01      	subs	r2, #1
     b24:	490f      	ldr	r1, [pc, #60]	; (b64 <configure_i2c_slave_callbacks+0x60>)
     b26:	0020      	movs	r0, r4
     b28:	47b0      	blx	r6
	module->enabled_callback |= (1 << callback_type);
     b2a:	5d63      	ldrb	r3, [r4, r5]
     b2c:	2208      	movs	r2, #8
     b2e:	4313      	orrs	r3, r2
     b30:	5563      	strb	r3, [r4, r5]
		i2c_hw->INTENSET.reg = SERCOM_I2CS_INTFLAG_AMATCH;
     b32:	6823      	ldr	r3, [r4, #0]
     b34:	735f      	strb	r7, [r3, #13]
	i2c_slave_register_callback(&i2c_slave_instance, i2c_write_complete_callback, I2C_SLAVE_CALLBACK_WRITE_COMPLETE);
     b36:	2200      	movs	r2, #0
     b38:	490b      	ldr	r1, [pc, #44]	; (b68 <configure_i2c_slave_callbacks+0x64>)
     b3a:	0020      	movs	r0, r4
     b3c:	47b0      	blx	r6
	module->enabled_callback |= (1 << callback_type);
     b3e:	5d63      	ldrb	r3, [r4, r5]
     b40:	2201      	movs	r2, #1
     b42:	4313      	orrs	r3, r2
     b44:	5563      	strb	r3, [r4, r5]
	i2c_slave_register_callback(&i2c_slave_instance, i2c_read_complete_callback, I2C_SLAVE_CALLBACK_READ_COMPLETE);
     b46:	4909      	ldr	r1, [pc, #36]	; (b6c <configure_i2c_slave_callbacks+0x68>)
     b48:	0020      	movs	r0, r4
     b4a:	47b0      	blx	r6
     b4c:	5d63      	ldrb	r3, [r4, r5]
     b4e:	2202      	movs	r2, #2
     b50:	4313      	orrs	r3, r2
     b52:	5563      	strb	r3, [r4, r5]
}
     b54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     b56:	46c0      	nop			; (mov r8, r8)
     b58:	200003ec 	.word	0x200003ec
     b5c:	00000a49 	.word	0x00000a49
     b60:	00000265 	.word	0x00000265
     b64:	00000a69 	.word	0x00000a69
     b68:	00000a21 	.word	0x00000a21
     b6c:	00000a25 	.word	0x00000a25

00000b70 <usart_write_callback>:
 *
 * @note				- 
 ******************************************************************************************************/
void usart_write_callback(const struct usart_module *const usart_module)
{
	__ASM volatile ("nop");
     b70:	46c0      	nop			; (mov r8, r8)
}
     b72:	4770      	bx	lr

00000b74 <config_UART>:
{
     b74:	b530      	push	{r4, r5, lr}
     b76:	b095      	sub	sp, #84	; 0x54
	uint8_t statusMsg[] = "Configuring Terminal UART....\r\n";
     b78:	a80c      	add	r0, sp, #48	; 0x30
     b7a:	4b25      	ldr	r3, [pc, #148]	; (c10 <config_UART+0x9c>)
     b7c:	0002      	movs	r2, r0
     b7e:	cb32      	ldmia	r3!, {r1, r4, r5}
     b80:	c232      	stmia	r2!, {r1, r4, r5}
     b82:	cb32      	ldmia	r3!, {r1, r4, r5}
     b84:	c232      	stmia	r2!, {r1, r4, r5}
     b86:	cb12      	ldmia	r3!, {r1, r4}
     b88:	c212      	stmia	r2!, {r1, r4}
	writeStr(statusMsg, sizeof(statusMsg));			//uart debug statement
     b8a:	2120      	movs	r1, #32
     b8c:	4b21      	ldr	r3, [pc, #132]	; (c14 <config_UART+0xa0>)
     b8e:	4798      	blx	r3
	config->data_order       = USART_DATAORDER_LSB;
     b90:	2380      	movs	r3, #128	; 0x80
     b92:	05db      	lsls	r3, r3, #23
     b94:	9300      	str	r3, [sp, #0]
	config->transfer_mode    = USART_TRANSFER_ASYNCHRONOUSLY;
     b96:	2300      	movs	r3, #0
     b98:	9301      	str	r3, [sp, #4]
	config->parity           = USART_PARITY_NONE;
     b9a:	22ff      	movs	r2, #255	; 0xff
     b9c:	4669      	mov	r1, sp
     b9e:	810a      	strh	r2, [r1, #8]
	config->stopbits         = USART_STOPBITS_1;
     ba0:	728b      	strb	r3, [r1, #10]
	config->character_size   = USART_CHARACTER_SIZE_8BIT;
     ba2:	72cb      	strb	r3, [r1, #11]
	config->baudrate         = 9600;
     ba4:	2296      	movs	r2, #150	; 0x96
     ba6:	0192      	lsls	r2, r2, #6
     ba8:	9204      	str	r2, [sp, #16]
	config->receiver_enable  = true;
     baa:	2201      	movs	r2, #1
     bac:	750a      	strb	r2, [r1, #20]
	config->transmitter_enable = true;
     bae:	754a      	strb	r2, [r1, #21]
	config->clock_polarity_inverted = false;
     bb0:	758b      	strb	r3, [r1, #22]
	config->use_external_clock = false;
     bb2:	75cb      	strb	r3, [r1, #23]
	config->ext_clock_freq   = 0;
     bb4:	9306      	str	r3, [sp, #24]
	config->run_in_standby   = false;
     bb6:	770b      	strb	r3, [r1, #28]
	config->generator_source = GCLK_GENERATOR_0;
     bb8:	774b      	strb	r3, [r1, #29]
	config_usart.mux_setting = USART_RX_1_TX_0_XCK_1;
     bba:	2380      	movs	r3, #128	; 0x80
     bbc:	035b      	lsls	r3, r3, #13
     bbe:	9303      	str	r3, [sp, #12]
	config_usart.pinmux_pad0 = PINMUX_PB08D_SERCOM4_PAD0;	// PB08 = TX
     bc0:	4b15      	ldr	r3, [pc, #84]	; (c18 <config_UART+0xa4>)
     bc2:	9308      	str	r3, [sp, #32]
	config_usart.pinmux_pad1 = PINMUX_PB09D_SERCOM4_PAD1;	// PB09 = RX
     bc4:	4b15      	ldr	r3, [pc, #84]	; (c1c <config_UART+0xa8>)
     bc6:	9309      	str	r3, [sp, #36]	; 0x24
	config_usart.pinmux_pad2 = PINMUX_UNUSED;
     bc8:	2301      	movs	r3, #1
     bca:	425b      	negs	r3, r3
     bcc:	930a      	str	r3, [sp, #40]	; 0x28
	config_usart.pinmux_pad3 = PINMUX_UNUSED;
     bce:	930b      	str	r3, [sp, #44]	; 0x2c
	while (usart_init(&usart_instance, SERCOM4, &config_usart) != STATUS_OK)
     bd0:	4d13      	ldr	r5, [pc, #76]	; (c20 <config_UART+0xac>)
     bd2:	4c14      	ldr	r4, [pc, #80]	; (c24 <config_UART+0xb0>)
     bd4:	e000      	b.n	bd8 <config_UART+0x64>
		__ASM volatile ("nop");
     bd6:	46c0      	nop			; (mov r8, r8)
	while (usart_init(&usart_instance, SERCOM4, &config_usart) != STATUS_OK)
     bd8:	466a      	mov	r2, sp
     bda:	4913      	ldr	r1, [pc, #76]	; (c28 <config_UART+0xb4>)
     bdc:	0028      	movs	r0, r5
     bde:	47a0      	blx	r4
     be0:	2800      	cmp	r0, #0
     be2:	d1f8      	bne.n	bd6 <config_UART+0x62>
	SercomUsart *const usart_hw = &(module->hw->USART);
     be4:	4d0e      	ldr	r5, [pc, #56]	; (c20 <config_UART+0xac>)
     be6:	682c      	ldr	r4, [r5, #0]
	system_interrupt_enable(_sercom_get_interrupt_vector(module->hw));
     be8:	0020      	movs	r0, r4
     bea:	4b10      	ldr	r3, [pc, #64]	; (c2c <config_UART+0xb8>)
     bec:	4798      	blx	r3
     bee:	231f      	movs	r3, #31
     bf0:	4018      	ands	r0, r3
     bf2:	3b1e      	subs	r3, #30
     bf4:	4083      	lsls	r3, r0
     bf6:	4a0e      	ldr	r2, [pc, #56]	; (c30 <config_UART+0xbc>)
     bf8:	6013      	str	r3, [r2, #0]
	SercomUsart *const usart_hw = &(module->hw->USART);
     bfa:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
     bfc:	8a13      	ldrh	r3, [r2, #16]
	while (usart_is_syncing(module)) {
     bfe:	b21b      	sxth	r3, r3
     c00:	2b00      	cmp	r3, #0
     c02:	dbfb      	blt.n	bfc <config_UART+0x88>
	usart_hw->CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
     c04:	6823      	ldr	r3, [r4, #0]
     c06:	2202      	movs	r2, #2
     c08:	4313      	orrs	r3, r2
     c0a:	6023      	str	r3, [r4, #0]
}
     c0c:	b015      	add	sp, #84	; 0x54
     c0e:	bd30      	pop	{r4, r5, pc}
     c10:	00001d28 	.word	0x00001d28
     c14:	00001a89 	.word	0x00001a89
     c18:	00280003 	.word	0x00280003
     c1c:	00290003 	.word	0x00290003
     c20:	200000c0 	.word	0x200000c0
     c24:	00000ced 	.word	0x00000ced
     c28:	42001800 	.word	0x42001800
     c2c:	0000120d 	.word	0x0000120d
     c30:	e000e100 	.word	0xe000e100

00000c34 <config_UART_Callback>:
{
     c34:	b530      	push	{r4, r5, lr}
     c36:	b08b      	sub	sp, #44	; 0x2c
	uint8_t statusMsg[] = "Configuring UART Callbacks....\r\n";
     c38:	a801      	add	r0, sp, #4
     c3a:	4b0f      	ldr	r3, [pc, #60]	; (c78 <config_UART_Callback+0x44>)
     c3c:	0002      	movs	r2, r0
     c3e:	cb32      	ldmia	r3!, {r1, r4, r5}
     c40:	c232      	stmia	r2!, {r1, r4, r5}
     c42:	cb32      	ldmia	r3!, {r1, r4, r5}
     c44:	c232      	stmia	r2!, {r1, r4, r5}
     c46:	cb12      	ldmia	r3!, {r1, r4}
     c48:	c212      	stmia	r2!, {r1, r4}
     c4a:	781b      	ldrb	r3, [r3, #0]
     c4c:	7013      	strb	r3, [r2, #0]
	writeStr(statusMsg, sizeof(statusMsg));			//uart debug statement
     c4e:	2121      	movs	r1, #33	; 0x21
     c50:	4b0a      	ldr	r3, [pc, #40]	; (c7c <config_UART_Callback+0x48>)
     c52:	4798      	blx	r3
		usart_register_callback(&usart_instance, (usart_callback_t) usart_write_callback, USART_CALLBACK_BUFFER_TRANSMITTED);
     c54:	4c0a      	ldr	r4, [pc, #40]	; (c80 <config_UART_Callback+0x4c>)
     c56:	2200      	movs	r2, #0
     c58:	490a      	ldr	r1, [pc, #40]	; (c84 <config_UART_Callback+0x50>)
     c5a:	0020      	movs	r0, r4
     c5c:	4d0a      	ldr	r5, [pc, #40]	; (c88 <config_UART_Callback+0x54>)
     c5e:	47a8      	blx	r5
		usart_register_callback(&usart_instance, (usart_callback_t) usart_read_callback, USART_CALLBACK_BUFFER_RECEIVED);
     c60:	2201      	movs	r2, #1
     c62:	490a      	ldr	r1, [pc, #40]	; (c8c <config_UART_Callback+0x58>)
     c64:	0020      	movs	r0, r4
     c66:	47a8      	blx	r5
{
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
     c68:	2221      	movs	r2, #33	; 0x21
     c6a:	5ca3      	ldrb	r3, [r4, r2]
     c6c:	2103      	movs	r1, #3
     c6e:	430b      	orrs	r3, r1
     c70:	54a3      	strb	r3, [r4, r2]
}
     c72:	b00b      	add	sp, #44	; 0x2c
     c74:	bd30      	pop	{r4, r5, pc}
     c76:	46c0      	nop			; (mov r8, r8)
     c78:	00001d48 	.word	0x00001d48
     c7c:	00001a89 	.word	0x00001a89
     c80:	200000c0 	.word	0x200000c0
     c84:	00000b71 	.word	0x00000b71
     c88:	00001071 	.word	0x00001071
     c8c:	00000cad 	.word	0x00000cad

00000c90 <UART_Continuous>:
 * @return				- void
 *
 * @note				- called from usart_read_callback
 ******************************************************************************************************/
void UART_Continuous(void)
{
     c90:	b510      	push	{r4, lr}
	usart_read_buffer_job(&usart_instance, &ch_buffer, 1);
     c92:	2201      	movs	r2, #1
     c94:	4902      	ldr	r1, [pc, #8]	; (ca0 <UART_Continuous+0x10>)
     c96:	4803      	ldr	r0, [pc, #12]	; (ca4 <UART_Continuous+0x14>)
     c98:	4b03      	ldr	r3, [pc, #12]	; (ca8 <UART_Continuous+0x18>)
     c9a:	4798      	blx	r3
}
     c9c:	bd10      	pop	{r4, pc}
     c9e:	46c0      	nop			; (mov r8, r8)
     ca0:	200000bc 	.word	0x200000bc
     ca4:	200000c0 	.word	0x200000c0
     ca8:	00001089 	.word	0x00001089

00000cac <usart_read_callback>:
{
     cac:	b510      	push	{r4, lr}
	tx_rx_buffer[rx_index] = ch_buffer;
     cae:	480a      	ldr	r0, [pc, #40]	; (cd8 <usart_read_callback+0x2c>)
     cb0:	8803      	ldrh	r3, [r0, #0]
     cb2:	4a0a      	ldr	r2, [pc, #40]	; (cdc <usart_read_callback+0x30>)
     cb4:	7811      	ldrb	r1, [r2, #0]
     cb6:	4a0a      	ldr	r2, [pc, #40]	; (ce0 <usart_read_callback+0x34>)
     cb8:	54d1      	strb	r1, [r2, r3]
	tx_rx_buffer[rx_index+1] = 0;		// clear future buffer
     cba:	18d2      	adds	r2, r2, r3
     cbc:	2400      	movs	r4, #0
     cbe:	7054      	strb	r4, [r2, #1]
	tx_rx_buffer[rx_index+2] = 0;		// clear future buffer
     cc0:	7094      	strb	r4, [r2, #2]
	rx_index++;
     cc2:	3301      	adds	r3, #1
     cc4:	8003      	strh	r3, [r0, #0]
	if (ch_buffer == 0x0A)	// this is four because there are four chars plus a fifth "0x0A" at the end of every response from the encoder
     cc6:	290a      	cmp	r1, #10
     cc8:	d002      	beq.n	cd0 <usart_read_callback+0x24>
	UART_Continuous();		// listen for next UART msg
     cca:	4b06      	ldr	r3, [pc, #24]	; (ce4 <usart_read_callback+0x38>)
     ccc:	4798      	blx	r3
}
     cce:	bd10      	pop	{r4, pc}
		USART_data_available = TRUE;
     cd0:	2201      	movs	r2, #1
     cd2:	4b05      	ldr	r3, [pc, #20]	; (ce8 <usart_read_callback+0x3c>)
     cd4:	701a      	strb	r2, [r3, #0]
     cd6:	e7f8      	b.n	cca <usart_read_callback+0x1e>
     cd8:	200003be 	.word	0x200003be
     cdc:	200000bc 	.word	0x200000bc
     ce0:	200000e8 	.word	0x200000e8
     ce4:	00000c91 	.word	0x00000c91
     ce8:	200003bc 	.word	0x200003bc

00000cec <usart_init>:
 */
enum status_code usart_init(
		struct usart_module *const module,
		Sercom *const hw,
		const struct usart_config *const config)
{
     cec:	b5f0      	push	{r4, r5, r6, r7, lr}
     cee:	46de      	mov	lr, fp
     cf0:	4657      	mov	r7, sl
     cf2:	464e      	mov	r6, r9
     cf4:	4645      	mov	r5, r8
     cf6:	b5e0      	push	{r5, r6, r7, lr}
     cf8:	b08d      	sub	sp, #52	; 0x34
     cfa:	0005      	movs	r5, r0
     cfc:	000c      	movs	r4, r1
     cfe:	0016      	movs	r6, r2
	Assert(config);

	enum status_code status_code = STATUS_OK;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
     d00:	6029      	str	r1, [r5, #0]

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     d02:	0008      	movs	r0, r1
     d04:	4b80      	ldr	r3, [pc, #512]	; (f08 <usart_init+0x21c>)
     d06:	4798      	blx	r3
     d08:	0002      	movs	r2, r0
#else
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
#endif

	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     d0a:	6823      	ldr	r3, [r4, #0]
		/* The module is busy resetting itself */
		return STATUS_BUSY;
     d0c:	2005      	movs	r0, #5
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_SWRST) {
     d0e:	07db      	lsls	r3, r3, #31
     d10:	d506      	bpl.n	d20 <usart_init+0x34>
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
	_sercom_instances[instance_index] = module;
#endif

	return status_code;
}
     d12:	b00d      	add	sp, #52	; 0x34
     d14:	bc3c      	pop	{r2, r3, r4, r5}
     d16:	4690      	mov	r8, r2
     d18:	4699      	mov	r9, r3
     d1a:	46a2      	mov	sl, r4
     d1c:	46ab      	mov	fp, r5
     d1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     d20:	6823      	ldr	r3, [r4, #0]
		return STATUS_ERR_DENIED;
     d22:	3017      	adds	r0, #23
	if (usart_hw->CTRLA.reg & SERCOM_USART_CTRLA_ENABLE) {
     d24:	079b      	lsls	r3, r3, #30
     d26:	d4f4      	bmi.n	d12 <usart_init+0x26>
     d28:	4978      	ldr	r1, [pc, #480]	; (f0c <usart_init+0x220>)
     d2a:	6a08      	ldr	r0, [r1, #32]
	pm_index     = sercom_index + PM_APBCMASK_SERCOM0_Pos;
     d2c:	1c97      	adds	r7, r2, #2
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBC, 1 << pm_index);
     d2e:	2301      	movs	r3, #1
     d30:	40bb      	lsls	r3, r7
     d32:	4303      	orrs	r3, r0
     d34:	620b      	str	r3, [r1, #32]
	gclk_chan_conf.source_generator = config->generator_source;
     d36:	a90b      	add	r1, sp, #44	; 0x2c
     d38:	7f73      	ldrb	r3, [r6, #29]
     d3a:	700b      	strb	r3, [r1, #0]
	gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     d3c:	320d      	adds	r2, #13
	system_gclk_chan_set_config(gclk_index, &gclk_chan_conf);
     d3e:	b2d7      	uxtb	r7, r2
     d40:	0038      	movs	r0, r7
     d42:	4b73      	ldr	r3, [pc, #460]	; (f10 <usart_init+0x224>)
     d44:	4798      	blx	r3
	system_gclk_chan_enable(gclk_index);
     d46:	0038      	movs	r0, r7
     d48:	4b72      	ldr	r3, [pc, #456]	; (f14 <usart_init+0x228>)
     d4a:	4798      	blx	r3
	sercom_set_gclk_generator(config->generator_source, false);
     d4c:	7f70      	ldrb	r0, [r6, #29]
     d4e:	2100      	movs	r1, #0
     d50:	4b71      	ldr	r3, [pc, #452]	; (f18 <usart_init+0x22c>)
     d52:	4798      	blx	r3
	module->character_size = config->character_size;
     d54:	7af3      	ldrb	r3, [r6, #11]
     d56:	716b      	strb	r3, [r5, #5]
	module->receiver_enabled = config->receiver_enable;
     d58:	7d33      	ldrb	r3, [r6, #20]
     d5a:	71ab      	strb	r3, [r5, #6]
	module->transmitter_enabled = config->transmitter_enable;
     d5c:	7d73      	ldrb	r3, [r6, #21]
     d5e:	71eb      	strb	r3, [r5, #7]
	SercomUsart *const usart_hw = &(module->hw->USART);
     d60:	682b      	ldr	r3, [r5, #0]
     d62:	4698      	mov	r8, r3
	uint32_t sercom_index = _sercom_get_sercom_inst_index(module->hw);
     d64:	0018      	movs	r0, r3
     d66:	4b68      	ldr	r3, [pc, #416]	; (f08 <usart_init+0x21c>)
     d68:	4798      	blx	r3
	uint32_t gclk_index   = sercom_index + SERCOM0_GCLK_ID_CORE;
     d6a:	300d      	adds	r0, #13
	uint16_t baud  = 0;
     d6c:	2200      	movs	r2, #0
     d6e:	230e      	movs	r3, #14
     d70:	a902      	add	r1, sp, #8
     d72:	468c      	mov	ip, r1
     d74:	4463      	add	r3, ip
     d76:	801a      	strh	r2, [r3, #0]
	ctrla = (uint32_t)config->data_order |
     d78:	6833      	ldr	r3, [r6, #0]
     d7a:	9303      	str	r3, [sp, #12]
		(uint32_t)config->mux_setting |
     d7c:	68f3      	ldr	r3, [r6, #12]
     d7e:	469a      	mov	sl, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     d80:	7db3      	ldrb	r3, [r6, #22]
     d82:	469b      	mov	fp, r3
	transfer_mode = (uint32_t)config->transfer_mode;
     d84:	6873      	ldr	r3, [r6, #4]
     d86:	4699      	mov	r9, r3
	switch (transfer_mode)
     d88:	2b00      	cmp	r3, #0
     d8a:	d014      	beq.n	db6 <usart_init+0xca>
     d8c:	2380      	movs	r3, #128	; 0x80
     d8e:	055b      	lsls	r3, r3, #21
     d90:	4599      	cmp	r9, r3
     d92:	d130      	bne.n	df6 <usart_init+0x10a>
			if (!config->use_external_clock) {
     d94:	7df3      	ldrb	r3, [r6, #23]
     d96:	2b00      	cmp	r3, #0
     d98:	d131      	bne.n	dfe <usart_init+0x112>
				status_code = _sercom_get_sync_baud_val(config->baudrate,
     d9a:	6933      	ldr	r3, [r6, #16]
     d9c:	001f      	movs	r7, r3
     d9e:	b2c0      	uxtb	r0, r0
     da0:	4b5e      	ldr	r3, [pc, #376]	; (f1c <usart_init+0x230>)
     da2:	4798      	blx	r3
     da4:	0001      	movs	r1, r0
     da6:	220e      	movs	r2, #14
     da8:	ab02      	add	r3, sp, #8
     daa:	469c      	mov	ip, r3
     dac:	4462      	add	r2, ip
     dae:	0038      	movs	r0, r7
     db0:	4b5b      	ldr	r3, [pc, #364]	; (f20 <usart_init+0x234>)
     db2:	4798      	blx	r3
     db4:	e020      	b.n	df8 <usart_init+0x10c>
			if (config->use_external_clock) {
     db6:	7df3      	ldrb	r3, [r6, #23]
     db8:	2b00      	cmp	r3, #0
     dba:	d00b      	beq.n	dd4 <usart_init+0xe8>
				status_code =
     dbc:	2310      	movs	r3, #16
     dbe:	9300      	str	r3, [sp, #0]
     dc0:	2300      	movs	r3, #0
     dc2:	220e      	movs	r2, #14
     dc4:	a902      	add	r1, sp, #8
     dc6:	468c      	mov	ip, r1
     dc8:	4462      	add	r2, ip
     dca:	69b1      	ldr	r1, [r6, #24]
     dcc:	6930      	ldr	r0, [r6, #16]
     dce:	4f55      	ldr	r7, [pc, #340]	; (f24 <usart_init+0x238>)
     dd0:	47b8      	blx	r7
     dd2:	e011      	b.n	df8 <usart_init+0x10c>
						_sercom_get_async_baud_val(config->baudrate,
     dd4:	6933      	ldr	r3, [r6, #16]
     dd6:	001f      	movs	r7, r3
     dd8:	b2c0      	uxtb	r0, r0
     dda:	4b50      	ldr	r3, [pc, #320]	; (f1c <usart_init+0x230>)
     ddc:	4798      	blx	r3
     dde:	0001      	movs	r1, r0
				status_code =
     de0:	2310      	movs	r3, #16
     de2:	9300      	str	r3, [sp, #0]
     de4:	2300      	movs	r3, #0
     de6:	220e      	movs	r2, #14
     de8:	a802      	add	r0, sp, #8
     dea:	4684      	mov	ip, r0
     dec:	4462      	add	r2, ip
     dee:	0038      	movs	r0, r7
     df0:	4f4c      	ldr	r7, [pc, #304]	; (f24 <usart_init+0x238>)
     df2:	47b8      	blx	r7
     df4:	e000      	b.n	df8 <usart_init+0x10c>
	enum status_code status_code = STATUS_OK;
     df6:	2000      	movs	r0, #0
	if (status_code != STATUS_OK) {
     df8:	2800      	cmp	r0, #0
     dfa:	d000      	beq.n	dfe <usart_init+0x112>
     dfc:	e789      	b.n	d12 <usart_init+0x26>
	SercomUsart *const usart_hw = &(module->hw->USART);
     dfe:	682a      	ldr	r2, [r5, #0]
     e00:	9f03      	ldr	r7, [sp, #12]
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
     e02:	8a13      	ldrh	r3, [r2, #16]
	while (usart_is_syncing(module)) {
     e04:	b21b      	sxth	r3, r3
     e06:	2b00      	cmp	r3, #0
     e08:	dbfb      	blt.n	e02 <usart_init+0x116>
	usart_hw->BAUD.reg = baud;
     e0a:	230e      	movs	r3, #14
     e0c:	aa02      	add	r2, sp, #8
     e0e:	4694      	mov	ip, r2
     e10:	4463      	add	r3, ip
     e12:	881b      	ldrh	r3, [r3, #0]
     e14:	4642      	mov	r2, r8
     e16:	8153      	strh	r3, [r2, #10]
	ctrla |= transfer_mode;
     e18:	4653      	mov	r3, sl
     e1a:	431f      	orrs	r7, r3
     e1c:	464b      	mov	r3, r9
     e1e:	431f      	orrs	r7, r3
		(config->clock_polarity_inverted << SERCOM_USART_CTRLA_CPOL_Pos);
     e20:	465b      	mov	r3, fp
     e22:	075b      	lsls	r3, r3, #29
	ctrla |= transfer_mode;
     e24:	431f      	orrs	r7, r3
	if (config->use_external_clock == false) {
     e26:	7df3      	ldrb	r3, [r6, #23]
     e28:	2b00      	cmp	r3, #0
     e2a:	d101      	bne.n	e30 <usart_init+0x144>
		ctrla |= SERCOM_USART_CTRLA_MODE(0x1);
     e2c:	3304      	adds	r3, #4
     e2e:	431f      	orrs	r7, r3
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     e30:	7d31      	ldrb	r1, [r6, #20]
     e32:	0449      	lsls	r1, r1, #17
			(config->transmitter_enable << SERCOM_USART_CTRLB_TXEN_Pos);
     e34:	7d73      	ldrb	r3, [r6, #21]
     e36:	041b      	lsls	r3, r3, #16
			(config->receiver_enable << SERCOM_USART_CTRLB_RXEN_Pos) |
     e38:	430b      	orrs	r3, r1
	ctrlb |= (uint32_t)config->character_size;
     e3a:	7ab1      	ldrb	r1, [r6, #10]
     e3c:	7af2      	ldrb	r2, [r6, #11]
     e3e:	4311      	orrs	r1, r2
     e40:	4319      	orrs	r1, r3
	if (config->parity != USART_PARITY_NONE) {
     e42:	8933      	ldrh	r3, [r6, #8]
     e44:	2bff      	cmp	r3, #255	; 0xff
     e46:	d003      	beq.n	e50 <usart_init+0x164>
		ctrla |= SERCOM_USART_CTRLA_FORM(1);
     e48:	2280      	movs	r2, #128	; 0x80
     e4a:	0452      	lsls	r2, r2, #17
     e4c:	4317      	orrs	r7, r2
		ctrlb |= config->parity;
     e4e:	4319      	orrs	r1, r3
	if (config->run_in_standby || system_is_debugger_present()) {
     e50:	7f33      	ldrb	r3, [r6, #28]
     e52:	2b00      	cmp	r3, #0
     e54:	d103      	bne.n	e5e <usart_init+0x172>
     e56:	4b34      	ldr	r3, [pc, #208]	; (f28 <usart_init+0x23c>)
     e58:	789b      	ldrb	r3, [r3, #2]
     e5a:	079b      	lsls	r3, r3, #30
     e5c:	d501      	bpl.n	e62 <usart_init+0x176>
		ctrla |= SERCOM_USART_CTRLA_RUNSTDBY;
     e5e:	2380      	movs	r3, #128	; 0x80
     e60:	431f      	orrs	r7, r3
	SercomUsart *const usart_hw = &(module->hw->USART);
     e62:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
     e64:	8a13      	ldrh	r3, [r2, #16]
	while (usart_is_syncing(module)) {
     e66:	b21b      	sxth	r3, r3
     e68:	2b00      	cmp	r3, #0
     e6a:	dbfb      	blt.n	e64 <usart_init+0x178>
	usart_hw->CTRLB.reg = ctrlb;
     e6c:	4643      	mov	r3, r8
     e6e:	6059      	str	r1, [r3, #4]
	SercomUsart *const usart_hw = &(module->hw->USART);
     e70:	682a      	ldr	r2, [r5, #0]
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
     e72:	8a13      	ldrh	r3, [r2, #16]
	while (usart_is_syncing(module)) {
     e74:	b21b      	sxth	r3, r3
     e76:	2b00      	cmp	r3, #0
     e78:	dbfb      	blt.n	e72 <usart_init+0x186>
	usart_hw->CTRLA.reg = ctrla;
     e7a:	4643      	mov	r3, r8
     e7c:	601f      	str	r7, [r3, #0]
	config->mux_position = SYSTEM_PINMUX_GPIO;
     e7e:	ab0a      	add	r3, sp, #40	; 0x28
     e80:	2280      	movs	r2, #128	; 0x80
     e82:	701a      	strb	r2, [r3, #0]
	config->direction    = SYSTEM_PINMUX_PIN_DIR_INPUT;
     e84:	2200      	movs	r2, #0
     e86:	705a      	strb	r2, [r3, #1]
	config->powersave    = false;
     e88:	70da      	strb	r2, [r3, #3]
	pin_conf.input_pull = SYSTEM_PINMUX_PIN_PULL_NONE;
     e8a:	709a      	strb	r2, [r3, #2]
	uint32_t pad_pinmuxes[] = {
     e8c:	6a33      	ldr	r3, [r6, #32]
     e8e:	9306      	str	r3, [sp, #24]
     e90:	6a73      	ldr	r3, [r6, #36]	; 0x24
     e92:	9307      	str	r3, [sp, #28]
     e94:	6ab3      	ldr	r3, [r6, #40]	; 0x28
     e96:	9308      	str	r3, [sp, #32]
     e98:	6af3      	ldr	r3, [r6, #44]	; 0x2c
     e9a:	9303      	str	r3, [sp, #12]
     e9c:	9309      	str	r3, [sp, #36]	; 0x24
     e9e:	2700      	movs	r7, #0
		uint32_t current_pinmux = pad_pinmuxes[pad];
     ea0:	ae06      	add	r6, sp, #24
     ea2:	e006      	b.n	eb2 <usart_init+0x1c6>
			current_pinmux = _sercom_get_default_pad(hw, pad);
     ea4:	0020      	movs	r0, r4
     ea6:	4b21      	ldr	r3, [pc, #132]	; (f2c <usart_init+0x240>)
     ea8:	4798      	blx	r3
     eaa:	e007      	b.n	ebc <usart_init+0x1d0>
     eac:	3701      	adds	r7, #1
	for (uint8_t pad = 0; pad < 4; pad++) {
     eae:	2f04      	cmp	r7, #4
     eb0:	d00d      	beq.n	ece <usart_init+0x1e2>
     eb2:	b2f9      	uxtb	r1, r7
		uint32_t current_pinmux = pad_pinmuxes[pad];
     eb4:	00bb      	lsls	r3, r7, #2
     eb6:	5998      	ldr	r0, [r3, r6]
		if (current_pinmux == PINMUX_DEFAULT) {
     eb8:	2800      	cmp	r0, #0
     eba:	d0f3      	beq.n	ea4 <usart_init+0x1b8>
		if (current_pinmux != PINMUX_UNUSED) {
     ebc:	1c43      	adds	r3, r0, #1
     ebe:	d0f5      	beq.n	eac <usart_init+0x1c0>
			pin_conf.mux_position = current_pinmux & 0xFFFF;
     ec0:	a90a      	add	r1, sp, #40	; 0x28
     ec2:	7008      	strb	r0, [r1, #0]
			system_pinmux_pin_set_config(current_pinmux >> 16, &pin_conf);
     ec4:	0c00      	lsrs	r0, r0, #16
     ec6:	b2c0      	uxtb	r0, r0
     ec8:	4b19      	ldr	r3, [pc, #100]	; (f30 <usart_init+0x244>)
     eca:	4798      	blx	r3
     ecc:	e7ee      	b.n	eac <usart_init+0x1c0>
		module->callback[i]            = NULL;
     ece:	2300      	movs	r3, #0
     ed0:	60ab      	str	r3, [r5, #8]
     ed2:	60eb      	str	r3, [r5, #12]
     ed4:	612b      	str	r3, [r5, #16]
	module->tx_buffer_ptr              = NULL;
     ed6:	61ab      	str	r3, [r5, #24]
	module->rx_buffer_ptr              = NULL;
     ed8:	616b      	str	r3, [r5, #20]
	module->remaining_tx_buffer_length = 0x0000;
     eda:	2200      	movs	r2, #0
     edc:	83eb      	strh	r3, [r5, #30]
	module->remaining_rx_buffer_length = 0x0000;
     ede:	83ab      	strh	r3, [r5, #28]
	module->callback_reg_mask          = 0x00;
     ee0:	3320      	adds	r3, #32
     ee2:	54ea      	strb	r2, [r5, r3]
	module->callback_enable_mask       = 0x00;
     ee4:	3301      	adds	r3, #1
     ee6:	54ea      	strb	r2, [r5, r3]
	module->rx_status                  = STATUS_OK;
     ee8:	3301      	adds	r3, #1
     eea:	54ea      	strb	r2, [r5, r3]
	module->tx_status                  = STATUS_OK;
     eec:	3301      	adds	r3, #1
     eee:	54ea      	strb	r2, [r5, r3]
	uint8_t instance_index = _sercom_get_sercom_inst_index(module->hw);
     ef0:	6828      	ldr	r0, [r5, #0]
     ef2:	4b05      	ldr	r3, [pc, #20]	; (f08 <usart_init+0x21c>)
     ef4:	4798      	blx	r3
     ef6:	0004      	movs	r4, r0
	_sercom_set_handler(instance_index, _usart_interrupt_handler);
     ef8:	490e      	ldr	r1, [pc, #56]	; (f34 <usart_init+0x248>)
     efa:	4b0f      	ldr	r3, [pc, #60]	; (f38 <usart_init+0x24c>)
     efc:	4798      	blx	r3
	_sercom_instances[instance_index] = module;
     efe:	00a4      	lsls	r4, r4, #2
     f00:	4b0e      	ldr	r3, [pc, #56]	; (f3c <usart_init+0x250>)
     f02:	50e5      	str	r5, [r4, r3]
	return status_code;
     f04:	2000      	movs	r0, #0
     f06:	e704      	b.n	d12 <usart_init+0x26>
     f08:	000009e9 	.word	0x000009e9
     f0c:	40000400 	.word	0x40000400
     f10:	00001895 	.word	0x00001895
     f14:	00001809 	.word	0x00001809
     f18:	00000825 	.word	0x00000825
     f1c:	000018b1 	.word	0x000018b1
     f20:	00000767 	.word	0x00000767
     f24:	00000791 	.word	0x00000791
     f28:	41002000 	.word	0x41002000
     f2c:	00000871 	.word	0x00000871
     f30:	0000198d 	.word	0x0000198d
     f34:	000010a9 	.word	0x000010a9
     f38:	000011d1 	.word	0x000011d1
     f3c:	20000420 	.word	0x20000420

00000f40 <usart_write_wait>:

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);

	/* Check that the transmitter is enabled */
	if (!(module->transmitter_enabled)) {
     f40:	79c2      	ldrb	r2, [r0, #7]
		return STATUS_ERR_DENIED;
     f42:	231c      	movs	r3, #28
	if (!(module->transmitter_enabled)) {
     f44:	2a00      	cmp	r2, #0
     f46:	d101      	bne.n	f4c <usart_write_wait+0xc>
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
		/* Wait until data is sent */
	}

	return STATUS_OK;
}
     f48:	0018      	movs	r0, r3
     f4a:	4770      	bx	lr
	if (module->remaining_tx_buffer_length > 0) {
     f4c:	8bc2      	ldrh	r2, [r0, #30]
     f4e:	b292      	uxth	r2, r2
		return STATUS_BUSY;
     f50:	3b17      	subs	r3, #23
	if (module->remaining_tx_buffer_length > 0) {
     f52:	2a00      	cmp	r2, #0
     f54:	d1f8      	bne.n	f48 <usart_write_wait+0x8>
	SercomUsart *const usart_hw = &(module->hw->USART);
     f56:	6802      	ldr	r2, [r0, #0]
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
     f58:	8a13      	ldrh	r3, [r2, #16]
	while (usart_is_syncing(module)) {
     f5a:	b21b      	sxth	r3, r3
     f5c:	2b00      	cmp	r3, #0
     f5e:	dbfb      	blt.n	f58 <usart_write_wait+0x18>
	usart_hw->DATA.reg = tx_data;
     f60:	8311      	strh	r1, [r2, #24]
	while (!(usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC)) {
     f62:	2102      	movs	r1, #2
     f64:	7b93      	ldrb	r3, [r2, #14]
     f66:	420b      	tst	r3, r1
     f68:	d0fc      	beq.n	f64 <usart_write_wait+0x24>
	return STATUS_OK;
     f6a:	2300      	movs	r3, #0
     f6c:	e7ec      	b.n	f48 <usart_write_wait+0x8>
	...

00000f70 <usart_write_buffer_wait>:
 */
enum status_code usart_write_buffer_wait(
		struct usart_module *const module,
		const uint8_t *tx_data,
		uint16_t length)
{
     f70:	b5f0      	push	{r4, r5, r6, r7, lr}
     f72:	46ce      	mov	lr, r9
     f74:	4647      	mov	r7, r8
     f76:	b580      	push	{r7, lr}
     f78:	b083      	sub	sp, #12
     f7a:	0005      	movs	r5, r0
     f7c:	9101      	str	r1, [sp, #4]
	Assert(module);
	Assert(module->hw);

	/* Check if the buffer length is valid */
	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
     f7e:	2017      	movs	r0, #23
	if (length == 0) {
     f80:	2a00      	cmp	r2, #0
     f82:	d104      	bne.n	f8e <usart_write_buffer_wait+0x1e>
			return STATUS_ERR_TIMEOUT;
		}
	}

	return STATUS_OK;
}
     f84:	b003      	add	sp, #12
     f86:	bc0c      	pop	{r2, r3}
     f88:	4690      	mov	r8, r2
     f8a:	4699      	mov	r9, r3
     f8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!(module->transmitter_enabled)) {
     f8e:	79eb      	ldrb	r3, [r5, #7]
		return STATUS_ERR_DENIED;
     f90:	3005      	adds	r0, #5
	if (!(module->transmitter_enabled)) {
     f92:	2b00      	cmp	r3, #0
     f94:	d0f6      	beq.n	f84 <usart_write_buffer_wait+0x14>
	SercomUsart *const usart_hw = &(module->hw->USART);
     f96:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
     f98:	8a23      	ldrh	r3, [r4, #16]
	while (usart_is_syncing(module)) {
     f9a:	b21b      	sxth	r3, r3
     f9c:	2b00      	cmp	r3, #0
     f9e:	dbfb      	blt.n	f98 <usart_write_buffer_wait+0x28>
	while (length--) {
     fa0:	3a01      	subs	r2, #1
     fa2:	b293      	uxth	r3, r2
     fa4:	4699      	mov	r9, r3
     fa6:	2600      	movs	r6, #0
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
     fa8:	2701      	movs	r7, #1
	while (length--) {
     faa:	4b20      	ldr	r3, [pc, #128]	; (102c <usart_write_buffer_wait+0xbc>)
     fac:	4698      	mov	r8, r3
     fae:	e011      	b.n	fd4 <usart_write_buffer_wait+0x64>
		uint16_t data_to_send = tx_data[tx_pos++];
     fb0:	1c73      	adds	r3, r6, #1
     fb2:	b29b      	uxth	r3, r3
     fb4:	9a01      	ldr	r2, [sp, #4]
     fb6:	5d91      	ldrb	r1, [r2, r6]
		if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
     fb8:	796a      	ldrb	r2, [r5, #5]
     fba:	2a01      	cmp	r2, #1
     fbc:	d017      	beq.n	fee <usart_write_buffer_wait+0x7e>
		uint16_t data_to_send = tx_data[tx_pos++];
     fbe:	b289      	uxth	r1, r1
     fc0:	001e      	movs	r6, r3
		usart_write_wait(module, data_to_send);
     fc2:	0028      	movs	r0, r5
     fc4:	4b1a      	ldr	r3, [pc, #104]	; (1030 <usart_write_buffer_wait+0xc0>)
     fc6:	4798      	blx	r3
	while (length--) {
     fc8:	464b      	mov	r3, r9
     fca:	3b01      	subs	r3, #1
     fcc:	b29b      	uxth	r3, r3
     fce:	4699      	mov	r9, r3
     fd0:	4543      	cmp	r3, r8
     fd2:	d013      	beq.n	ffc <usart_write_buffer_wait+0x8c>
			if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) {
     fd4:	7ba3      	ldrb	r3, [r4, #14]
     fd6:	423b      	tst	r3, r7
     fd8:	d1ea      	bne.n	fb0 <usart_write_buffer_wait+0x40>
     fda:	4b14      	ldr	r3, [pc, #80]	; (102c <usart_write_buffer_wait+0xbc>)
     fdc:	7ba2      	ldrb	r2, [r4, #14]
     fde:	423a      	tst	r2, r7
     fe0:	d1e6      	bne.n	fb0 <usart_write_buffer_wait+0x40>
			} else if (i == USART_TIMEOUT) {
     fe2:	2b01      	cmp	r3, #1
     fe4:	d019      	beq.n	101a <usart_write_buffer_wait+0xaa>
     fe6:	3b01      	subs	r3, #1
		for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
     fe8:	2b00      	cmp	r3, #0
     fea:	d1f7      	bne.n	fdc <usart_write_buffer_wait+0x6c>
     fec:	e7e0      	b.n	fb0 <usart_write_buffer_wait+0x40>
			data_to_send |= (tx_data[tx_pos++] << 8);
     fee:	3602      	adds	r6, #2
     ff0:	b2b6      	uxth	r6, r6
     ff2:	9a01      	ldr	r2, [sp, #4]
     ff4:	5cd3      	ldrb	r3, [r2, r3]
     ff6:	021b      	lsls	r3, r3, #8
     ff8:	4319      	orrs	r1, r3
     ffa:	e7e2      	b.n	fc2 <usart_write_buffer_wait+0x52>
		if (usart_hw->INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) {
     ffc:	7ba3      	ldrb	r3, [r4, #14]
     ffe:	079b      	lsls	r3, r3, #30
    1000:	d40d      	bmi.n	101e <usart_write_buffer_wait+0xae>
    1002:	4b0a      	ldr	r3, [pc, #40]	; (102c <usart_write_buffer_wait+0xbc>)
    1004:	2102      	movs	r1, #2
    1006:	7ba2      	ldrb	r2, [r4, #14]
    1008:	420a      	tst	r2, r1
    100a:	d10a      	bne.n	1022 <usart_write_buffer_wait+0xb2>
		} else if (i == USART_TIMEOUT) {
    100c:	2b01      	cmp	r3, #1
    100e:	d00a      	beq.n	1026 <usart_write_buffer_wait+0xb6>
    1010:	3b01      	subs	r3, #1
	for (uint32_t i = 0; i <= USART_TIMEOUT; i++) {
    1012:	2b00      	cmp	r3, #0
    1014:	d1f7      	bne.n	1006 <usart_write_buffer_wait+0x96>
	return STATUS_OK;
    1016:	2000      	movs	r0, #0
    1018:	e7b4      	b.n	f84 <usart_write_buffer_wait+0x14>
				return STATUS_ERR_TIMEOUT;
    101a:	2012      	movs	r0, #18
    101c:	e7b2      	b.n	f84 <usart_write_buffer_wait+0x14>
	return STATUS_OK;
    101e:	2000      	movs	r0, #0
    1020:	e7b0      	b.n	f84 <usart_write_buffer_wait+0x14>
    1022:	2000      	movs	r0, #0
    1024:	e7ae      	b.n	f84 <usart_write_buffer_wait+0x14>
			return STATUS_ERR_TIMEOUT;
    1026:	2012      	movs	r0, #18
    1028:	e7ac      	b.n	f84 <usart_write_buffer_wait+0x14>
    102a:	46c0      	nop			; (mov r8, r8)
    102c:	0000ffff 	.word	0x0000ffff
    1030:	00000f41 	.word	0x00000f41

00001034 <_usart_read_buffer>:
 */
enum status_code _usart_read_buffer(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    1034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1036:	0006      	movs	r6, r0
    1038:	000c      	movs	r4, r1
    103a:	0015      	movs	r5, r2
	Assert(module);
	Assert(module->hw);
	Assert(rx_data);

	/* Get a pointer to the hardware module instance */
	SercomUsart *const usart_hw = &(module->hw->USART);
    103c:	6807      	ldr	r7, [r0, #0]
	cpu_irq_enter_critical();
    103e:	4b0a      	ldr	r3, [pc, #40]	; (1068 <_usart_read_buffer+0x34>)
    1040:	4798      	blx	r3

	system_interrupt_enter_critical_section();

	/* Check if the USART receiver is busy */
	if (module->remaining_rx_buffer_length > 0) {
    1042:	8bb3      	ldrh	r3, [r6, #28]
    1044:	b29b      	uxth	r3, r3
    1046:	2b00      	cmp	r3, #0
    1048:	d003      	beq.n	1052 <_usart_read_buffer+0x1e>
	cpu_irq_leave_critical();
    104a:	4b08      	ldr	r3, [pc, #32]	; (106c <_usart_read_buffer+0x38>)
    104c:	4798      	blx	r3
		system_interrupt_leave_critical_section();
		return STATUS_BUSY;
    104e:	2005      	movs	r0, #5
		usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXS;
	}
#endif

	return STATUS_OK;
}
    1050:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	module->remaining_rx_buffer_length = length;
    1052:	83b5      	strh	r5, [r6, #28]
    1054:	4b05      	ldr	r3, [pc, #20]	; (106c <_usart_read_buffer+0x38>)
    1056:	4798      	blx	r3
	module->rx_buffer_ptr              = rx_data;
    1058:	6174      	str	r4, [r6, #20]
	module->rx_status                  = STATUS_BUSY;
    105a:	2205      	movs	r2, #5
    105c:	2322      	movs	r3, #34	; 0x22
    105e:	54f2      	strb	r2, [r6, r3]
	usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_RXC;
    1060:	3b1e      	subs	r3, #30
    1062:	737b      	strb	r3, [r7, #13]
	return STATUS_OK;
    1064:	2000      	movs	r0, #0
    1066:	e7f3      	b.n	1050 <_usart_read_buffer+0x1c>
    1068:	0000140d 	.word	0x0000140d
    106c:	0000144d 	.word	0x0000144d

00001070 <usart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
    1070:	1c93      	adds	r3, r2, #2
    1072:	009b      	lsls	r3, r3, #2
    1074:	5019      	str	r1, [r3, r0]

	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
    1076:	2120      	movs	r1, #32
    1078:	2301      	movs	r3, #1
    107a:	4093      	lsls	r3, r2
    107c:	001a      	movs	r2, r3
    107e:	5c43      	ldrb	r3, [r0, r1]
    1080:	4313      	orrs	r3, r2
    1082:	5443      	strb	r3, [r0, r1]
}
    1084:	4770      	bx	lr
	...

00001088 <usart_read_buffer_job>:
 */
enum status_code usart_read_buffer_job(
		struct usart_module *const module,
		uint8_t *rx_data,
		uint16_t length)
{
    1088:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
    108a:	2317      	movs	r3, #23
	if (length == 0) {
    108c:	2a00      	cmp	r2, #0
    108e:	d101      	bne.n	1094 <usart_read_buffer_job+0xc>
		return STATUS_ERR_DENIED;
	}

	/* Issue internal asynchronous read */
	return _usart_read_buffer(module, rx_data, length);
}
    1090:	0018      	movs	r0, r3
    1092:	bd10      	pop	{r4, pc}
	if (!(module->receiver_enabled)) {
    1094:	7984      	ldrb	r4, [r0, #6]
		return STATUS_ERR_DENIED;
    1096:	3305      	adds	r3, #5
	if (!(module->receiver_enabled)) {
    1098:	2c00      	cmp	r4, #0
    109a:	d0f9      	beq.n	1090 <usart_read_buffer_job+0x8>
	return _usart_read_buffer(module, rx_data, length);
    109c:	4b01      	ldr	r3, [pc, #4]	; (10a4 <usart_read_buffer_job+0x1c>)
    109e:	4798      	blx	r3
    10a0:	0003      	movs	r3, r0
    10a2:	e7f5      	b.n	1090 <usart_read_buffer_job+0x8>
    10a4:	00001035 	.word	0x00001035

000010a8 <_usart_interrupt_handler>:
 * \param[in]  instance  ID of the SERCOM instance calling the interrupt
 *                       handler.
 */
void _usart_interrupt_handler(
		uint8_t instance)
{
    10a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint16_t callback_status;
	uint8_t error_code;


	/* Get device instance from the look-up table */
	struct usart_module *module
    10aa:	0080      	lsls	r0, r0, #2
    10ac:	4b46      	ldr	r3, [pc, #280]	; (11c8 <_usart_interrupt_handler+0x120>)
    10ae:	58c5      	ldr	r5, [r0, r3]
		= (struct usart_module *)_sercom_instances[instance];

	/* Pointer to the hardware module instance */
	SercomUsart *const usart_hw
		= &(module->hw->USART);
    10b0:	682c      	ldr	r4, [r5, #0]
	return (usart_hw->STATUS.reg & SERCOM_USART_STATUS_SYNCBUSY);
    10b2:	8a23      	ldrh	r3, [r4, #16]
	while (usart_is_syncing(module)) {
    10b4:	b21b      	sxth	r3, r3
    10b6:	2b00      	cmp	r3, #0
    10b8:	dbfb      	blt.n	10b2 <_usart_interrupt_handler+0xa>

	/* Wait for the synchronization to complete */
	_usart_wait_for_sync(module);

	/* Read and mask interrupt flag register */
	interrupt_status = usart_hw->INTFLAG.reg;
    10ba:	7ba3      	ldrb	r3, [r4, #14]
	interrupt_status &= usart_hw->INTENSET.reg;
    10bc:	7b66      	ldrb	r6, [r4, #13]
    10be:	401e      	ands	r6, r3
	callback_status = module->callback_reg_mask &
    10c0:	2320      	movs	r3, #32
    10c2:	5ceb      	ldrb	r3, [r5, r3]
    10c4:	2221      	movs	r2, #33	; 0x21
    10c6:	5caf      	ldrb	r7, [r5, r2]
    10c8:	401f      	ands	r7, r3
			module->callback_enable_mask;

	/* Check if a DATA READY interrupt has occurred,
	 * and if there is more to transfer */
	if (interrupt_status & SERCOM_USART_INTFLAG_DRE) {
    10ca:	07f3      	lsls	r3, r6, #31
    10cc:	d522      	bpl.n	1114 <_usart_interrupt_handler+0x6c>
		if (module->remaining_tx_buffer_length) {
    10ce:	8beb      	ldrh	r3, [r5, #30]
    10d0:	b29b      	uxth	r3, r3
    10d2:	2b00      	cmp	r3, #0
    10d4:	d01c      	beq.n	1110 <_usart_interrupt_handler+0x68>
			/* Write value will be at least 8-bits long */
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    10d6:	69aa      	ldr	r2, [r5, #24]
    10d8:	7813      	ldrb	r3, [r2, #0]
    10da:	b2db      	uxtb	r3, r3
			/* Increment 8-bit pointer */
			(module->tx_buffer_ptr)++;
    10dc:	1c51      	adds	r1, r2, #1
    10de:	61a9      	str	r1, [r5, #24]

			if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    10e0:	7969      	ldrb	r1, [r5, #5]
    10e2:	2901      	cmp	r1, #1
    10e4:	d00e      	beq.n	1104 <_usart_interrupt_handler+0x5c>
			uint16_t data_to_send = *(module->tx_buffer_ptr);
    10e6:	b29b      	uxth	r3, r3
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
				/* Increment 8-bit pointer */
				(module->tx_buffer_ptr)++;
			}
			/* Write the data to send */
			usart_hw->DATA.reg = (data_to_send & SERCOM_USART_DATA_MASK);
    10e8:	05db      	lsls	r3, r3, #23
    10ea:	0ddb      	lsrs	r3, r3, #23
    10ec:	8323      	strh	r3, [r4, #24]

			if (--(module->remaining_tx_buffer_length) == 0) {
    10ee:	8beb      	ldrh	r3, [r5, #30]
    10f0:	3b01      	subs	r3, #1
    10f2:	b29b      	uxth	r3, r3
    10f4:	83eb      	strh	r3, [r5, #30]
    10f6:	2b00      	cmp	r3, #0
    10f8:	d10c      	bne.n	1114 <_usart_interrupt_handler+0x6c>
				/* Disable the Data Register Empty Interrupt */
				usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    10fa:	3301      	adds	r3, #1
    10fc:	7323      	strb	r3, [r4, #12]
				/* Enable Transmission Complete interrupt */
				usart_hw->INTENSET.reg = SERCOM_USART_INTFLAG_TXC;
    10fe:	3301      	adds	r3, #1
    1100:	7363      	strb	r3, [r4, #13]
    1102:	e007      	b.n	1114 <_usart_interrupt_handler+0x6c>
				data_to_send |= (*(module->tx_buffer_ptr) << 8);
    1104:	7851      	ldrb	r1, [r2, #1]
    1106:	0209      	lsls	r1, r1, #8
    1108:	430b      	orrs	r3, r1
				(module->tx_buffer_ptr)++;
    110a:	3202      	adds	r2, #2
    110c:	61aa      	str	r2, [r5, #24]
    110e:	e7eb      	b.n	10e8 <_usart_interrupt_handler+0x40>

			}
		} else {
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_DRE;
    1110:	2301      	movs	r3, #1
    1112:	7323      	strb	r3, [r4, #12]
		}
	}

	/* Check if the Transmission Complete interrupt has occurred and
	 * that the transmit buffer is empty */
	if (interrupt_status & SERCOM_USART_INTFLAG_TXC) {
    1114:	07b3      	lsls	r3, r6, #30
    1116:	d506      	bpl.n	1126 <_usart_interrupt_handler+0x7e>

		/* Disable TX Complete Interrupt, and set STATUS_OK */
		usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_TXC;
    1118:	2302      	movs	r3, #2
    111a:	7323      	strb	r3, [r4, #12]
		module->tx_status = STATUS_OK;
    111c:	2200      	movs	r2, #0
    111e:	3321      	adds	r3, #33	; 0x21
    1120:	54ea      	strb	r2, [r5, r3]

		/* Run callback if registered and enabled */
		if (callback_status & (1 << USART_CALLBACK_BUFFER_TRANSMITTED)) {
    1122:	07fb      	lsls	r3, r7, #31
    1124:	d416      	bmi.n	1154 <_usart_interrupt_handler+0xac>
		}
	}

	/* Check if the Receive Complete interrupt has occurred, and that
	 * there's more data to receive */
	if (interrupt_status & SERCOM_USART_INTFLAG_RXC) {
    1126:	0773      	lsls	r3, r6, #29
    1128:	d54d      	bpl.n	11c6 <_usart_interrupt_handler+0x11e>

		if (module->remaining_rx_buffer_length) {
    112a:	8bab      	ldrh	r3, [r5, #28]
    112c:	b29b      	uxth	r3, r3
    112e:	2b00      	cmp	r3, #0
    1130:	d047      	beq.n	11c2 <_usart_interrupt_handler+0x11a>
			/* Read out the status code and mask away all but the 4 LSBs*/
			error_code = (uint8_t)(usart_hw->STATUS.reg & SERCOM_USART_STATUS_MASK);
    1132:	8a23      	ldrh	r3, [r4, #16]
    1134:	b2db      	uxtb	r3, r3
			if(error_code & SERCOM_USART_STATUS_TXE) {
				error_code &= ~SERCOM_USART_STATUS_TXE;
			}
#endif
			/* Check if an error has occurred during the receiving */
			if (error_code) {
    1136:	075a      	lsls	r2, r3, #29
    1138:	d020      	beq.n	117c <_usart_interrupt_handler+0xd4>
				/* Check which error occurred */
				if (error_code & SERCOM_USART_STATUS_FERR) {
    113a:	079a      	lsls	r2, r3, #30
    113c:	d50e      	bpl.n	115c <_usart_interrupt_handler+0xb4>
					/* Store the error code and clear flag by writing 1 to it */
					module->rx_status = STATUS_ERR_BAD_FORMAT;
    113e:	221a      	movs	r2, #26
    1140:	2322      	movs	r3, #34	; 0x22
    1142:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_FERR;
    1144:	3b20      	subs	r3, #32
    1146:	8223      	strh	r3, [r4, #16]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_COLL;
				}
#endif

				/* Run callback if registered and enabled */
				if (callback_status
    1148:	077b      	lsls	r3, r7, #29
    114a:	d53c      	bpl.n	11c6 <_usart_interrupt_handler+0x11e>
						& (1 << USART_CALLBACK_ERROR)) {
					(*(module->callback[USART_CALLBACK_ERROR]))(module);
    114c:	692b      	ldr	r3, [r5, #16]
    114e:	0028      	movs	r0, r5
    1150:	4798      	blx	r3
    1152:	e038      	b.n	11c6 <_usart_interrupt_handler+0x11e>
			(*(module->callback[USART_CALLBACK_BUFFER_TRANSMITTED]))(module);
    1154:	0028      	movs	r0, r5
    1156:	68ab      	ldr	r3, [r5, #8]
    1158:	4798      	blx	r3
    115a:	e7e4      	b.n	1126 <_usart_interrupt_handler+0x7e>
				} else if (error_code & SERCOM_USART_STATUS_BUFOVF) {
    115c:	075a      	lsls	r2, r3, #29
    115e:	d505      	bpl.n	116c <_usart_interrupt_handler+0xc4>
					module->rx_status = STATUS_ERR_OVERFLOW;
    1160:	221e      	movs	r2, #30
    1162:	2322      	movs	r3, #34	; 0x22
    1164:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_BUFOVF;
    1166:	3b1e      	subs	r3, #30
    1168:	8223      	strh	r3, [r4, #16]
    116a:	e7ed      	b.n	1148 <_usart_interrupt_handler+0xa0>
				} else if (error_code & SERCOM_USART_STATUS_PERR) {
    116c:	07db      	lsls	r3, r3, #31
    116e:	d5eb      	bpl.n	1148 <_usart_interrupt_handler+0xa0>
					module->rx_status = STATUS_ERR_BAD_DATA;
    1170:	2213      	movs	r2, #19
    1172:	2322      	movs	r3, #34	; 0x22
    1174:	54ea      	strb	r2, [r5, r3]
					usart_hw->STATUS.reg = SERCOM_USART_STATUS_PERR;
    1176:	3b21      	subs	r3, #33	; 0x21
    1178:	8223      	strh	r3, [r4, #16]
    117a:	e7e5      	b.n	1148 <_usart_interrupt_handler+0xa0>

			} else {

				/* Read current packet from DATA register,
				 * increment buffer pointer and decrement buffer length */
				uint16_t received_data = (usart_hw->DATA.reg & SERCOM_USART_DATA_MASK);
    117c:	8b23      	ldrh	r3, [r4, #24]
    117e:	05db      	lsls	r3, r3, #23
    1180:	0ddb      	lsrs	r3, r3, #23

				/* Read value will be at least 8-bits long */
				*(module->rx_buffer_ptr) = received_data;
    1182:	b2da      	uxtb	r2, r3
    1184:	6969      	ldr	r1, [r5, #20]
    1186:	700a      	strb	r2, [r1, #0]
				/* Increment 8-bit pointer */
				module->rx_buffer_ptr += 1;
    1188:	696a      	ldr	r2, [r5, #20]
    118a:	1c51      	adds	r1, r2, #1
    118c:	6169      	str	r1, [r5, #20]

				if (module->character_size == USART_CHARACTER_SIZE_9BIT) {
    118e:	7969      	ldrb	r1, [r5, #5]
    1190:	2901      	cmp	r1, #1
    1192:	d010      	beq.n	11b6 <_usart_interrupt_handler+0x10e>
					/* Increment 8-bit pointer */
					module->rx_buffer_ptr += 1;
				}

				/* Check if the last character have been received */
				if(--(module->remaining_rx_buffer_length) == 0) {
    1194:	8bab      	ldrh	r3, [r5, #28]
    1196:	3b01      	subs	r3, #1
    1198:	b29b      	uxth	r3, r3
    119a:	83ab      	strh	r3, [r5, #28]
    119c:	2b00      	cmp	r3, #0
    119e:	d112      	bne.n	11c6 <_usart_interrupt_handler+0x11e>
					/* Disable RX Complete Interrupt,
					 * and set STATUS_OK */
					usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    11a0:	3304      	adds	r3, #4
    11a2:	7323      	strb	r3, [r4, #12]
					module->rx_status = STATUS_OK;
    11a4:	2200      	movs	r2, #0
    11a6:	331e      	adds	r3, #30
    11a8:	54ea      	strb	r2, [r5, r3]

					/* Run callback if registered and enabled */
					if (callback_status
    11aa:	07bb      	lsls	r3, r7, #30
    11ac:	d50b      	bpl.n	11c6 <_usart_interrupt_handler+0x11e>
							& (1 << USART_CALLBACK_BUFFER_RECEIVED)) {
						(*(module->callback[USART_CALLBACK_BUFFER_RECEIVED]))(module);
    11ae:	68eb      	ldr	r3, [r5, #12]
    11b0:	0028      	movs	r0, r5
    11b2:	4798      	blx	r3
    11b4:	e007      	b.n	11c6 <_usart_interrupt_handler+0x11e>
					*(module->rx_buffer_ptr) = (received_data >> 8);
    11b6:	0a1b      	lsrs	r3, r3, #8
    11b8:	7053      	strb	r3, [r2, #1]
					module->rx_buffer_ptr += 1;
    11ba:	696b      	ldr	r3, [r5, #20]
    11bc:	3301      	adds	r3, #1
    11be:	616b      	str	r3, [r5, #20]
    11c0:	e7e8      	b.n	1194 <_usart_interrupt_handler+0xec>
					}
				}
			}
		} else {
			/* This should not happen. Disable Receive Complete interrupt. */
			usart_hw->INTENCLR.reg = SERCOM_USART_INTFLAG_RXC;
    11c2:	2304      	movs	r3, #4
    11c4:	7323      	strb	r3, [r4, #12]
		if (callback_status & (1 << USART_CALLBACK_START_RECEIVED)) {
			(*(module->callback[USART_CALLBACK_START_RECEIVED]))(module);
		}
	}
#endif
}
    11c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    11c8:	20000420 	.word	0x20000420

000011cc <_sercom_default_handler>:
 */
static void _sercom_default_handler(
		const uint8_t instance)
{
	Assert(false);
}
    11cc:	4770      	bx	lr
	...

000011d0 <_sercom_set_handler>:
 * \param[in]  interrupt_handler  Pointer to instance callback handler.
 */
void _sercom_set_handler(
		const uint8_t instance,
		const sercom_handler_t interrupt_handler)
{
    11d0:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Initialize handlers with default handler and device instances with 0 */
	if (_handler_table_initialized == false) {
    11d2:	4b0a      	ldr	r3, [pc, #40]	; (11fc <_sercom_set_handler+0x2c>)
    11d4:	781b      	ldrb	r3, [r3, #0]
    11d6:	2b00      	cmp	r3, #0
    11d8:	d10c      	bne.n	11f4 <_sercom_set_handler+0x24>
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    11da:	4f09      	ldr	r7, [pc, #36]	; (1200 <_sercom_set_handler+0x30>)
    11dc:	4e09      	ldr	r6, [pc, #36]	; (1204 <_sercom_set_handler+0x34>)
			_sercom_instances[i] = NULL;
    11de:	4d0a      	ldr	r5, [pc, #40]	; (1208 <_sercom_set_handler+0x38>)
    11e0:	2400      	movs	r4, #0
			_sercom_interrupt_handlers[i] = &_sercom_default_handler;
    11e2:	51de      	str	r6, [r3, r7]
			_sercom_instances[i] = NULL;
    11e4:	195a      	adds	r2, r3, r5
    11e6:	6014      	str	r4, [r2, #0]
    11e8:	3304      	adds	r3, #4
		for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    11ea:	2b18      	cmp	r3, #24
    11ec:	d1f9      	bne.n	11e2 <_sercom_set_handler+0x12>
		}

		_handler_table_initialized = true;
    11ee:	2201      	movs	r2, #1
    11f0:	4b02      	ldr	r3, [pc, #8]	; (11fc <_sercom_set_handler+0x2c>)
    11f2:	701a      	strb	r2, [r3, #0]
	}

	/* Save interrupt handler */
	_sercom_interrupt_handlers[instance] = interrupt_handler;
    11f4:	0080      	lsls	r0, r0, #2
    11f6:	4b02      	ldr	r3, [pc, #8]	; (1200 <_sercom_set_handler+0x30>)
    11f8:	50c1      	str	r1, [r0, r3]
}
    11fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    11fc:	20000062 	.word	0x20000062
    1200:	20000064 	.word	0x20000064
    1204:	000011cd 	.word	0x000011cd
    1208:	20000420 	.word	0x20000420

0000120c <_sercom_get_interrupt_vector>:
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM6
 * \retval SYSTEM_INTERRUPT_MODULE_SERCOM7
 */
enum system_interrupt_vector _sercom_get_interrupt_vector(
		Sercom *const sercom_instance)
{
    120c:	b500      	push	{lr}
    120e:	b083      	sub	sp, #12
	const uint8_t sercom_int_vectors[SERCOM_INST_NUM] =
    1210:	2307      	movs	r3, #7
    1212:	466a      	mov	r2, sp
    1214:	7013      	strb	r3, [r2, #0]
    1216:	3301      	adds	r3, #1
    1218:	7053      	strb	r3, [r2, #1]
    121a:	3301      	adds	r3, #1
    121c:	7093      	strb	r3, [r2, #2]
    121e:	3301      	adds	r3, #1
    1220:	70d3      	strb	r3, [r2, #3]
    1222:	3301      	adds	r3, #1
    1224:	7113      	strb	r3, [r2, #4]
    1226:	3301      	adds	r3, #1
    1228:	7153      	strb	r3, [r2, #5]
		{
			MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_VECT_NUM, ~)
		};

	/* Retrieve the index of the SERCOM being requested */
	uint8_t instance_index = _sercom_get_sercom_inst_index(sercom_instance);
    122a:	4b03      	ldr	r3, [pc, #12]	; (1238 <_sercom_get_interrupt_vector+0x2c>)
    122c:	4798      	blx	r3

	/* Get the vector number from the lookup table for the requested SERCOM */
	return (enum system_interrupt_vector)sercom_int_vectors[instance_index];
    122e:	466b      	mov	r3, sp
    1230:	5618      	ldrsb	r0, [r3, r0]
}
    1232:	b003      	add	sp, #12
    1234:	bd00      	pop	{pc}
    1236:	46c0      	nop			; (mov r8, r8)
    1238:	000009e9 	.word	0x000009e9

0000123c <SERCOM0_Handler>:

/** Auto-generate a set of interrupt handlers for each SERCOM in the device */
MREPEAT(SERCOM_INST_NUM, _SERCOM_INTERRUPT_HANDLER, ~)
    123c:	b510      	push	{r4, lr}
    123e:	4b02      	ldr	r3, [pc, #8]	; (1248 <SERCOM0_Handler+0xc>)
    1240:	681b      	ldr	r3, [r3, #0]
    1242:	2000      	movs	r0, #0
    1244:	4798      	blx	r3
    1246:	bd10      	pop	{r4, pc}
    1248:	20000064 	.word	0x20000064

0000124c <SERCOM1_Handler>:
    124c:	b510      	push	{r4, lr}
    124e:	4b02      	ldr	r3, [pc, #8]	; (1258 <SERCOM1_Handler+0xc>)
    1250:	685b      	ldr	r3, [r3, #4]
    1252:	2001      	movs	r0, #1
    1254:	4798      	blx	r3
    1256:	bd10      	pop	{r4, pc}
    1258:	20000064 	.word	0x20000064

0000125c <SERCOM2_Handler>:
    125c:	b510      	push	{r4, lr}
    125e:	4b02      	ldr	r3, [pc, #8]	; (1268 <SERCOM2_Handler+0xc>)
    1260:	689b      	ldr	r3, [r3, #8]
    1262:	2002      	movs	r0, #2
    1264:	4798      	blx	r3
    1266:	bd10      	pop	{r4, pc}
    1268:	20000064 	.word	0x20000064

0000126c <SERCOM3_Handler>:
    126c:	b510      	push	{r4, lr}
    126e:	4b02      	ldr	r3, [pc, #8]	; (1278 <SERCOM3_Handler+0xc>)
    1270:	68db      	ldr	r3, [r3, #12]
    1272:	2003      	movs	r0, #3
    1274:	4798      	blx	r3
    1276:	bd10      	pop	{r4, pc}
    1278:	20000064 	.word	0x20000064

0000127c <SERCOM4_Handler>:
    127c:	b510      	push	{r4, lr}
    127e:	4b02      	ldr	r3, [pc, #8]	; (1288 <SERCOM4_Handler+0xc>)
    1280:	691b      	ldr	r3, [r3, #16]
    1282:	2004      	movs	r0, #4
    1284:	4798      	blx	r3
    1286:	bd10      	pop	{r4, pc}
    1288:	20000064 	.word	0x20000064

0000128c <SERCOM5_Handler>:
    128c:	b510      	push	{r4, lr}
    128e:	4b02      	ldr	r3, [pc, #8]	; (1298 <SERCOM5_Handler+0xc>)
    1290:	695b      	ldr	r3, [r3, #20]
    1292:	2005      	movs	r0, #5
    1294:	4798      	blx	r3
    1296:	bd10      	pop	{r4, pc}
    1298:	20000064 	.word	0x20000064

0000129c <SysTick_Handler>:
 * @note				- 
 ******************************************************************************************************/
void SysTick_Handler(void)
{
	// Your code goes here
}
    129c:	4770      	bx	lr
	...

000012a0 <config_GPIO>:
* @return				- void
*
* @note				- 
******************************************************************************************************/
void config_GPIO(void)
{
    12a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    12a2:	b089      	sub	sp, #36	; 0x24
		uint8_t statusMsg[] = "Configuring GPIO....\r\n";
    12a4:	a802      	add	r0, sp, #8
    12a6:	4b11      	ldr	r3, [pc, #68]	; (12ec <config_GPIO+0x4c>)
    12a8:	0002      	movs	r2, r0
    12aa:	cb32      	ldmia	r3!, {r1, r4, r5}
    12ac:	c232      	stmia	r2!, {r1, r4, r5}
    12ae:	cb12      	ldmia	r3!, {r1, r4}
    12b0:	c212      	stmia	r2!, {r1, r4}
    12b2:	8819      	ldrh	r1, [r3, #0]
    12b4:	8011      	strh	r1, [r2, #0]
    12b6:	789b      	ldrb	r3, [r3, #2]
    12b8:	7093      	strb	r3, [r2, #2]
		writeStr(statusMsg, sizeof(statusMsg));			//uart debug statement
    12ba:	2117      	movs	r1, #23
    12bc:	4b0c      	ldr	r3, [pc, #48]	; (12f0 <config_GPIO+0x50>)
    12be:	4798      	blx	r3
	config->powersave  = false;
    12c0:	ac01      	add	r4, sp, #4
    12c2:	2700      	movs	r7, #0
    12c4:	70a7      	strb	r7, [r4, #2]
		
		struct port_config pin_conf;
		port_get_config_defaults(&pin_conf);

		pin_conf.direction  = PORT_PIN_DIR_OUTPUT;
    12c6:	2301      	movs	r3, #1
    12c8:	7023      	strb	r3, [r4, #0]
		pin_conf.input_pull = PORT_PIN_PULL_DOWN;
    12ca:	2602      	movs	r6, #2
    12cc:	7066      	strb	r6, [r4, #1]
		port_pin_set_config(STATUSLED_GREEN, &pin_conf);
    12ce:	0021      	movs	r1, r4
    12d0:	2013      	movs	r0, #19
    12d2:	4d08      	ldr	r5, [pc, #32]	; (12f4 <config_GPIO+0x54>)
    12d4:	47a8      	blx	r5
		port_pin_set_config(STATUSLED_ORANGE, &pin_conf);
    12d6:	0021      	movs	r1, r4
    12d8:	2012      	movs	r0, #18
    12da:	47a8      	blx	r5

		pin_conf.direction  = PORT_PIN_DIR_INPUT;
    12dc:	7027      	strb	r7, [r4, #0]
		pin_conf.input_pull = PORT_PIN_PULL_DOWN;
    12de:	7066      	strb	r6, [r4, #1]
		port_pin_set_config(LIMIT_SW_PIN, &pin_conf);
    12e0:	0021      	movs	r1, r4
    12e2:	2029      	movs	r0, #41	; 0x29
    12e4:	47a8      	blx	r5
}
    12e6:	b009      	add	sp, #36	; 0x24
    12e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    12ea:	46c0      	nop			; (mov r8, r8)
    12ec:	00001d6c 	.word	0x00001d6c
    12f0:	00001a89 	.word	0x00001a89
    12f4:	00001365 	.word	0x00001365

000012f8 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
    12f8:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_gclk_gen_get_hz(0);
    12fa:	2000      	movs	r0, #0
    12fc:	4b08      	ldr	r3, [pc, #32]	; (1320 <delay_init+0x28>)
    12fe:	4798      	blx	r3
    1300:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
    1302:	4c08      	ldr	r4, [pc, #32]	; (1324 <delay_init+0x2c>)
    1304:	21fa      	movs	r1, #250	; 0xfa
    1306:	0089      	lsls	r1, r1, #2
    1308:	47a0      	blx	r4
    130a:	4b07      	ldr	r3, [pc, #28]	; (1328 <delay_init+0x30>)
    130c:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
    130e:	4907      	ldr	r1, [pc, #28]	; (132c <delay_init+0x34>)
    1310:	0028      	movs	r0, r5
    1312:	47a0      	blx	r4
    1314:	4b06      	ldr	r3, [pc, #24]	; (1330 <delay_init+0x38>)
    1316:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
    1318:	2205      	movs	r2, #5
    131a:	4b06      	ldr	r3, [pc, #24]	; (1334 <delay_init+0x3c>)
    131c:	601a      	str	r2, [r3, #0]
}
    131e:	bd70      	pop	{r4, r5, r6, pc}
    1320:	0000177d 	.word	0x0000177d
    1324:	00001b5d 	.word	0x00001b5d
    1328:	20000014 	.word	0x20000014
    132c:	000f4240 	.word	0x000f4240
    1330:	20000018 	.word	0x20000018
    1334:	e000e010 	.word	0xe000e010

00001338 <delay_cycles_ms>:
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(
		uint32_t n)
{
    1338:	b530      	push	{r4, r5, lr}
	while (n--) {
		/* Devide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
    133a:	4b08      	ldr	r3, [pc, #32]	; (135c <delay_cycles_ms+0x24>)
    133c:	681c      	ldr	r4, [r3, #0]
 */
static inline void delay_cycles(
		const uint32_t n)
{
	if (n > 0) {
		SysTick->LOAD = n;
    133e:	4a08      	ldr	r2, [pc, #32]	; (1360 <delay_cycles_ms+0x28>)
		SysTick->VAL = 0;
    1340:	2500      	movs	r5, #0

		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    1342:	2180      	movs	r1, #128	; 0x80
    1344:	0249      	lsls	r1, r1, #9
	while (n--) {
    1346:	3801      	subs	r0, #1
    1348:	d307      	bcc.n	135a <delay_cycles_ms+0x22>
	if (n > 0) {
    134a:	2c00      	cmp	r4, #0
    134c:	d0fb      	beq.n	1346 <delay_cycles_ms+0xe>
		SysTick->LOAD = n;
    134e:	6054      	str	r4, [r2, #4]
		SysTick->VAL = 0;
    1350:	6095      	str	r5, [r2, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
    1352:	6813      	ldr	r3, [r2, #0]
    1354:	420b      	tst	r3, r1
    1356:	d0fc      	beq.n	1352 <delay_cycles_ms+0x1a>
    1358:	e7f5      	b.n	1346 <delay_cycles_ms+0xe>
	}
}
    135a:	bd30      	pop	{r4, r5, pc}
    135c:	20000014 	.word	0x20000014
    1360:	e000e010 	.word	0xe000e010

00001364 <port_pin_set_config>:
 *  \param[in] config    Configuration settings for the pin
 */
void port_pin_set_config(
		const uint8_t gpio_pin,
		const struct port_config *const config)
{
    1364:	b500      	push	{lr}
    1366:	b083      	sub	sp, #12
	config->mux_position = SYSTEM_PINMUX_GPIO;
    1368:	ab01      	add	r3, sp, #4
    136a:	2280      	movs	r2, #128	; 0x80
    136c:	701a      	strb	r2, [r3, #0]

	struct system_pinmux_config pinmux_config;
	system_pinmux_get_config_defaults(&pinmux_config);

	pinmux_config.mux_position = SYSTEM_PINMUX_GPIO;
	pinmux_config.direction    = (enum system_pinmux_pin_dir)config->direction;
    136e:	780a      	ldrb	r2, [r1, #0]
    1370:	705a      	strb	r2, [r3, #1]
	pinmux_config.input_pull   = (enum system_pinmux_pin_pull)config->input_pull;
    1372:	784a      	ldrb	r2, [r1, #1]
    1374:	709a      	strb	r2, [r3, #2]
	pinmux_config.powersave    = config->powersave;
    1376:	788a      	ldrb	r2, [r1, #2]
    1378:	70da      	strb	r2, [r3, #3]

	system_pinmux_pin_set_config(gpio_pin, &pinmux_config);
    137a:	0019      	movs	r1, r3
    137c:	4b01      	ldr	r3, [pc, #4]	; (1384 <port_pin_set_config+0x20>)
    137e:	4798      	blx	r3
}
    1380:	b003      	add	sp, #12
    1382:	bd00      	pop	{pc}
    1384:	0000198d 	.word	0x0000198d

00001388 <system_board_init>:
{
	/* This function is meant to contain board-specific initialization code
	 * for, e.g., the I/O pins. The initialization can rely on application-
	 * specific board configuration, found in conf_board.h.
	 */
}
    1388:	4770      	bx	lr
	...

0000138c <sys_config>:
 * @return				- void
 *
 * @note				- 
 ******************************************************************************************************/
void sys_config(void)
{
    138c:	b510      	push	{r4, lr}
 	/*Configure system tick to generate periodic interrupts */
 	SysTick_Config(system_gclk_gen_get_hz(GCLK_GENERATOR_0));
    138e:	2000      	movs	r0, #0
    1390:	4b13      	ldr	r3, [pc, #76]	; (13e0 <sys_config+0x54>)
    1392:	4798      	blx	r3
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
    1394:	3801      	subs	r0, #1
    1396:	4b13      	ldr	r3, [pc, #76]	; (13e4 <sys_config+0x58>)
    1398:	4298      	cmp	r0, r3
    139a:	d80d      	bhi.n	13b8 <sys_config+0x2c>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
    139c:	4a12      	ldr	r2, [pc, #72]	; (13e8 <sys_config+0x5c>)
    139e:	6050      	str	r0, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
    13a0:	4812      	ldr	r0, [pc, #72]	; (13ec <sys_config+0x60>)
    13a2:	6a03      	ldr	r3, [r0, #32]
    13a4:	021b      	lsls	r3, r3, #8
    13a6:	0a1b      	lsrs	r3, r3, #8
    13a8:	21c0      	movs	r1, #192	; 0xc0
    13aa:	0609      	lsls	r1, r1, #24
    13ac:	430b      	orrs	r3, r1
    13ae:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
    13b0:	2300      	movs	r3, #0
    13b2:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
    13b4:	3307      	adds	r3, #7
    13b6:	6013      	str	r3, [r2, #0]

	// Initialize UART - Terminal Debug (Debug On/Off in user_board.h)
	#ifdef DEBUG_WITH_UART
		config_UART();
    13b8:	4b0d      	ldr	r3, [pc, #52]	; (13f0 <sys_config+0x64>)
    13ba:	4798      	blx	r3
	#endif

	// Config / Initialize Modules
	config_GPIO();
    13bc:	4b0d      	ldr	r3, [pc, #52]	; (13f4 <sys_config+0x68>)
    13be:	4798      	blx	r3
	//config_encUART();
	//config_encoder();
	//config_Motors();

	config_UART_Callback();		//Terminal UART, Encoder UART
    13c0:	4b0d      	ldr	r3, [pc, #52]	; (13f8 <sys_config+0x6c>)
    13c2:	4798      	blx	r3

	delay_init();
    13c4:	4b0d      	ldr	r3, [pc, #52]	; (13fc <sys_config+0x70>)
    13c6:	4798      	blx	r3
	// Initialize Timer
	//configure_timer();	

	//Clear_Sleep_Timer();

	configure_i2c_slave();
    13c8:	4b0d      	ldr	r3, [pc, #52]	; (1400 <sys_config+0x74>)
    13ca:	4798      	blx	r3
	configure_i2c_slave_callbacks();
    13cc:	4b0d      	ldr	r3, [pc, #52]	; (1404 <sys_config+0x78>)
    13ce:	4798      	blx	r3
	cpu_irq_enable();
    13d0:	2201      	movs	r2, #1
    13d2:	4b0d      	ldr	r3, [pc, #52]	; (1408 <sys_config+0x7c>)
    13d4:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
    13d6:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
    13da:	b662      	cpsie	i

	system_interrupt_enable_global();
	
    13dc:	bd10      	pop	{r4, pc}
    13de:	46c0      	nop			; (mov r8, r8)
    13e0:	0000177d 	.word	0x0000177d
    13e4:	00ffffff 	.word	0x00ffffff
    13e8:	e000e010 	.word	0xe000e010
    13ec:	e000ed00 	.word	0xe000ed00
    13f0:	00000b75 	.word	0x00000b75
    13f4:	000012a1 	.word	0x000012a1
    13f8:	00000c35 	.word	0x00000c35
    13fc:	000012f9 	.word	0x000012f9
    1400:	00000a89 	.word	0x00000a89
    1404:	00000b05 	.word	0x00000b05
    1408:	2000001c 	.word	0x2000001c

0000140c <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
    140c:	4b0c      	ldr	r3, [pc, #48]	; (1440 <cpu_irq_enter_critical+0x34>)
    140e:	681b      	ldr	r3, [r3, #0]
    1410:	2b00      	cmp	r3, #0
    1412:	d106      	bne.n	1422 <cpu_irq_enter_critical+0x16>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    1414:	f3ef 8310 	mrs	r3, PRIMASK
		if (cpu_irq_is_enabled()) {
    1418:	2b00      	cmp	r3, #0
    141a:	d007      	beq.n	142c <cpu_irq_enter_critical+0x20>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
    141c:	2200      	movs	r2, #0
    141e:	4b09      	ldr	r3, [pc, #36]	; (1444 <cpu_irq_enter_critical+0x38>)
    1420:	701a      	strb	r2, [r3, #0]
		}

	}

	cpu_irq_critical_section_counter++;
    1422:	4a07      	ldr	r2, [pc, #28]	; (1440 <cpu_irq_enter_critical+0x34>)
    1424:	6813      	ldr	r3, [r2, #0]
    1426:	3301      	adds	r3, #1
    1428:	6013      	str	r3, [r2, #0]
}
    142a:	4770      	bx	lr
  __ASM volatile ("cpsid i" : : : "memory");
    142c:	b672      	cpsid	i
    142e:	f3bf 8f5f 	dmb	sy
			cpu_irq_disable();
    1432:	2200      	movs	r2, #0
    1434:	4b04      	ldr	r3, [pc, #16]	; (1448 <cpu_irq_enter_critical+0x3c>)
    1436:	701a      	strb	r2, [r3, #0]
			cpu_irq_prev_interrupt_state = true;
    1438:	3201      	adds	r2, #1
    143a:	4b02      	ldr	r3, [pc, #8]	; (1444 <cpu_irq_enter_critical+0x38>)
    143c:	701a      	strb	r2, [r3, #0]
    143e:	e7f0      	b.n	1422 <cpu_irq_enter_critical+0x16>
    1440:	2000007c 	.word	0x2000007c
    1444:	20000080 	.word	0x20000080
    1448:	2000001c 	.word	0x2000001c

0000144c <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
    144c:	4b08      	ldr	r3, [pc, #32]	; (1470 <cpu_irq_leave_critical+0x24>)
    144e:	681a      	ldr	r2, [r3, #0]
    1450:	3a01      	subs	r2, #1
    1452:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
    1454:	681b      	ldr	r3, [r3, #0]
    1456:	2b00      	cmp	r3, #0
    1458:	d109      	bne.n	146e <cpu_irq_leave_critical+0x22>
    145a:	4b06      	ldr	r3, [pc, #24]	; (1474 <cpu_irq_leave_critical+0x28>)
    145c:	781b      	ldrb	r3, [r3, #0]
    145e:	2b00      	cmp	r3, #0
    1460:	d005      	beq.n	146e <cpu_irq_leave_critical+0x22>
		cpu_irq_enable();
    1462:	2201      	movs	r2, #1
    1464:	4b04      	ldr	r3, [pc, #16]	; (1478 <cpu_irq_leave_critical+0x2c>)
    1466:	701a      	strb	r2, [r3, #0]
    1468:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
    146c:	b662      	cpsie	i
	}
}
    146e:	4770      	bx	lr
    1470:	2000007c 	.word	0x2000007c
    1474:	20000080 	.word	0x20000080
    1478:	2000001c 	.word	0x2000001c

0000147c <system_clock_source_get_hz>:
 *
 * \returns Frequency of the given clock source, in Hz.
 */
uint32_t system_clock_source_get_hz(
		const enum system_clock_source clock_source)
{
    147c:	b510      	push	{r4, lr}
	switch (clock_source) {
    147e:	2807      	cmp	r0, #7
    1480:	d803      	bhi.n	148a <system_clock_source_get_hz+0xe>
    1482:	0080      	lsls	r0, r0, #2
    1484:	4b16      	ldr	r3, [pc, #88]	; (14e0 <system_clock_source_get_hz+0x64>)
    1486:	581b      	ldr	r3, [r3, r0]
    1488:	469f      	mov	pc, r3
		}

		return 48000000UL;

	default:
		return 0;
    148a:	2000      	movs	r0, #0
    148c:	e027      	b.n	14de <system_clock_source_get_hz+0x62>
		return _system_clock_inst.xosc.frequency;
    148e:	4b15      	ldr	r3, [pc, #84]	; (14e4 <system_clock_source_get_hz+0x68>)
    1490:	68d8      	ldr	r0, [r3, #12]
    1492:	e024      	b.n	14de <system_clock_source_get_hz+0x62>
		return 8000000UL >> SYSCTRL->OSC8M.bit.PRESC;
    1494:	4b14      	ldr	r3, [pc, #80]	; (14e8 <system_clock_source_get_hz+0x6c>)
    1496:	6a1b      	ldr	r3, [r3, #32]
    1498:	059b      	lsls	r3, r3, #22
    149a:	0f9b      	lsrs	r3, r3, #30
    149c:	4813      	ldr	r0, [pc, #76]	; (14ec <system_clock_source_get_hz+0x70>)
    149e:	40d8      	lsrs	r0, r3
    14a0:	e01d      	b.n	14de <system_clock_source_get_hz+0x62>
		return _system_clock_inst.xosc32k.frequency;
    14a2:	4b10      	ldr	r3, [pc, #64]	; (14e4 <system_clock_source_get_hz+0x68>)
    14a4:	6918      	ldr	r0, [r3, #16]
    14a6:	e01a      	b.n	14de <system_clock_source_get_hz+0x62>
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    14a8:	4b0e      	ldr	r3, [pc, #56]	; (14e4 <system_clock_source_get_hz+0x68>)
    14aa:	681b      	ldr	r3, [r3, #0]
			return 0;
    14ac:	2000      	movs	r0, #0
		if (!(_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_ENABLE))
    14ae:	079b      	lsls	r3, r3, #30
    14b0:	d515      	bpl.n	14de <system_clock_source_get_hz+0x62>
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    14b2:	490d      	ldr	r1, [pc, #52]	; (14e8 <system_clock_source_get_hz+0x6c>)
    14b4:	2210      	movs	r2, #16
    14b6:	68cb      	ldr	r3, [r1, #12]
    14b8:	421a      	tst	r2, r3
    14ba:	d0fc      	beq.n	14b6 <system_clock_source_get_hz+0x3a>
		if (_system_clock_inst.dfll.control & SYSCTRL_DFLLCTRL_MODE) {
    14bc:	4b09      	ldr	r3, [pc, #36]	; (14e4 <system_clock_source_get_hz+0x68>)
    14be:	681b      	ldr	r3, [r3, #0]
    14c0:	075b      	lsls	r3, r3, #29
    14c2:	d401      	bmi.n	14c8 <system_clock_source_get_hz+0x4c>
		return 48000000UL;
    14c4:	480a      	ldr	r0, [pc, #40]	; (14f0 <system_clock_source_get_hz+0x74>)
    14c6:	e00a      	b.n	14de <system_clock_source_get_hz+0x62>
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    14c8:	2000      	movs	r0, #0
    14ca:	4b0a      	ldr	r3, [pc, #40]	; (14f4 <system_clock_source_get_hz+0x78>)
    14cc:	4798      	blx	r3
					(_system_clock_inst.dfll.mul & 0xffff);
    14ce:	4b05      	ldr	r3, [pc, #20]	; (14e4 <system_clock_source_get_hz+0x68>)
    14d0:	689b      	ldr	r3, [r3, #8]
    14d2:	041b      	lsls	r3, r3, #16
    14d4:	0c1b      	lsrs	r3, r3, #16
			return system_gclk_chan_get_hz(SYSCTRL_GCLK_ID_DFLL48) *
    14d6:	4358      	muls	r0, r3
    14d8:	e001      	b.n	14de <system_clock_source_get_hz+0x62>
		return 32768UL;
    14da:	2080      	movs	r0, #128	; 0x80
    14dc:	0200      	lsls	r0, r0, #8
	}
}
    14de:	bd10      	pop	{r4, pc}
    14e0:	00001d84 	.word	0x00001d84
    14e4:	20000084 	.word	0x20000084
    14e8:	40000800 	.word	0x40000800
    14ec:	007a1200 	.word	0x007a1200
    14f0:	02dc6c00 	.word	0x02dc6c00
    14f4:	000018b1 	.word	0x000018b1

000014f8 <system_clock_source_osc8m_set_config>:
 *
 * \param[in] config  OSC8M configuration structure containing the new config
 */
void system_clock_source_osc8m_set_config(
		struct system_clock_source_osc8m_config *const config)
{
    14f8:	b570      	push	{r4, r5, r6, lr}
	SYSCTRL_OSC8M_Type temp = SYSCTRL->OSC8M;
    14fa:	490c      	ldr	r1, [pc, #48]	; (152c <system_clock_source_osc8m_set_config+0x34>)
    14fc:	6a0b      	ldr	r3, [r1, #32]

	/* Use temporary struct to reduce register access */
	temp.bit.PRESC    = config->prescaler;
    14fe:	7804      	ldrb	r4, [r0, #0]
	temp.bit.ONDEMAND = config->on_demand;
    1500:	7885      	ldrb	r5, [r0, #2]
	temp.bit.RUNSTDBY = config->run_in_standby;

	SYSCTRL->OSC8M = temp;
    1502:	7840      	ldrb	r0, [r0, #1]
    1504:	2201      	movs	r2, #1
    1506:	4010      	ands	r0, r2
    1508:	0180      	lsls	r0, r0, #6
    150a:	2640      	movs	r6, #64	; 0x40
    150c:	43b3      	bics	r3, r6
    150e:	4303      	orrs	r3, r0
    1510:	402a      	ands	r2, r5
    1512:	01d2      	lsls	r2, r2, #7
    1514:	2080      	movs	r0, #128	; 0x80
    1516:	4383      	bics	r3, r0
    1518:	4313      	orrs	r3, r2
    151a:	2203      	movs	r2, #3
    151c:	4022      	ands	r2, r4
    151e:	0212      	lsls	r2, r2, #8
    1520:	4803      	ldr	r0, [pc, #12]	; (1530 <system_clock_source_osc8m_set_config+0x38>)
    1522:	4003      	ands	r3, r0
    1524:	4313      	orrs	r3, r2
    1526:	620b      	str	r3, [r1, #32]
}
    1528:	bd70      	pop	{r4, r5, r6, pc}
    152a:	46c0      	nop			; (mov r8, r8)
    152c:	40000800 	.word	0x40000800
    1530:	fffffcff 	.word	0xfffffcff

00001534 <system_clock_source_enable>:
 *                                 device
 */
enum status_code system_clock_source_enable(
		const enum system_clock_source clock_source)
{
	switch (clock_source) {
    1534:	2807      	cmp	r0, #7
    1536:	d803      	bhi.n	1540 <system_clock_source_enable+0xc>
    1538:	0080      	lsls	r0, r0, #2
    153a:	4b1e      	ldr	r3, [pc, #120]	; (15b4 <system_clock_source_enable+0x80>)
    153c:	581b      	ldr	r3, [r3, r0]
    153e:	469f      	mov	pc, r3
		/* Always enabled */
		return STATUS_OK;

	default:
		Assert(false);
		return STATUS_ERR_INVALID_ARG;
    1540:	2017      	movs	r0, #23
    1542:	e036      	b.n	15b2 <system_clock_source_enable+0x7e>
		SYSCTRL->OSC8M.reg |= SYSCTRL_OSC8M_ENABLE;
    1544:	4a1c      	ldr	r2, [pc, #112]	; (15b8 <system_clock_source_enable+0x84>)
    1546:	6a13      	ldr	r3, [r2, #32]
    1548:	2102      	movs	r1, #2
    154a:	430b      	orrs	r3, r1
    154c:	6213      	str	r3, [r2, #32]
		return STATUS_OK;
    154e:	2000      	movs	r0, #0
    1550:	e02f      	b.n	15b2 <system_clock_source_enable+0x7e>
		SYSCTRL->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    1552:	4a19      	ldr	r2, [pc, #100]	; (15b8 <system_clock_source_enable+0x84>)
    1554:	6993      	ldr	r3, [r2, #24]
    1556:	2102      	movs	r1, #2
    1558:	430b      	orrs	r3, r1
    155a:	6193      	str	r3, [r2, #24]
	}

	return STATUS_OK;
    155c:	2000      	movs	r0, #0
		break;
    155e:	e028      	b.n	15b2 <system_clock_source_enable+0x7e>
		SYSCTRL->XOSC.reg |= SYSCTRL_XOSC_ENABLE;
    1560:	4a15      	ldr	r2, [pc, #84]	; (15b8 <system_clock_source_enable+0x84>)
    1562:	8a13      	ldrh	r3, [r2, #16]
    1564:	2102      	movs	r1, #2
    1566:	430b      	orrs	r3, r1
    1568:	8213      	strh	r3, [r2, #16]
	return STATUS_OK;
    156a:	2000      	movs	r0, #0
		break;
    156c:	e021      	b.n	15b2 <system_clock_source_enable+0x7e>
		SYSCTRL->XOSC32K.reg |= SYSCTRL_XOSC32K_ENABLE;
    156e:	4a12      	ldr	r2, [pc, #72]	; (15b8 <system_clock_source_enable+0x84>)
    1570:	8a93      	ldrh	r3, [r2, #20]
    1572:	2102      	movs	r1, #2
    1574:	430b      	orrs	r3, r1
    1576:	8293      	strh	r3, [r2, #20]
	return STATUS_OK;
    1578:	2000      	movs	r0, #0
		break;
    157a:	e01a      	b.n	15b2 <system_clock_source_enable+0x7e>
		_system_clock_inst.dfll.control |= SYSCTRL_DFLLCTRL_ENABLE;
    157c:	4b0f      	ldr	r3, [pc, #60]	; (15bc <system_clock_source_enable+0x88>)
    157e:	681a      	ldr	r2, [r3, #0]
    1580:	2102      	movs	r1, #2
    1582:	430a      	orrs	r2, r1
    1584:	601a      	str	r2, [r3, #0]
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control & ~SYSCTRL_DFLLCTRL_ONDEMAND;
    1586:	681b      	ldr	r3, [r3, #0]
    1588:	4a0d      	ldr	r2, [pc, #52]	; (15c0 <system_clock_source_enable+0x8c>)
    158a:	4013      	ands	r3, r2
    158c:	4a0a      	ldr	r2, [pc, #40]	; (15b8 <system_clock_source_enable+0x84>)
    158e:	8493      	strh	r3, [r2, #36]	; 0x24
	while (!(SYSCTRL->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY)) {
    1590:	0011      	movs	r1, r2
    1592:	2210      	movs	r2, #16
    1594:	68cb      	ldr	r3, [r1, #12]
    1596:	421a      	tst	r2, r3
    1598:	d0fc      	beq.n	1594 <system_clock_source_enable+0x60>
	SYSCTRL->DFLLMUL.reg = _system_clock_inst.dfll.mul;
    159a:	4a08      	ldr	r2, [pc, #32]	; (15bc <system_clock_source_enable+0x88>)
    159c:	6891      	ldr	r1, [r2, #8]
    159e:	4b06      	ldr	r3, [pc, #24]	; (15b8 <system_clock_source_enable+0x84>)
    15a0:	62d9      	str	r1, [r3, #44]	; 0x2c
	SYSCTRL->DFLLVAL.reg = _system_clock_inst.dfll.val;
    15a2:	6851      	ldr	r1, [r2, #4]
    15a4:	6299      	str	r1, [r3, #40]	; 0x28
	SYSCTRL->DFLLCTRL.reg = _system_clock_inst.dfll.control;
    15a6:	6812      	ldr	r2, [r2, #0]
    15a8:	b292      	uxth	r2, r2
    15aa:	849a      	strh	r2, [r3, #36]	; 0x24
	return STATUS_OK;
    15ac:	2000      	movs	r0, #0
    15ae:	e000      	b.n	15b2 <system_clock_source_enable+0x7e>
		return STATUS_OK;
    15b0:	2000      	movs	r0, #0
}
    15b2:	4770      	bx	lr
    15b4:	00001da4 	.word	0x00001da4
    15b8:	40000800 	.word	0x40000800
    15bc:	20000084 	.word	0x20000084
    15c0:	0000ff7f 	.word	0x0000ff7f

000015c4 <system_clock_init>:
 * \note OSC8M is always enabled and if user selects other clocks for GCLK generators,
 * the OSC8M default enable can be disabled after system_clock_init. Make sure the
 * clock switch successfully before disabling OSC8M.
 */
void system_clock_init(void)
{
    15c4:	b530      	push	{r4, r5, lr}
    15c6:	b085      	sub	sp, #20
	/* Various bits in the INTFLAG register can be set to one at startup.
	   This will ensure that these bits are cleared */
	SYSCTRL->INTFLAG.reg = SYSCTRL_INTFLAG_BOD33RDY | SYSCTRL_INTFLAG_BOD33DET |
    15c8:	22c2      	movs	r2, #194	; 0xc2
    15ca:	00d2      	lsls	r2, r2, #3
    15cc:	4b1a      	ldr	r3, [pc, #104]	; (1638 <system_clock_init+0x74>)
    15ce:	609a      	str	r2, [r3, #8]
static inline void system_flash_set_waitstates(uint8_t wait_states)
{
	Assert(NVMCTRL_CTRLB_RWS((uint32_t)wait_states) ==
			((uint32_t)wait_states << NVMCTRL_CTRLB_RWS_Pos));

	NVMCTRL->CTRLB.bit.RWS = wait_states;
    15d0:	4a1a      	ldr	r2, [pc, #104]	; (163c <system_clock_init+0x78>)
    15d2:	6853      	ldr	r3, [r2, #4]
    15d4:	211e      	movs	r1, #30
    15d6:	438b      	bics	r3, r1
    15d8:	6053      	str	r3, [r2, #4]
	gclk_conf.source_generator = GCLK_GENERATOR_1;
    15da:	2301      	movs	r3, #1
    15dc:	466a      	mov	r2, sp
    15de:	7013      	strb	r3, [r2, #0]
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    15e0:	2400      	movs	r4, #0
		system_gclk_chan_set_config(gclk_id, &gclk_conf);
    15e2:	4d17      	ldr	r5, [pc, #92]	; (1640 <system_clock_init+0x7c>)
    15e4:	b2e0      	uxtb	r0, r4
    15e6:	4669      	mov	r1, sp
    15e8:	47a8      	blx	r5
	for (gclk_id = 0; gclk_id < GCLK_NUM; gclk_id++) {
    15ea:	3401      	adds	r4, #1
    15ec:	2c1c      	cmp	r4, #28
    15ee:	d1f9      	bne.n	15e4 <system_clock_init+0x20>
	config->run_in_standby  = false;
    15f0:	a803      	add	r0, sp, #12
    15f2:	2400      	movs	r4, #0
    15f4:	7044      	strb	r4, [r0, #1]
	config->on_demand       = true;
    15f6:	2501      	movs	r5, #1
    15f8:	7085      	strb	r5, [r0, #2]

	/* OSC8M */
	struct system_clock_source_osc8m_config osc8m_conf;
	system_clock_source_osc8m_get_config_defaults(&osc8m_conf);

	osc8m_conf.prescaler       = CONF_CLOCK_OSC8M_PRESCALER;
    15fa:	7004      	strb	r4, [r0, #0]
	osc8m_conf.on_demand       = CONF_CLOCK_OSC8M_ON_DEMAND;
	osc8m_conf.run_in_standby  = CONF_CLOCK_OSC8M_RUN_IN_STANDBY;

	system_clock_source_osc8m_set_config(&osc8m_conf);
    15fc:	4b11      	ldr	r3, [pc, #68]	; (1644 <system_clock_init+0x80>)
    15fe:	4798      	blx	r3
	system_clock_source_enable(SYSTEM_CLOCK_SOURCE_OSC8M);
    1600:	2006      	movs	r0, #6
    1602:	4b11      	ldr	r3, [pc, #68]	; (1648 <system_clock_init+0x84>)
    1604:	4798      	blx	r3


	/* GCLK */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	system_gclk_init();
    1606:	4b11      	ldr	r3, [pc, #68]	; (164c <system_clock_init+0x88>)
    1608:	4798      	blx	r3
	PM->CPUSEL.reg = (uint32_t)divider;
    160a:	4b11      	ldr	r3, [pc, #68]	; (1650 <system_clock_init+0x8c>)
    160c:	721c      	strb	r4, [r3, #8]
			PM->APBASEL.reg = (uint32_t)divider;
    160e:	725c      	strb	r4, [r3, #9]
			PM->APBBSEL.reg = (uint32_t)divider;
    1610:	729c      	strb	r4, [r3, #10]
			PM->APBCSEL.reg = (uint32_t)divider;
    1612:	72dc      	strb	r4, [r3, #11]
{
	/* Sanity check arguments */
	Assert(config);

	/* Default configuration values */
	config->division_factor    = 1;
    1614:	9501      	str	r5, [sp, #4]
	config->high_when_disabled = false;
    1616:	466b      	mov	r3, sp
    1618:	705c      	strb	r4, [r3, #1]
#if SAML21 || SAML22  || SAMR30
	config->source_clock       = GCLK_SOURCE_OSC16M;
#elif (SAMC20) || (SAMC21)
	config->source_clock       = GCLK_SOURCE_OSC48M;
#else
	config->source_clock       = GCLK_SOURCE_OSC8M;
    161a:	2306      	movs	r3, #6
    161c:	466a      	mov	r2, sp
    161e:	7013      	strb	r3, [r2, #0]
#endif
	config->run_in_standby     = false;
    1620:	7214      	strb	r4, [r2, #8]
	config->output_enable      = false;
    1622:	7254      	strb	r4, [r2, #9]
	system_apb_clock_set_divider(SYSTEM_CLOCK_APB_APBC, CONF_CLOCK_APBC_DIVIDER);

	/* GCLK 0 */
#if CONF_CLOCK_CONFIGURE_GCLK == true
	/* Configure the main GCLK last as it might depend on other generators */
	_CONF_CLOCK_GCLK_CONFIG(0, ~);
    1624:	4669      	mov	r1, sp
    1626:	2000      	movs	r0, #0
    1628:	4b0a      	ldr	r3, [pc, #40]	; (1654 <system_clock_init+0x90>)
    162a:	4798      	blx	r3
    162c:	2000      	movs	r0, #0
    162e:	4b0a      	ldr	r3, [pc, #40]	; (1658 <system_clock_init+0x94>)
    1630:	4798      	blx	r3
#endif
}
    1632:	b005      	add	sp, #20
    1634:	bd30      	pop	{r4, r5, pc}
    1636:	46c0      	nop			; (mov r8, r8)
    1638:	40000800 	.word	0x40000800
    163c:	41004000 	.word	0x41004000
    1640:	00001895 	.word	0x00001895
    1644:	000014f9 	.word	0x000014f9
    1648:	00001535 	.word	0x00001535
    164c:	0000165d 	.word	0x0000165d
    1650:	40000400 	.word	0x40000400
    1654:	00001681 	.word	0x00001681
    1658:	00001739 	.word	0x00001739

0000165c <system_gclk_init>:
			PM->APBAMASK.reg |= mask;
    165c:	4a06      	ldr	r2, [pc, #24]	; (1678 <system_gclk_init+0x1c>)
    165e:	6993      	ldr	r3, [r2, #24]
    1660:	2108      	movs	r1, #8
    1662:	430b      	orrs	r3, r1
    1664:	6193      	str	r3, [r2, #24]
{
	/* Turn on the digital interface clock */
	system_apb_clock_set_mask(SYSTEM_CLOCK_APB_APBA, PM_APBAMASK_GCLK);

	/* Software reset the module to ensure it is re-initialized correctly */
	GCLK->CTRL.reg = GCLK_CTRL_SWRST;
    1666:	2201      	movs	r2, #1
    1668:	4b04      	ldr	r3, [pc, #16]	; (167c <system_gclk_init+0x20>)
    166a:	701a      	strb	r2, [r3, #0]
	while (GCLK->CTRL.reg & GCLK_CTRL_SWRST) {
    166c:	0019      	movs	r1, r3
    166e:	780b      	ldrb	r3, [r1, #0]
    1670:	4213      	tst	r3, r2
    1672:	d1fc      	bne.n	166e <system_gclk_init+0x12>
		/* Wait for reset to complete */
	}
}
    1674:	4770      	bx	lr
    1676:	46c0      	nop			; (mov r8, r8)
    1678:	40000400 	.word	0x40000400
    167c:	40000c00 	.word	0x40000c00

00001680 <system_gclk_gen_set_config>:
 * \param[in] config     Configuration settings for the generator
 */
void system_gclk_gen_set_config(
		const uint8_t generator,
		struct system_gclk_gen_config *const config)
{
    1680:	b570      	push	{r4, r5, r6, lr}
    1682:	0006      	movs	r6, r0
	/* Sanity check arguments */
	Assert(config);

	/* Cache new register configurations to minimize sync requirements. */
	uint32_t new_genctrl_config = (generator << GCLK_GENCTRL_ID_Pos);
    1684:	0004      	movs	r4, r0
	uint32_t new_gendiv_config  = (generator << GCLK_GENDIV_ID_Pos);

	/* Select the requested source clock for the generator */
	new_genctrl_config |= config->source_clock << GCLK_GENCTRL_SRC_Pos;
    1686:	780d      	ldrb	r5, [r1, #0]
    1688:	022d      	lsls	r5, r5, #8
    168a:	4305      	orrs	r5, r0

	/* Configure the clock to be either high or low when disabled */
	if (config->high_when_disabled) {
    168c:	784b      	ldrb	r3, [r1, #1]
    168e:	2b00      	cmp	r3, #0
    1690:	d002      	beq.n	1698 <system_gclk_gen_set_config+0x18>
		new_genctrl_config |= GCLK_GENCTRL_OOV;
    1692:	2380      	movs	r3, #128	; 0x80
    1694:	02db      	lsls	r3, r3, #11
    1696:	431d      	orrs	r5, r3
	}

	/* Configure if the clock output to I/O pin should be enabled. */
	if (config->output_enable) {
    1698:	7a4b      	ldrb	r3, [r1, #9]
    169a:	2b00      	cmp	r3, #0
    169c:	d002      	beq.n	16a4 <system_gclk_gen_set_config+0x24>
		new_genctrl_config |= GCLK_GENCTRL_OE;
    169e:	2380      	movs	r3, #128	; 0x80
    16a0:	031b      	lsls	r3, r3, #12
    16a2:	431d      	orrs	r5, r3
	}

	/* Set division factor */
	if (config->division_factor > 1) {
    16a4:	6848      	ldr	r0, [r1, #4]
    16a6:	2801      	cmp	r0, #1
    16a8:	d910      	bls.n	16cc <system_gclk_gen_set_config+0x4c>
		/* Check if division is a power of two */
		if (((config->division_factor & (config->division_factor - 1)) == 0)) {
    16aa:	1e43      	subs	r3, r0, #1
    16ac:	4218      	tst	r0, r3
    16ae:	d134      	bne.n	171a <system_gclk_gen_set_config+0x9a>
			 * register */

			uint32_t div2_count = 0;

			uint32_t mask;
			for (mask = (1UL << 1); mask < config->division_factor;
    16b0:	2802      	cmp	r0, #2
    16b2:	d930      	bls.n	1716 <system_gclk_gen_set_config+0x96>
    16b4:	2302      	movs	r3, #2
    16b6:	2200      	movs	r2, #0
						mask <<= 1) {
				div2_count++;
    16b8:	3201      	adds	r2, #1
						mask <<= 1) {
    16ba:	005b      	lsls	r3, r3, #1
			for (mask = (1UL << 1); mask < config->division_factor;
    16bc:	4298      	cmp	r0, r3
    16be:	d8fb      	bhi.n	16b8 <system_gclk_gen_set_config+0x38>
			}

			/* Set binary divider power of 2 division factor */
			new_gendiv_config  |= div2_count << GCLK_GENDIV_DIV_Pos;
    16c0:	0212      	lsls	r2, r2, #8
    16c2:	4332      	orrs	r2, r6
    16c4:	0014      	movs	r4, r2
			new_genctrl_config |= GCLK_GENCTRL_DIVSEL;
    16c6:	2380      	movs	r3, #128	; 0x80
    16c8:	035b      	lsls	r3, r3, #13
    16ca:	431d      	orrs	r5, r3
		}

	}

	/* Enable or disable the clock in standby mode */
	if (config->run_in_standby) {
    16cc:	7a0b      	ldrb	r3, [r1, #8]
    16ce:	2b00      	cmp	r3, #0
    16d0:	d002      	beq.n	16d8 <system_gclk_gen_set_config+0x58>
		new_genctrl_config |= GCLK_GENCTRL_RUNSTDBY;
    16d2:	2380      	movs	r3, #128	; 0x80
    16d4:	039b      	lsls	r3, r3, #14
    16d6:	431d      	orrs	r5, r3
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    16d8:	4a13      	ldr	r2, [pc, #76]	; (1728 <system_gclk_gen_set_config+0xa8>)
    16da:	7853      	ldrb	r3, [r2, #1]
	}

	while (system_gclk_is_syncing()) {
    16dc:	b25b      	sxtb	r3, r3
    16de:	2b00      	cmp	r3, #0
    16e0:	dbfb      	blt.n	16da <system_gclk_gen_set_config+0x5a>
	cpu_irq_enter_critical();
    16e2:	4b12      	ldr	r3, [pc, #72]	; (172c <system_gclk_gen_set_config+0xac>)
    16e4:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the correct generator */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    16e6:	4b12      	ldr	r3, [pc, #72]	; (1730 <system_gclk_gen_set_config+0xb0>)
    16e8:	701e      	strb	r6, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    16ea:	4a0f      	ldr	r2, [pc, #60]	; (1728 <system_gclk_gen_set_config+0xa8>)
    16ec:	7853      	ldrb	r3, [r2, #1]

	/* Write the new generator configuration */
	while (system_gclk_is_syncing()) {
    16ee:	b25b      	sxtb	r3, r3
    16f0:	2b00      	cmp	r3, #0
    16f2:	dbfb      	blt.n	16ec <system_gclk_gen_set_config+0x6c>
		/* Wait for synchronization */
	};
	GCLK->GENDIV.reg  = new_gendiv_config;
    16f4:	4b0c      	ldr	r3, [pc, #48]	; (1728 <system_gclk_gen_set_config+0xa8>)
    16f6:	609c      	str	r4, [r3, #8]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    16f8:	001a      	movs	r2, r3
    16fa:	7853      	ldrb	r3, [r2, #1]

	while (system_gclk_is_syncing()) {
    16fc:	b25b      	sxtb	r3, r3
    16fe:	2b00      	cmp	r3, #0
    1700:	dbfb      	blt.n	16fa <system_gclk_gen_set_config+0x7a>
		/* Wait for synchronization */
	};
	GCLK->GENCTRL.reg = new_genctrl_config | (GCLK->GENCTRL.reg & GCLK_GENCTRL_GENEN);
    1702:	4a09      	ldr	r2, [pc, #36]	; (1728 <system_gclk_gen_set_config+0xa8>)
    1704:	6853      	ldr	r3, [r2, #4]
    1706:	2180      	movs	r1, #128	; 0x80
    1708:	0249      	lsls	r1, r1, #9
    170a:	400b      	ands	r3, r1
    170c:	431d      	orrs	r5, r3
    170e:	6055      	str	r5, [r2, #4]
	cpu_irq_leave_critical();
    1710:	4b08      	ldr	r3, [pc, #32]	; (1734 <system_gclk_gen_set_config+0xb4>)
    1712:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1714:	bd70      	pop	{r4, r5, r6, pc}
			for (mask = (1UL << 1); mask < config->division_factor;
    1716:	2200      	movs	r2, #0
    1718:	e7d2      	b.n	16c0 <system_gclk_gen_set_config+0x40>
					(config->division_factor) << GCLK_GENDIV_DIV_Pos;
    171a:	0204      	lsls	r4, r0, #8
			new_gendiv_config  |=
    171c:	4334      	orrs	r4, r6
			new_genctrl_config |= GCLK_GENCTRL_IDC;
    171e:	2380      	movs	r3, #128	; 0x80
    1720:	029b      	lsls	r3, r3, #10
    1722:	431d      	orrs	r5, r3
    1724:	e7d2      	b.n	16cc <system_gclk_gen_set_config+0x4c>
    1726:	46c0      	nop			; (mov r8, r8)
    1728:	40000c00 	.word	0x40000c00
    172c:	0000140d 	.word	0x0000140d
    1730:	40000c08 	.word	0x40000c08
    1734:	0000144d 	.word	0x0000144d

00001738 <system_gclk_gen_enable>:
 *
 * \param[in] generator  Generic Clock Generator index to enable
 */
void system_gclk_gen_enable(
		const uint8_t generator)
{
    1738:	b510      	push	{r4, lr}
    173a:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    173c:	4a0b      	ldr	r2, [pc, #44]	; (176c <system_gclk_gen_enable+0x34>)
    173e:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1740:	b25b      	sxtb	r3, r3
    1742:	2b00      	cmp	r3, #0
    1744:	dbfb      	blt.n	173e <system_gclk_gen_enable+0x6>
	cpu_irq_enter_critical();
    1746:	4b0a      	ldr	r3, [pc, #40]	; (1770 <system_gclk_gen_enable+0x38>)
    1748:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the requested generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    174a:	4b0a      	ldr	r3, [pc, #40]	; (1774 <system_gclk_gen_enable+0x3c>)
    174c:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    174e:	4a07      	ldr	r2, [pc, #28]	; (176c <system_gclk_gen_enable+0x34>)
    1750:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1752:	b25b      	sxtb	r3, r3
    1754:	2b00      	cmp	r3, #0
    1756:	dbfb      	blt.n	1750 <system_gclk_gen_enable+0x18>
		/* Wait for synchronization */
	};

	/* Enable generator */
	GCLK->GENCTRL.reg |= GCLK_GENCTRL_GENEN;
    1758:	4a04      	ldr	r2, [pc, #16]	; (176c <system_gclk_gen_enable+0x34>)
    175a:	6851      	ldr	r1, [r2, #4]
    175c:	2380      	movs	r3, #128	; 0x80
    175e:	025b      	lsls	r3, r3, #9
    1760:	430b      	orrs	r3, r1
    1762:	6053      	str	r3, [r2, #4]
	cpu_irq_leave_critical();
    1764:	4b04      	ldr	r3, [pc, #16]	; (1778 <system_gclk_gen_enable+0x40>)
    1766:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1768:	bd10      	pop	{r4, pc}
    176a:	46c0      	nop			; (mov r8, r8)
    176c:	40000c00 	.word	0x40000c00
    1770:	0000140d 	.word	0x0000140d
    1774:	40000c04 	.word	0x40000c04
    1778:	0000144d 	.word	0x0000144d

0000177c <system_gclk_gen_get_hz>:
 *
 * \return The frequency of the generic clock generator, in Hz.
 */
uint32_t system_gclk_gen_get_hz(
		const uint8_t generator)
{
    177c:	b570      	push	{r4, r5, r6, lr}
    177e:	0004      	movs	r4, r0
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1780:	4a1a      	ldr	r2, [pc, #104]	; (17ec <system_gclk_gen_get_hz+0x70>)
    1782:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1784:	b25b      	sxtb	r3, r3
    1786:	2b00      	cmp	r3, #0
    1788:	dbfb      	blt.n	1782 <system_gclk_gen_get_hz+0x6>
	cpu_irq_enter_critical();
    178a:	4b19      	ldr	r3, [pc, #100]	; (17f0 <system_gclk_gen_get_hz+0x74>)
    178c:	4798      	blx	r3
	};

	system_interrupt_enter_critical_section();

	/* Select the appropriate generator */
	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    178e:	4b19      	ldr	r3, [pc, #100]	; (17f4 <system_gclk_gen_get_hz+0x78>)
    1790:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    1792:	4a16      	ldr	r2, [pc, #88]	; (17ec <system_gclk_gen_get_hz+0x70>)
    1794:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    1796:	b25b      	sxtb	r3, r3
    1798:	2b00      	cmp	r3, #0
    179a:	dbfb      	blt.n	1794 <system_gclk_gen_get_hz+0x18>
		/* Wait for synchronization */
	};

	/* Get the frequency of the source connected to the GCLK generator */
	uint32_t gen_input_hz = system_clock_source_get_hz(
			(enum system_clock_source)GCLK->GENCTRL.bit.SRC);
    179c:	4e13      	ldr	r6, [pc, #76]	; (17ec <system_gclk_gen_get_hz+0x70>)
    179e:	6870      	ldr	r0, [r6, #4]
    17a0:	04c0      	lsls	r0, r0, #19
    17a2:	0ec0      	lsrs	r0, r0, #27
	uint32_t gen_input_hz = system_clock_source_get_hz(
    17a4:	4b14      	ldr	r3, [pc, #80]	; (17f8 <system_gclk_gen_get_hz+0x7c>)
    17a6:	4798      	blx	r3
    17a8:	0005      	movs	r5, r0

	*((uint8_t*)&GCLK->GENCTRL.reg) = generator;
    17aa:	4b12      	ldr	r3, [pc, #72]	; (17f4 <system_gclk_gen_get_hz+0x78>)
    17ac:	701c      	strb	r4, [r3, #0]

	uint8_t divsel = GCLK->GENCTRL.bit.DIVSEL;
    17ae:	6876      	ldr	r6, [r6, #4]
    17b0:	02f6      	lsls	r6, r6, #11
    17b2:	0ff6      	lsrs	r6, r6, #31

	/* Select the appropriate generator division register */
	*((uint8_t*)&GCLK->GENDIV.reg) = generator;
    17b4:	4b11      	ldr	r3, [pc, #68]	; (17fc <system_gclk_gen_get_hz+0x80>)
    17b6:	701c      	strb	r4, [r3, #0]
	if (GCLK->STATUS.reg & GCLK_STATUS_SYNCBUSY){
    17b8:	4a0c      	ldr	r2, [pc, #48]	; (17ec <system_gclk_gen_get_hz+0x70>)
    17ba:	7853      	ldrb	r3, [r2, #1]
	while (system_gclk_is_syncing()) {
    17bc:	b25b      	sxtb	r3, r3
    17be:	2b00      	cmp	r3, #0
    17c0:	dbfb      	blt.n	17ba <system_gclk_gen_get_hz+0x3e>
		/* Wait for synchronization */
	};

	uint32_t divider = GCLK->GENDIV.bit.DIV;
    17c2:	4b0a      	ldr	r3, [pc, #40]	; (17ec <system_gclk_gen_get_hz+0x70>)
    17c4:	689c      	ldr	r4, [r3, #8]
    17c6:	0224      	lsls	r4, r4, #8
    17c8:	0c24      	lsrs	r4, r4, #16
	cpu_irq_leave_critical();
    17ca:	4b0d      	ldr	r3, [pc, #52]	; (1800 <system_gclk_gen_get_hz+0x84>)
    17cc:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Check if the generator is using fractional or binary division */
	if (!divsel && divider > 1) {
    17ce:	2e00      	cmp	r6, #0
    17d0:	d107      	bne.n	17e2 <system_gclk_gen_get_hz+0x66>
    17d2:	2c01      	cmp	r4, #1
    17d4:	d907      	bls.n	17e6 <system_gclk_gen_get_hz+0x6a>
		gen_input_hz /= divider;
    17d6:	0021      	movs	r1, r4
    17d8:	0028      	movs	r0, r5
    17da:	4b0a      	ldr	r3, [pc, #40]	; (1804 <system_gclk_gen_get_hz+0x88>)
    17dc:	4798      	blx	r3
    17de:	0005      	movs	r5, r0
    17e0:	e001      	b.n	17e6 <system_gclk_gen_get_hz+0x6a>
	} else if (divsel) {
		gen_input_hz >>= (divider+1);
    17e2:	3401      	adds	r4, #1
    17e4:	40e5      	lsrs	r5, r4
	}

	return gen_input_hz;
}
    17e6:	0028      	movs	r0, r5
    17e8:	bd70      	pop	{r4, r5, r6, pc}
    17ea:	46c0      	nop			; (mov r8, r8)
    17ec:	40000c00 	.word	0x40000c00
    17f0:	0000140d 	.word	0x0000140d
    17f4:	40000c04 	.word	0x40000c04
    17f8:	0000147d 	.word	0x0000147d
    17fc:	40000c08 	.word	0x40000c08
    1800:	0000144d 	.word	0x0000144d
    1804:	00001b5d 	.word	0x00001b5d

00001808 <system_gclk_chan_enable>:
 *
 * \param[in] channel   Generic Clock channel to enable
 */
void system_gclk_chan_enable(
		const uint8_t channel)
{
    1808:	b510      	push	{r4, lr}
    180a:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    180c:	4b06      	ldr	r3, [pc, #24]	; (1828 <system_gclk_chan_enable+0x20>)
    180e:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1810:	4b06      	ldr	r3, [pc, #24]	; (182c <system_gclk_chan_enable+0x24>)
    1812:	701c      	strb	r4, [r3, #0]

	/* Enable the generic clock */
	GCLK->CLKCTRL.reg |= GCLK_CLKCTRL_CLKEN;
    1814:	4a06      	ldr	r2, [pc, #24]	; (1830 <system_gclk_chan_enable+0x28>)
    1816:	8853      	ldrh	r3, [r2, #2]
    1818:	2180      	movs	r1, #128	; 0x80
    181a:	01c9      	lsls	r1, r1, #7
    181c:	430b      	orrs	r3, r1
    181e:	8053      	strh	r3, [r2, #2]
	cpu_irq_leave_critical();
    1820:	4b04      	ldr	r3, [pc, #16]	; (1834 <system_gclk_chan_enable+0x2c>)
    1822:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    1824:	bd10      	pop	{r4, pc}
    1826:	46c0      	nop			; (mov r8, r8)
    1828:	0000140d 	.word	0x0000140d
    182c:	40000c02 	.word	0x40000c02
    1830:	40000c00 	.word	0x40000c00
    1834:	0000144d 	.word	0x0000144d

00001838 <system_gclk_chan_disable>:
 *
 * \param[in] channel  Generic Clock channel to disable
 */
void system_gclk_chan_disable(
		const uint8_t channel)
{
    1838:	b510      	push	{r4, lr}
    183a:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    183c:	4b0f      	ldr	r3, [pc, #60]	; (187c <system_gclk_chan_disable+0x44>)
    183e:	4798      	blx	r3
	system_interrupt_enter_critical_section();

	/* Select the requested generator channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    1840:	4b0f      	ldr	r3, [pc, #60]	; (1880 <system_gclk_chan_disable+0x48>)
    1842:	701c      	strb	r4, [r3, #0]

	/* Sanity check WRTLOCK */
	Assert(!GCLK->CLKCTRL.bit.WRTLOCK);

	/* Switch to known-working source so that the channel can be disabled */
	uint32_t prev_gen_id = GCLK->CLKCTRL.bit.GEN;
    1844:	4a0f      	ldr	r2, [pc, #60]	; (1884 <system_gclk_chan_disable+0x4c>)
    1846:	8853      	ldrh	r3, [r2, #2]
    1848:	051b      	lsls	r3, r3, #20
    184a:	0f18      	lsrs	r0, r3, #28
	GCLK->CLKCTRL.bit.GEN = 0;
    184c:	8853      	ldrh	r3, [r2, #2]
    184e:	490e      	ldr	r1, [pc, #56]	; (1888 <system_gclk_chan_disable+0x50>)
    1850:	400b      	ands	r3, r1
    1852:	8053      	strh	r3, [r2, #2]

	/* Disable the generic clock */
	GCLK->CLKCTRL.reg &= ~GCLK_CLKCTRL_CLKEN;
    1854:	8853      	ldrh	r3, [r2, #2]
    1856:	490d      	ldr	r1, [pc, #52]	; (188c <system_gclk_chan_disable+0x54>)
    1858:	400b      	ands	r3, r1
    185a:	8053      	strh	r3, [r2, #2]
	while (GCLK->CLKCTRL.reg & GCLK_CLKCTRL_CLKEN) {
    185c:	0011      	movs	r1, r2
    185e:	2280      	movs	r2, #128	; 0x80
    1860:	01d2      	lsls	r2, r2, #7
    1862:	884b      	ldrh	r3, [r1, #2]
    1864:	4213      	tst	r3, r2
    1866:	d1fc      	bne.n	1862 <system_gclk_chan_disable+0x2a>
		/* Wait for clock to become disabled */
	}

	/* Restore previous configured clock generator */
	GCLK->CLKCTRL.bit.GEN = prev_gen_id;
    1868:	4906      	ldr	r1, [pc, #24]	; (1884 <system_gclk_chan_disable+0x4c>)
    186a:	884a      	ldrh	r2, [r1, #2]
    186c:	0203      	lsls	r3, r0, #8
    186e:	4806      	ldr	r0, [pc, #24]	; (1888 <system_gclk_chan_disable+0x50>)
    1870:	4002      	ands	r2, r0
    1872:	4313      	orrs	r3, r2
    1874:	804b      	strh	r3, [r1, #2]
	cpu_irq_leave_critical();
    1876:	4b06      	ldr	r3, [pc, #24]	; (1890 <system_gclk_chan_disable+0x58>)
    1878:	4798      	blx	r3

	system_interrupt_leave_critical_section();
}
    187a:	bd10      	pop	{r4, pc}
    187c:	0000140d 	.word	0x0000140d
    1880:	40000c02 	.word	0x40000c02
    1884:	40000c00 	.word	0x40000c00
    1888:	fffff0ff 	.word	0xfffff0ff
    188c:	ffffbfff 	.word	0xffffbfff
    1890:	0000144d 	.word	0x0000144d

00001894 <system_gclk_chan_set_config>:
{
    1894:	b510      	push	{r4, lr}
	new_clkctrl_config |= config->source_generator << GCLK_CLKCTRL_GEN_Pos;
    1896:	780c      	ldrb	r4, [r1, #0]
    1898:	0224      	lsls	r4, r4, #8
    189a:	4304      	orrs	r4, r0
	system_gclk_chan_disable(channel);
    189c:	4b02      	ldr	r3, [pc, #8]	; (18a8 <system_gclk_chan_set_config+0x14>)
    189e:	4798      	blx	r3
	GCLK->CLKCTRL.reg = new_clkctrl_config;
    18a0:	b2a4      	uxth	r4, r4
    18a2:	4b02      	ldr	r3, [pc, #8]	; (18ac <system_gclk_chan_set_config+0x18>)
    18a4:	805c      	strh	r4, [r3, #2]
}
    18a6:	bd10      	pop	{r4, pc}
    18a8:	00001839 	.word	0x00001839
    18ac:	40000c00 	.word	0x40000c00

000018b0 <system_gclk_chan_get_hz>:
 *
 * \return The frequency of the generic clock channel, in Hz.
 */
uint32_t system_gclk_chan_get_hz(
		const uint8_t channel)
{
    18b0:	b510      	push	{r4, lr}
    18b2:	0004      	movs	r4, r0
	cpu_irq_enter_critical();
    18b4:	4b06      	ldr	r3, [pc, #24]	; (18d0 <system_gclk_chan_get_hz+0x20>)
    18b6:	4798      	blx	r3
	uint8_t gen_id;

	system_interrupt_enter_critical_section();

	/* Select the requested generic clock channel */
	*((uint8_t*)&GCLK->CLKCTRL.reg) = channel;
    18b8:	4b06      	ldr	r3, [pc, #24]	; (18d4 <system_gclk_chan_get_hz+0x24>)
    18ba:	701c      	strb	r4, [r3, #0]
	gen_id = GCLK->CLKCTRL.bit.GEN;
    18bc:	4b06      	ldr	r3, [pc, #24]	; (18d8 <system_gclk_chan_get_hz+0x28>)
    18be:	885c      	ldrh	r4, [r3, #2]
    18c0:	0524      	lsls	r4, r4, #20
    18c2:	0f24      	lsrs	r4, r4, #28
	cpu_irq_leave_critical();
    18c4:	4b05      	ldr	r3, [pc, #20]	; (18dc <system_gclk_chan_get_hz+0x2c>)
    18c6:	4798      	blx	r3

	system_interrupt_leave_critical_section();

	/* Return the clock speed of the associated GCLK generator */
	return system_gclk_gen_get_hz(gen_id);
    18c8:	0020      	movs	r0, r4
    18ca:	4b05      	ldr	r3, [pc, #20]	; (18e0 <system_gclk_chan_get_hz+0x30>)
    18cc:	4798      	blx	r3
}
    18ce:	bd10      	pop	{r4, pc}
    18d0:	0000140d 	.word	0x0000140d
    18d4:	40000c02 	.word	0x40000c02
    18d8:	40000c00 	.word	0x40000c00
    18dc:	0000144d 	.word	0x0000144d
    18e0:	0000177d 	.word	0x0000177d

000018e4 <_system_pinmux_config>:
 */
static void _system_pinmux_config(
		PortGroup *const port,
		const uint32_t pin_mask,
		const struct system_pinmux_config *const config)
{
    18e4:	b530      	push	{r4, r5, lr}

	/* Track the configuration bits into a temporary variable before writing */
	uint32_t pin_cfg = 0;

	/* Enabled powersave mode, don't create configuration */
	if (!config->powersave) {
    18e6:	78d3      	ldrb	r3, [r2, #3]
    18e8:	2b00      	cmp	r3, #0
    18ea:	d135      	bne.n	1958 <_system_pinmux_config+0x74>
		/* Enable the pin peripheral MUX flag if non-GPIO selected (pinmux will
		 * be written later) and store the new MUX mask */
		if (config->mux_position != SYSTEM_PINMUX_GPIO) {
    18ec:	7813      	ldrb	r3, [r2, #0]
    18ee:	2b80      	cmp	r3, #128	; 0x80
    18f0:	d029      	beq.n	1946 <_system_pinmux_config+0x62>
			pin_cfg |= PORT_WRCONFIG_PMUXEN;
			pin_cfg |= (config->mux_position << PORT_WRCONFIG_PMUX_Pos);
    18f2:	061b      	lsls	r3, r3, #24
    18f4:	2480      	movs	r4, #128	; 0x80
    18f6:	0264      	lsls	r4, r4, #9
    18f8:	4323      	orrs	r3, r4
		}

		/* Check if the user has requested that the input buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_INPUT) ||
    18fa:	7854      	ldrb	r4, [r2, #1]
    18fc:	2502      	movs	r5, #2
    18fe:	43ac      	bics	r4, r5
    1900:	d106      	bne.n	1910 <_system_pinmux_config+0x2c>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Enable input buffer flag */
			pin_cfg |= PORT_WRCONFIG_INEN;

			/* Enable pull-up/pull-down control flag if requested */
			if (config->input_pull != SYSTEM_PINMUX_PIN_PULL_NONE) {
    1902:	7894      	ldrb	r4, [r2, #2]
    1904:	2c00      	cmp	r4, #0
    1906:	d120      	bne.n	194a <_system_pinmux_config+0x66>
			pin_cfg |= PORT_WRCONFIG_INEN;
    1908:	2480      	movs	r4, #128	; 0x80
    190a:	02a4      	lsls	r4, r4, #10
    190c:	4323      	orrs	r3, r4
				pin_cfg |= PORT_WRCONFIG_PULLEN;
			}

			/* Clear the port DIR bits to disable the output buffer */
			port->DIRCLR.reg = pin_mask;
    190e:	6041      	str	r1, [r0, #4]
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1910:	7854      	ldrb	r4, [r2, #1]
    1912:	3c01      	subs	r4, #1
    1914:	2c01      	cmp	r4, #1
    1916:	d91c      	bls.n	1952 <_system_pinmux_config+0x6e>
		port->DIRCLR.reg = pin_mask;
	}

	/* The Write Configuration register (WRCONFIG) requires the
	 * pins to to grouped into two 16-bit half-words - split them out here */
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    1918:	040d      	lsls	r5, r1, #16
    191a:	0c2d      	lsrs	r5, r5, #16

	/* Configure the lower 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    191c:	24a0      	movs	r4, #160	; 0xa0
    191e:	05e4      	lsls	r4, r4, #23
    1920:	432c      	orrs	r4, r5
    1922:	431c      	orrs	r4, r3
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1924:	6284      	str	r4, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1926:	0c0d      	lsrs	r5, r1, #16

	/* Configure the upper 16-bits of the port to the desired configuration,
	 * including the pin peripheral multiplexer just in case it is enabled */
	port->WRCONFIG.reg
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1928:	24d0      	movs	r4, #208	; 0xd0
    192a:	0624      	lsls	r4, r4, #24
    192c:	432c      	orrs	r4, r5
    192e:	431c      	orrs	r4, r3
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1930:	6284      	str	r4, [r0, #40]	; 0x28
			PORT_WRCONFIG_HWSEL;

	if(!config->powersave) {
    1932:	78d4      	ldrb	r4, [r2, #3]
    1934:	2c00      	cmp	r4, #0
    1936:	d122      	bne.n	197e <_system_pinmux_config+0x9a>
		/* Set the pull-up state once the port pins are configured if one was
		 * requested and it does not violate the valid set of port
		 * configurations */
		if (pin_cfg & PORT_WRCONFIG_PULLEN) {
    1938:	035b      	lsls	r3, r3, #13
    193a:	d51c      	bpl.n	1976 <_system_pinmux_config+0x92>
			/* Set the OUT register bits to enable the pull-up if requested,
			 * clear to enable pull-down */
			if (config->input_pull == SYSTEM_PINMUX_PIN_PULL_UP) {
    193c:	7893      	ldrb	r3, [r2, #2]
    193e:	2b01      	cmp	r3, #1
    1940:	d01e      	beq.n	1980 <_system_pinmux_config+0x9c>
				port->OUTSET.reg = pin_mask;
			} else {
				port->OUTCLR.reg = pin_mask;
    1942:	6141      	str	r1, [r0, #20]
    1944:	e017      	b.n	1976 <_system_pinmux_config+0x92>
	uint32_t pin_cfg = 0;
    1946:	2300      	movs	r3, #0
    1948:	e7d7      	b.n	18fa <_system_pinmux_config+0x16>
				pin_cfg |= PORT_WRCONFIG_PULLEN;
    194a:	24c0      	movs	r4, #192	; 0xc0
    194c:	02e4      	lsls	r4, r4, #11
    194e:	4323      	orrs	r3, r4
    1950:	e7dd      	b.n	190e <_system_pinmux_config+0x2a>
			pin_cfg &= ~PORT_WRCONFIG_PULLEN;
    1952:	4c0d      	ldr	r4, [pc, #52]	; (1988 <_system_pinmux_config+0xa4>)
    1954:	4023      	ands	r3, r4
    1956:	e7df      	b.n	1918 <_system_pinmux_config+0x34>
		port->DIRCLR.reg = pin_mask;
    1958:	6041      	str	r1, [r0, #4]
	uint32_t lower_pin_mask = (pin_mask & 0xFFFF);
    195a:	040c      	lsls	r4, r1, #16
    195c:	0c24      	lsrs	r4, r4, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG;
    195e:	23a0      	movs	r3, #160	; 0xa0
    1960:	05db      	lsls	r3, r3, #23
    1962:	4323      	orrs	r3, r4
		= (lower_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    1964:	6283      	str	r3, [r0, #40]	; 0x28
	uint32_t upper_pin_mask = (pin_mask >> 16);
    1966:	0c0c      	lsrs	r4, r1, #16
			pin_cfg | PORT_WRCONFIG_WRPMUX | PORT_WRCONFIG_WRPINCFG |
    1968:	23d0      	movs	r3, #208	; 0xd0
    196a:	061b      	lsls	r3, r3, #24
    196c:	4323      	orrs	r3, r4
		= (upper_pin_mask << PORT_WRCONFIG_PINMASK_Pos) |
    196e:	6283      	str	r3, [r0, #40]	; 0x28
	if(!config->powersave) {
    1970:	78d3      	ldrb	r3, [r2, #3]
    1972:	2b00      	cmp	r3, #0
    1974:	d103      	bne.n	197e <_system_pinmux_config+0x9a>
			}
		}

		/* Check if the user has requested that the output buffer be enabled */
		if ((config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT) ||
    1976:	7853      	ldrb	r3, [r2, #1]
    1978:	3b01      	subs	r3, #1
    197a:	2b01      	cmp	r3, #1
    197c:	d902      	bls.n	1984 <_system_pinmux_config+0xa0>
				(config->direction == SYSTEM_PINMUX_PIN_DIR_OUTPUT_WITH_READBACK)) {
			/* Set the port DIR bits to enable the output buffer */
			port->DIRSET.reg = pin_mask;
		}
	}
}
    197e:	bd30      	pop	{r4, r5, pc}
				port->OUTSET.reg = pin_mask;
    1980:	6181      	str	r1, [r0, #24]
    1982:	e7f8      	b.n	1976 <_system_pinmux_config+0x92>
			port->DIRSET.reg = pin_mask;
    1984:	6081      	str	r1, [r0, #8]
}
    1986:	e7fa      	b.n	197e <_system_pinmux_config+0x9a>
    1988:	fffbffff 	.word	0xfffbffff

0000198c <system_pinmux_pin_set_config>:
 * \param[in] config    Configuration settings for the pin
 */
void system_pinmux_pin_set_config(
		const uint8_t gpio_pin,
		const struct system_pinmux_config *const config)
{
    198c:	b510      	push	{r4, lr}
    198e:	000a      	movs	r2, r1
	uint8_t group_index = (gpio_pin / 32);

	/* Array of available ports */
	Port *const ports[PORT_INST_NUM] = PORT_INSTS;

	if (port_index < PORT_INST_NUM) {
    1990:	09c1      	lsrs	r1, r0, #7
		return &(ports[port_index]->Group[group_index]);
	} else {
		Assert(false);
		return NULL;
    1992:	2300      	movs	r3, #0
	if (port_index < PORT_INST_NUM) {
    1994:	2900      	cmp	r1, #0
    1996:	d104      	bne.n	19a2 <system_pinmux_pin_set_config+0x16>
		return &(ports[port_index]->Group[group_index]);
    1998:	0943      	lsrs	r3, r0, #5
    199a:	01db      	lsls	r3, r3, #7
    199c:	4905      	ldr	r1, [pc, #20]	; (19b4 <system_pinmux_pin_set_config+0x28>)
    199e:	468c      	mov	ip, r1
    19a0:	4463      	add	r3, ip
	PortGroup *const port = system_pinmux_get_group_from_gpio_pin(gpio_pin);
	uint32_t pin_mask = (1UL << (gpio_pin % 32));
    19a2:	241f      	movs	r4, #31
    19a4:	4020      	ands	r0, r4
    19a6:	2101      	movs	r1, #1
    19a8:	4081      	lsls	r1, r0

	_system_pinmux_config(port, pin_mask, config);
    19aa:	0018      	movs	r0, r3
    19ac:	4b02      	ldr	r3, [pc, #8]	; (19b8 <system_pinmux_pin_set_config+0x2c>)
    19ae:	4798      	blx	r3
}
    19b0:	bd10      	pop	{r4, pc}
    19b2:	46c0      	nop			; (mov r8, r8)
    19b4:	41004400 	.word	0x41004400
    19b8:	000018e5 	.word	0x000018e5

000019bc <_system_dummy_init>:
 */
void _system_dummy_init(void);
void _system_dummy_init(void)
{
	return;
}
    19bc:	4770      	bx	lr
	...

000019c0 <system_init>:
 *  - Board hardware initialization (via the Board module)
 *  - Event system driver initialization (via the EVSYS module)
 *  - External Interrupt driver initialization (via the EXTINT module)
 */
void system_init(void)
{
    19c0:	b510      	push	{r4, lr}
	/* Configure GCLK and clock sources according to conf_clocks.h */
	system_clock_init();
    19c2:	4b05      	ldr	r3, [pc, #20]	; (19d8 <system_init+0x18>)
    19c4:	4798      	blx	r3

	/* Initialize board hardware */
	system_board_init();
    19c6:	4b05      	ldr	r3, [pc, #20]	; (19dc <system_init+0x1c>)
    19c8:	4798      	blx	r3

	/* Initialize EVSYS hardware */
	_system_events_init();
    19ca:	4b05      	ldr	r3, [pc, #20]	; (19e0 <system_init+0x20>)
    19cc:	4798      	blx	r3

	/* Initialize External hardware */
	_system_extint_init();
    19ce:	4b05      	ldr	r3, [pc, #20]	; (19e4 <system_init+0x24>)
    19d0:	4798      	blx	r3
	
	/* Initialize DIVAS hardware */
	_system_divas_init();
    19d2:	4b05      	ldr	r3, [pc, #20]	; (19e8 <system_init+0x28>)
    19d4:	4798      	blx	r3


}
    19d6:	bd10      	pop	{r4, pc}
    19d8:	000015c5 	.word	0x000015c5
    19dc:	00001389 	.word	0x00001389
    19e0:	00000689 	.word	0x00000689
    19e4:	000019bd 	.word	0x000019bd
    19e8:	000019bd 	.word	0x000019bd

000019ec <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
    19ec:	e7fe      	b.n	19ec <Dummy_Handler>
	...

000019f0 <Reset_Handler>:
{
    19f0:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
    19f2:	4a1a      	ldr	r2, [pc, #104]	; (1a5c <Reset_Handler+0x6c>)
    19f4:	4b1a      	ldr	r3, [pc, #104]	; (1a60 <Reset_Handler+0x70>)
    19f6:	429a      	cmp	r2, r3
    19f8:	d011      	beq.n	1a1e <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
    19fa:	001a      	movs	r2, r3
    19fc:	4b19      	ldr	r3, [pc, #100]	; (1a64 <Reset_Handler+0x74>)
    19fe:	429a      	cmp	r2, r3
    1a00:	d20d      	bcs.n	1a1e <Reset_Handler+0x2e>
    1a02:	4a19      	ldr	r2, [pc, #100]	; (1a68 <Reset_Handler+0x78>)
    1a04:	3303      	adds	r3, #3
    1a06:	1a9b      	subs	r3, r3, r2
    1a08:	089b      	lsrs	r3, r3, #2
    1a0a:	3301      	adds	r3, #1
    1a0c:	009b      	lsls	r3, r3, #2
    1a0e:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
    1a10:	4813      	ldr	r0, [pc, #76]	; (1a60 <Reset_Handler+0x70>)
    1a12:	4912      	ldr	r1, [pc, #72]	; (1a5c <Reset_Handler+0x6c>)
    1a14:	588c      	ldr	r4, [r1, r2]
    1a16:	5084      	str	r4, [r0, r2]
    1a18:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
    1a1a:	429a      	cmp	r2, r3
    1a1c:	d1fa      	bne.n	1a14 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
    1a1e:	4a13      	ldr	r2, [pc, #76]	; (1a6c <Reset_Handler+0x7c>)
    1a20:	4b13      	ldr	r3, [pc, #76]	; (1a70 <Reset_Handler+0x80>)
    1a22:	429a      	cmp	r2, r3
    1a24:	d20a      	bcs.n	1a3c <Reset_Handler+0x4c>
    1a26:	43d3      	mvns	r3, r2
    1a28:	4911      	ldr	r1, [pc, #68]	; (1a70 <Reset_Handler+0x80>)
    1a2a:	185b      	adds	r3, r3, r1
    1a2c:	2103      	movs	r1, #3
    1a2e:	438b      	bics	r3, r1
    1a30:	3304      	adds	r3, #4
    1a32:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
    1a34:	2100      	movs	r1, #0
    1a36:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
    1a38:	4293      	cmp	r3, r2
    1a3a:	d1fc      	bne.n	1a36 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
    1a3c:	4a0d      	ldr	r2, [pc, #52]	; (1a74 <Reset_Handler+0x84>)
    1a3e:	21ff      	movs	r1, #255	; 0xff
    1a40:	4b0d      	ldr	r3, [pc, #52]	; (1a78 <Reset_Handler+0x88>)
    1a42:	438b      	bics	r3, r1
    1a44:	6093      	str	r3, [r2, #8]
        NVMCTRL->CTRLB.bit.MANW = 1;
    1a46:	4a0d      	ldr	r2, [pc, #52]	; (1a7c <Reset_Handler+0x8c>)
    1a48:	6853      	ldr	r3, [r2, #4]
    1a4a:	397f      	subs	r1, #127	; 0x7f
    1a4c:	430b      	orrs	r3, r1
    1a4e:	6053      	str	r3, [r2, #4]
        __libc_init_array();
    1a50:	4b0b      	ldr	r3, [pc, #44]	; (1a80 <Reset_Handler+0x90>)
    1a52:	4798      	blx	r3
        main();
    1a54:	4b0b      	ldr	r3, [pc, #44]	; (1a84 <Reset_Handler+0x94>)
    1a56:	4798      	blx	r3
    1a58:	e7fe      	b.n	1a58 <Reset_Handler+0x68>
    1a5a:	46c0      	nop			; (mov r8, r8)
    1a5c:	00001df4 	.word	0x00001df4
    1a60:	20000000 	.word	0x20000000
    1a64:	20000044 	.word	0x20000044
    1a68:	20000004 	.word	0x20000004
    1a6c:	20000044 	.word	0x20000044
    1a70:	20000438 	.word	0x20000438
    1a74:	e000ed00 	.word	0xe000ed00
    1a78:	00000000 	.word	0x00000000
    1a7c:	41004000 	.word	0x41004000
    1a80:	00001cc9 	.word	0x00001cc9
    1a84:	00001aa1 	.word	0x00001aa1

00001a88 <writeStr>:
 * @return				- void
 *
 * @note				- If Debug with uart is defined (user_hoard.h)
 ******************************************************************************************************/
 void writeStr(uint8_t *ptr, uint8_t len)
 {
    1a88:	b510      	push	{r4, lr}
	#ifdef DEBUG_WITH_UART
		usart_write_buffer_wait(&usart_instance, ptr, len);
    1a8a:	b28a      	uxth	r2, r1
    1a8c:	0001      	movs	r1, r0
    1a8e:	4802      	ldr	r0, [pc, #8]	; (1a98 <writeStr+0x10>)
    1a90:	4b02      	ldr	r3, [pc, #8]	; (1a9c <writeStr+0x14>)
    1a92:	4798      	blx	r3
	#endif
 }
    1a94:	bd10      	pop	{r4, pc}
    1a96:	46c0      	nop			; (mov r8, r8)
    1a98:	200000c0 	.word	0x200000c0
    1a9c:	00000f71 	.word	0x00000f71

00001aa0 <main>:
// Debug Status Messages 

uint8_t statusCheck[] = "Hello World!\r\n";
uint8_t init[] = "Initializing...\r\n";
int main (void)
{
    1aa0:	b5f0      	push	{r4, r5, r6, r7, lr}
    1aa2:	46c6      	mov	lr, r8
    1aa4:	b500      	push	{lr}
    1aa6:	b086      	sub	sp, #24
	system_init();
    1aa8:	4b23      	ldr	r3, [pc, #140]	; (1b38 <main+0x98>)
    1aaa:	4798      	blx	r3
	sys_config();
    1aac:	4b23      	ldr	r3, [pc, #140]	; (1b3c <main+0x9c>)
    1aae:	4798      	blx	r3
	writeStr(init, sizeof(init));			//uart debug statement
    1ab0:	2112      	movs	r1, #18
    1ab2:	4823      	ldr	r0, [pc, #140]	; (1b40 <main+0xa0>)
    1ab4:	4c23      	ldr	r4, [pc, #140]	; (1b44 <main+0xa4>)
    1ab6:	47a0      	blx	r4
		port_base->OUTSET.reg = pin_mask;
    1ab8:	4b23      	ldr	r3, [pc, #140]	; (1b48 <main+0xa8>)
    1aba:	2280      	movs	r2, #128	; 0x80
    1abc:	0312      	lsls	r2, r2, #12
    1abe:	619a      	str	r2, [r3, #24]
		port_base->OUTCLR.reg = pin_mask;
    1ac0:	615a      	str	r2, [r3, #20]
		port_base->OUTSET.reg = pin_mask;
    1ac2:	2280      	movs	r2, #128	; 0x80
    1ac4:	02d2      	lsls	r2, r2, #11
    1ac6:	619a      	str	r2, [r3, #24]

	port_pin_set_output_level(STATUSLED_GREEN, TRUE);
	port_pin_set_output_level(STATUSLED_GREEN, FALSE);
	port_pin_set_output_level(STATUSLED_ORANGE, TRUE);

	writeStr(statusCheck, sizeof(init));
    1ac8:	2112      	movs	r1, #18
    1aca:	4820      	ldr	r0, [pc, #128]	; (1b4c <main+0xac>)
    1acc:	47a0      	blx	r4
	
	__vo int i = 0;
    1ace:	2300      	movs	r3, #0
    1ad0:	9305      	str	r3, [sp, #20]
	uint8_t loopCnt[] = "1\r\n";
    1ad2:	4b1f      	ldr	r3, [pc, #124]	; (1b50 <main+0xb0>)
    1ad4:	9304      	str	r3, [sp, #16]
	//uint8_t statusMsg[] = "OK\r\n";
	uint8_t statusReset[] = "Reset Counter\r\n";
    1ad6:	466a      	mov	r2, sp
    1ad8:	4b1e      	ldr	r3, [pc, #120]	; (1b54 <main+0xb4>)
    1ada:	cb13      	ldmia	r3!, {r0, r1, r4}
    1adc:	c213      	stmia	r2!, {r0, r1, r4}
    1ade:	681b      	ldr	r3, [r3, #0]
    1ae0:	6013      	str	r3, [r2, #0]
    1ae2:	2780      	movs	r7, #128	; 0x80
    1ae4:	02ff      	lsls	r7, r7, #11
    1ae6:	46b8      	mov	r8, r7
	//uint8_t statusLoop[] = "Finished loop\r\n";

	while(1)
	{
		port_pin_set_output_level(STATUSLED_ORANGE, TRUE);
		delay_ms(500);
    1ae8:	4e1b      	ldr	r6, [pc, #108]	; (1b58 <main+0xb8>)
    1aea:	4c17      	ldr	r4, [pc, #92]	; (1b48 <main+0xa8>)
    1aec:	4643      	mov	r3, r8
    1aee:	61a3      	str	r3, [r4, #24]
    1af0:	20fa      	movs	r0, #250	; 0xfa
    1af2:	0040      	lsls	r0, r0, #1
    1af4:	47b0      	blx	r6
		port_base->OUTCLR.reg = pin_mask;
    1af6:	6167      	str	r7, [r4, #20]
		port_base->OUTSET.reg = pin_mask;
    1af8:	2580      	movs	r5, #128	; 0x80
    1afa:	032d      	lsls	r5, r5, #12
    1afc:	61a5      	str	r5, [r4, #24]
		port_pin_set_output_level(STATUSLED_ORANGE, FALSE);
		port_pin_set_output_level(STATUSLED_GREEN, TRUE);

		delay_ms(500);		// problem child
    1afe:	20fa      	movs	r0, #250	; 0xfa
    1b00:	0040      	lsls	r0, r0, #1
    1b02:	47b0      	blx	r6
		port_base->OUTCLR.reg = pin_mask;
    1b04:	6165      	str	r5, [r4, #20]
		port_pin_set_output_level(STATUSLED_GREEN, FALSE);
		
		// ToDo: TEMPORARY -> Count Loops
		loopCnt[0] = i + '0';
    1b06:	9b05      	ldr	r3, [sp, #20]
    1b08:	a804      	add	r0, sp, #16
    1b0a:	3330      	adds	r3, #48	; 0x30
    1b0c:	7003      	strb	r3, [r0, #0]

		writeStr(loopCnt, sizeof(loopCnt));		
    1b0e:	2104      	movs	r1, #4
    1b10:	4b0c      	ldr	r3, [pc, #48]	; (1b44 <main+0xa4>)
    1b12:	4798      	blx	r3
		i++;
    1b14:	9b05      	ldr	r3, [sp, #20]
    1b16:	3301      	adds	r3, #1
    1b18:	9305      	str	r3, [sp, #20]
		if (i > 150) 
    1b1a:	9b05      	ldr	r3, [sp, #20]
    1b1c:	2b96      	cmp	r3, #150	; 0x96
    1b1e:	dde5      	ble.n	1aec <main+0x4c>
		{
			i = 0;
    1b20:	2300      	movs	r3, #0
    1b22:	9305      	str	r3, [sp, #20]
			for (int x = 0; x < 4; x++)
			{
				loopCnt[x] = 0;
    1b24:	aa04      	add	r2, sp, #16
    1b26:	7013      	strb	r3, [r2, #0]
    1b28:	7053      	strb	r3, [r2, #1]
    1b2a:	7093      	strb	r3, [r2, #2]
    1b2c:	70d3      	strb	r3, [r2, #3]
			}
			writeStr(statusReset, sizeof(statusReset));
    1b2e:	2110      	movs	r1, #16
    1b30:	4668      	mov	r0, sp
    1b32:	4b04      	ldr	r3, [pc, #16]	; (1b44 <main+0xa4>)
    1b34:	4798      	blx	r3
    1b36:	e7d8      	b.n	1aea <main+0x4a>
    1b38:	000019c1 	.word	0x000019c1
    1b3c:	0000138d 	.word	0x0000138d
    1b40:	20000020 	.word	0x20000020
    1b44:	00001a89 	.word	0x00001a89
    1b48:	41004400 	.word	0x41004400
    1b4c:	20000034 	.word	0x20000034
    1b50:	000a0d31 	.word	0x000a0d31
    1b54:	00001dc4 	.word	0x00001dc4
    1b58:	00001339 	.word	0x00001339

00001b5c <__udivsi3>:
    1b5c:	2200      	movs	r2, #0
    1b5e:	0843      	lsrs	r3, r0, #1
    1b60:	428b      	cmp	r3, r1
    1b62:	d374      	bcc.n	1c4e <__udivsi3+0xf2>
    1b64:	0903      	lsrs	r3, r0, #4
    1b66:	428b      	cmp	r3, r1
    1b68:	d35f      	bcc.n	1c2a <__udivsi3+0xce>
    1b6a:	0a03      	lsrs	r3, r0, #8
    1b6c:	428b      	cmp	r3, r1
    1b6e:	d344      	bcc.n	1bfa <__udivsi3+0x9e>
    1b70:	0b03      	lsrs	r3, r0, #12
    1b72:	428b      	cmp	r3, r1
    1b74:	d328      	bcc.n	1bc8 <__udivsi3+0x6c>
    1b76:	0c03      	lsrs	r3, r0, #16
    1b78:	428b      	cmp	r3, r1
    1b7a:	d30d      	bcc.n	1b98 <__udivsi3+0x3c>
    1b7c:	22ff      	movs	r2, #255	; 0xff
    1b7e:	0209      	lsls	r1, r1, #8
    1b80:	ba12      	rev	r2, r2
    1b82:	0c03      	lsrs	r3, r0, #16
    1b84:	428b      	cmp	r3, r1
    1b86:	d302      	bcc.n	1b8e <__udivsi3+0x32>
    1b88:	1212      	asrs	r2, r2, #8
    1b8a:	0209      	lsls	r1, r1, #8
    1b8c:	d065      	beq.n	1c5a <__udivsi3+0xfe>
    1b8e:	0b03      	lsrs	r3, r0, #12
    1b90:	428b      	cmp	r3, r1
    1b92:	d319      	bcc.n	1bc8 <__udivsi3+0x6c>
    1b94:	e000      	b.n	1b98 <__udivsi3+0x3c>
    1b96:	0a09      	lsrs	r1, r1, #8
    1b98:	0bc3      	lsrs	r3, r0, #15
    1b9a:	428b      	cmp	r3, r1
    1b9c:	d301      	bcc.n	1ba2 <__udivsi3+0x46>
    1b9e:	03cb      	lsls	r3, r1, #15
    1ba0:	1ac0      	subs	r0, r0, r3
    1ba2:	4152      	adcs	r2, r2
    1ba4:	0b83      	lsrs	r3, r0, #14
    1ba6:	428b      	cmp	r3, r1
    1ba8:	d301      	bcc.n	1bae <__udivsi3+0x52>
    1baa:	038b      	lsls	r3, r1, #14
    1bac:	1ac0      	subs	r0, r0, r3
    1bae:	4152      	adcs	r2, r2
    1bb0:	0b43      	lsrs	r3, r0, #13
    1bb2:	428b      	cmp	r3, r1
    1bb4:	d301      	bcc.n	1bba <__udivsi3+0x5e>
    1bb6:	034b      	lsls	r3, r1, #13
    1bb8:	1ac0      	subs	r0, r0, r3
    1bba:	4152      	adcs	r2, r2
    1bbc:	0b03      	lsrs	r3, r0, #12
    1bbe:	428b      	cmp	r3, r1
    1bc0:	d301      	bcc.n	1bc6 <__udivsi3+0x6a>
    1bc2:	030b      	lsls	r3, r1, #12
    1bc4:	1ac0      	subs	r0, r0, r3
    1bc6:	4152      	adcs	r2, r2
    1bc8:	0ac3      	lsrs	r3, r0, #11
    1bca:	428b      	cmp	r3, r1
    1bcc:	d301      	bcc.n	1bd2 <__udivsi3+0x76>
    1bce:	02cb      	lsls	r3, r1, #11
    1bd0:	1ac0      	subs	r0, r0, r3
    1bd2:	4152      	adcs	r2, r2
    1bd4:	0a83      	lsrs	r3, r0, #10
    1bd6:	428b      	cmp	r3, r1
    1bd8:	d301      	bcc.n	1bde <__udivsi3+0x82>
    1bda:	028b      	lsls	r3, r1, #10
    1bdc:	1ac0      	subs	r0, r0, r3
    1bde:	4152      	adcs	r2, r2
    1be0:	0a43      	lsrs	r3, r0, #9
    1be2:	428b      	cmp	r3, r1
    1be4:	d301      	bcc.n	1bea <__udivsi3+0x8e>
    1be6:	024b      	lsls	r3, r1, #9
    1be8:	1ac0      	subs	r0, r0, r3
    1bea:	4152      	adcs	r2, r2
    1bec:	0a03      	lsrs	r3, r0, #8
    1bee:	428b      	cmp	r3, r1
    1bf0:	d301      	bcc.n	1bf6 <__udivsi3+0x9a>
    1bf2:	020b      	lsls	r3, r1, #8
    1bf4:	1ac0      	subs	r0, r0, r3
    1bf6:	4152      	adcs	r2, r2
    1bf8:	d2cd      	bcs.n	1b96 <__udivsi3+0x3a>
    1bfa:	09c3      	lsrs	r3, r0, #7
    1bfc:	428b      	cmp	r3, r1
    1bfe:	d301      	bcc.n	1c04 <__udivsi3+0xa8>
    1c00:	01cb      	lsls	r3, r1, #7
    1c02:	1ac0      	subs	r0, r0, r3
    1c04:	4152      	adcs	r2, r2
    1c06:	0983      	lsrs	r3, r0, #6
    1c08:	428b      	cmp	r3, r1
    1c0a:	d301      	bcc.n	1c10 <__udivsi3+0xb4>
    1c0c:	018b      	lsls	r3, r1, #6
    1c0e:	1ac0      	subs	r0, r0, r3
    1c10:	4152      	adcs	r2, r2
    1c12:	0943      	lsrs	r3, r0, #5
    1c14:	428b      	cmp	r3, r1
    1c16:	d301      	bcc.n	1c1c <__udivsi3+0xc0>
    1c18:	014b      	lsls	r3, r1, #5
    1c1a:	1ac0      	subs	r0, r0, r3
    1c1c:	4152      	adcs	r2, r2
    1c1e:	0903      	lsrs	r3, r0, #4
    1c20:	428b      	cmp	r3, r1
    1c22:	d301      	bcc.n	1c28 <__udivsi3+0xcc>
    1c24:	010b      	lsls	r3, r1, #4
    1c26:	1ac0      	subs	r0, r0, r3
    1c28:	4152      	adcs	r2, r2
    1c2a:	08c3      	lsrs	r3, r0, #3
    1c2c:	428b      	cmp	r3, r1
    1c2e:	d301      	bcc.n	1c34 <__udivsi3+0xd8>
    1c30:	00cb      	lsls	r3, r1, #3
    1c32:	1ac0      	subs	r0, r0, r3
    1c34:	4152      	adcs	r2, r2
    1c36:	0883      	lsrs	r3, r0, #2
    1c38:	428b      	cmp	r3, r1
    1c3a:	d301      	bcc.n	1c40 <__udivsi3+0xe4>
    1c3c:	008b      	lsls	r3, r1, #2
    1c3e:	1ac0      	subs	r0, r0, r3
    1c40:	4152      	adcs	r2, r2
    1c42:	0843      	lsrs	r3, r0, #1
    1c44:	428b      	cmp	r3, r1
    1c46:	d301      	bcc.n	1c4c <__udivsi3+0xf0>
    1c48:	004b      	lsls	r3, r1, #1
    1c4a:	1ac0      	subs	r0, r0, r3
    1c4c:	4152      	adcs	r2, r2
    1c4e:	1a41      	subs	r1, r0, r1
    1c50:	d200      	bcs.n	1c54 <__udivsi3+0xf8>
    1c52:	4601      	mov	r1, r0
    1c54:	4152      	adcs	r2, r2
    1c56:	4610      	mov	r0, r2
    1c58:	4770      	bx	lr
    1c5a:	e7ff      	b.n	1c5c <__udivsi3+0x100>
    1c5c:	b501      	push	{r0, lr}
    1c5e:	2000      	movs	r0, #0
    1c60:	f000 f806 	bl	1c70 <__aeabi_idiv0>
    1c64:	bd02      	pop	{r1, pc}
    1c66:	46c0      	nop			; (mov r8, r8)

00001c68 <__aeabi_uidivmod>:
    1c68:	2900      	cmp	r1, #0
    1c6a:	d0f7      	beq.n	1c5c <__udivsi3+0x100>
    1c6c:	e776      	b.n	1b5c <__udivsi3>
    1c6e:	4770      	bx	lr

00001c70 <__aeabi_idiv0>:
    1c70:	4770      	bx	lr
    1c72:	46c0      	nop			; (mov r8, r8)

00001c74 <__aeabi_lmul>:
    1c74:	b5f0      	push	{r4, r5, r6, r7, lr}
    1c76:	46ce      	mov	lr, r9
    1c78:	4647      	mov	r7, r8
    1c7a:	0415      	lsls	r5, r2, #16
    1c7c:	0c2d      	lsrs	r5, r5, #16
    1c7e:	002e      	movs	r6, r5
    1c80:	b580      	push	{r7, lr}
    1c82:	0407      	lsls	r7, r0, #16
    1c84:	0c14      	lsrs	r4, r2, #16
    1c86:	0c3f      	lsrs	r7, r7, #16
    1c88:	4699      	mov	r9, r3
    1c8a:	0c03      	lsrs	r3, r0, #16
    1c8c:	437e      	muls	r6, r7
    1c8e:	435d      	muls	r5, r3
    1c90:	4367      	muls	r7, r4
    1c92:	4363      	muls	r3, r4
    1c94:	197f      	adds	r7, r7, r5
    1c96:	0c34      	lsrs	r4, r6, #16
    1c98:	19e4      	adds	r4, r4, r7
    1c9a:	469c      	mov	ip, r3
    1c9c:	42a5      	cmp	r5, r4
    1c9e:	d903      	bls.n	1ca8 <__aeabi_lmul+0x34>
    1ca0:	2380      	movs	r3, #128	; 0x80
    1ca2:	025b      	lsls	r3, r3, #9
    1ca4:	4698      	mov	r8, r3
    1ca6:	44c4      	add	ip, r8
    1ca8:	464b      	mov	r3, r9
    1caa:	4351      	muls	r1, r2
    1cac:	4343      	muls	r3, r0
    1cae:	0436      	lsls	r6, r6, #16
    1cb0:	0c36      	lsrs	r6, r6, #16
    1cb2:	0c25      	lsrs	r5, r4, #16
    1cb4:	0424      	lsls	r4, r4, #16
    1cb6:	4465      	add	r5, ip
    1cb8:	19a4      	adds	r4, r4, r6
    1cba:	1859      	adds	r1, r3, r1
    1cbc:	1949      	adds	r1, r1, r5
    1cbe:	0020      	movs	r0, r4
    1cc0:	bc0c      	pop	{r2, r3}
    1cc2:	4690      	mov	r8, r2
    1cc4:	4699      	mov	r9, r3
    1cc6:	bdf0      	pop	{r4, r5, r6, r7, pc}

00001cc8 <__libc_init_array>:
    1cc8:	b570      	push	{r4, r5, r6, lr}
    1cca:	2600      	movs	r6, #0
    1ccc:	4d0c      	ldr	r5, [pc, #48]	; (1d00 <__libc_init_array+0x38>)
    1cce:	4c0d      	ldr	r4, [pc, #52]	; (1d04 <__libc_init_array+0x3c>)
    1cd0:	1b64      	subs	r4, r4, r5
    1cd2:	10a4      	asrs	r4, r4, #2
    1cd4:	42a6      	cmp	r6, r4
    1cd6:	d109      	bne.n	1cec <__libc_init_array+0x24>
    1cd8:	2600      	movs	r6, #0
    1cda:	f000 f87b 	bl	1dd4 <_init>
    1cde:	4d0a      	ldr	r5, [pc, #40]	; (1d08 <__libc_init_array+0x40>)
    1ce0:	4c0a      	ldr	r4, [pc, #40]	; (1d0c <__libc_init_array+0x44>)
    1ce2:	1b64      	subs	r4, r4, r5
    1ce4:	10a4      	asrs	r4, r4, #2
    1ce6:	42a6      	cmp	r6, r4
    1ce8:	d105      	bne.n	1cf6 <__libc_init_array+0x2e>
    1cea:	bd70      	pop	{r4, r5, r6, pc}
    1cec:	00b3      	lsls	r3, r6, #2
    1cee:	58eb      	ldr	r3, [r5, r3]
    1cf0:	4798      	blx	r3
    1cf2:	3601      	adds	r6, #1
    1cf4:	e7ee      	b.n	1cd4 <__libc_init_array+0xc>
    1cf6:	00b3      	lsls	r3, r6, #2
    1cf8:	58eb      	ldr	r3, [r5, r3]
    1cfa:	4798      	blx	r3
    1cfc:	3601      	adds	r6, #1
    1cfe:	e7f2      	b.n	1ce6 <__libc_init_array+0x1e>
    1d00:	00001de0 	.word	0x00001de0
    1d04:	00001de0 	.word	0x00001de0
    1d08:	00001de0 	.word	0x00001de0
    1d0c:	00001de4 	.word	0x00001de4
    1d10:	42000800 	.word	0x42000800
    1d14:	42000c00 	.word	0x42000c00
    1d18:	42001000 	.word	0x42001000
    1d1c:	42001400 	.word	0x42001400
    1d20:	42001800 	.word	0x42001800
    1d24:	42001c00 	.word	0x42001c00
    1d28:	666e6f43 	.word	0x666e6f43
    1d2c:	72756769 	.word	0x72756769
    1d30:	20676e69 	.word	0x20676e69
    1d34:	6d726554 	.word	0x6d726554
    1d38:	6c616e69 	.word	0x6c616e69
    1d3c:	52415520 	.word	0x52415520
    1d40:	2e2e2e54 	.word	0x2e2e2e54
    1d44:	000a0d2e 	.word	0x000a0d2e
    1d48:	666e6f43 	.word	0x666e6f43
    1d4c:	72756769 	.word	0x72756769
    1d50:	20676e69 	.word	0x20676e69
    1d54:	54524155 	.word	0x54524155
    1d58:	6c614320 	.word	0x6c614320
    1d5c:	6361626c 	.word	0x6361626c
    1d60:	2e2e736b 	.word	0x2e2e736b
    1d64:	0a0d2e2e 	.word	0x0a0d2e2e
    1d68:	00000000 	.word	0x00000000
    1d6c:	666e6f43 	.word	0x666e6f43
    1d70:	72756769 	.word	0x72756769
    1d74:	20676e69 	.word	0x20676e69
    1d78:	4f495047 	.word	0x4f495047
    1d7c:	2e2e2e2e 	.word	0x2e2e2e2e
    1d80:	00000a0d 	.word	0x00000a0d
    1d84:	0000148e 	.word	0x0000148e
    1d88:	0000148a 	.word	0x0000148a
    1d8c:	0000148a 	.word	0x0000148a
    1d90:	000014da 	.word	0x000014da
    1d94:	000014da 	.word	0x000014da
    1d98:	000014a2 	.word	0x000014a2
    1d9c:	00001494 	.word	0x00001494
    1da0:	000014a8 	.word	0x000014a8
    1da4:	00001560 	.word	0x00001560
    1da8:	00001540 	.word	0x00001540
    1dac:	00001540 	.word	0x00001540
    1db0:	000015b0 	.word	0x000015b0
    1db4:	00001552 	.word	0x00001552
    1db8:	0000156e 	.word	0x0000156e
    1dbc:	00001544 	.word	0x00001544
    1dc0:	0000157c 	.word	0x0000157c
    1dc4:	65736552 	.word	0x65736552
    1dc8:	6f432074 	.word	0x6f432074
    1dcc:	65746e75 	.word	0x65746e75
    1dd0:	000a0d72 	.word	0x000a0d72

00001dd4 <_init>:
    1dd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1dd6:	46c0      	nop			; (mov r8, r8)
    1dd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    1dda:	bc08      	pop	{r3}
    1ddc:	469e      	mov	lr, r3
    1dde:	4770      	bx	lr

00001de0 <__init_array_start>:
    1de0:	000000cd 	.word	0x000000cd

00001de4 <_fini>:
    1de4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1de6:	46c0      	nop			; (mov r8, r8)
    1de8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    1dea:	bc08      	pop	{r3}
    1dec:	469e      	mov	lr, r3
    1dee:	4770      	bx	lr

00001df0 <__fini_array_start>:
    1df0:	000000a5 	.word	0x000000a5
